   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"BigInteger.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN12_GLOBAL__N_16signOfIlEEN10BigInteger4SignET_,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	_ZN12_GLOBAL__N_16signOfIlEEN10BigInteger4SignET_:
  23              		.fnstart
  24              	.LFB167:
  25              		.file 1 "../src/zxing_lib/bigint/BigInteger.cpp"
   1:../src/zxing_lib/bigint/BigInteger.cpp **** #include "BigInteger.hh"
   2:../src/zxing_lib/bigint/BigInteger.cpp **** 
   3:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::operator =(const BigInteger &x) {
   4:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Calls like a = a have no effect
   5:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (this == &x)
   6:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
   7:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy sign
   8:../src/zxing_lib/bigint/BigInteger.cpp **** 	sign = x.sign;
   9:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy the rest
  10:../src/zxing_lib/bigint/BigInteger.cpp **** 	mag = x.mag;
  11:../src/zxing_lib/bigint/BigInteger.cpp **** }
  12:../src/zxing_lib/bigint/BigInteger.cpp **** 
  13:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(const Blk *b, Index blen, Sign s) : mag(b, blen) {
  14:../src/zxing_lib/bigint/BigInteger.cpp **** 	switch (s) {
  15:../src/zxing_lib/bigint/BigInteger.cpp **** 	case zero:
  16:../src/zxing_lib/bigint/BigInteger.cpp **** 		if (!mag.isZero())
  17:../src/zxing_lib/bigint/BigInteger.cpp **** 			throw "BigInteger::BigInteger(const Blk *, Index, Sign): Cannot use a sign of zero with a nonzer
  18:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
  19:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
  20:../src/zxing_lib/bigint/BigInteger.cpp **** 	case positive:
  21:../src/zxing_lib/bigint/BigInteger.cpp **** 	case negative:
  22:../src/zxing_lib/bigint/BigInteger.cpp **** 		// If the magnitude is zero, force the sign to zero.
  23:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = mag.isZero() ? zero : s;
  24:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
  25:../src/zxing_lib/bigint/BigInteger.cpp **** 	default:
  26:../src/zxing_lib/bigint/BigInteger.cpp **** 		/* g++ seems to be optimizing out this case on the assumption
  27:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * that the sign is a valid member of the enumeration.  Oh well. */
  28:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::BigInteger(const Blk *, Index, Sign): Invalid sign";
  29:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
  30:../src/zxing_lib/bigint/BigInteger.cpp **** }
  31:../src/zxing_lib/bigint/BigInteger.cpp **** 
  32:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(const BigUnsigned &x, Sign s) : mag(x) {
  33:../src/zxing_lib/bigint/BigInteger.cpp **** 	switch (s) {
  34:../src/zxing_lib/bigint/BigInteger.cpp **** 	case zero:
  35:../src/zxing_lib/bigint/BigInteger.cpp **** 		if (!mag.isZero())
  36:../src/zxing_lib/bigint/BigInteger.cpp **** 			throw "BigInteger::BigInteger(const BigUnsigned &, Sign): Cannot use a sign of zero with a nonze
  37:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
  38:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
  39:../src/zxing_lib/bigint/BigInteger.cpp **** 	case positive:
  40:../src/zxing_lib/bigint/BigInteger.cpp **** 	case negative:
  41:../src/zxing_lib/bigint/BigInteger.cpp **** 		// If the magnitude is zero, force the sign to zero.
  42:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = mag.isZero() ? zero : s;
  43:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
  44:../src/zxing_lib/bigint/BigInteger.cpp **** 	default:
  45:../src/zxing_lib/bigint/BigInteger.cpp **** 		/* g++ seems to be optimizing out this case on the assumption
  46:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * that the sign is a valid member of the enumeration.  Oh well. */
  47:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::BigInteger(const BigUnsigned &, Sign): Invalid sign";
  48:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
  49:../src/zxing_lib/bigint/BigInteger.cpp **** }
  50:../src/zxing_lib/bigint/BigInteger.cpp **** 
  51:../src/zxing_lib/bigint/BigInteger.cpp **** /* CONSTRUCTION FROM PRIMITIVE INTEGERS
  52:../src/zxing_lib/bigint/BigInteger.cpp ****  * Same idea as in BigUnsigned.cc, except that negative input results in a
  53:../src/zxing_lib/bigint/BigInteger.cpp ****  * negative BigInteger instead of an exception. */
  54:../src/zxing_lib/bigint/BigInteger.cpp **** 
  55:../src/zxing_lib/bigint/BigInteger.cpp **** // Done longhand to let us use initialization.
  56:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned long  x) : mag(x) { sign = mag.isZero() ? zero : positive; }
  57:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned int   x) : mag(x) { sign = mag.isZero() ? zero : positive; }
  58:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned short x) : mag(x) { sign = mag.isZero() ? zero : positive; }
  59:../src/zxing_lib/bigint/BigInteger.cpp **** 
  60:../src/zxing_lib/bigint/BigInteger.cpp **** // For signed input, determine the desired magnitude and sign separately.
  61:../src/zxing_lib/bigint/BigInteger.cpp **** 
  62:../src/zxing_lib/bigint/BigInteger.cpp **** namespace {
  63:../src/zxing_lib/bigint/BigInteger.cpp **** 	template <class X, class UX>
  64:../src/zxing_lib/bigint/BigInteger.cpp **** 	BigInteger::Blk magOf(X x) {
  65:../src/zxing_lib/bigint/BigInteger.cpp **** 		/* UX(...) cast needed to stop short(-2^15), which negates to
  66:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * itself, from sign-extending in the conversion to Blk. */
  67:../src/zxing_lib/bigint/BigInteger.cpp **** 		return BigInteger::Blk(x < 0 ? UX(-x) : x);
  68:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
  69:../src/zxing_lib/bigint/BigInteger.cpp **** 	template <class X>
  70:../src/zxing_lib/bigint/BigInteger.cpp **** 	BigInteger::Sign signOf(X x) {
  26              		.loc 1 70 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  71:../src/zxing_lib/bigint/BigInteger.cpp **** 		return (x == 0) ? BigInteger::zero
  32              		.loc 1 71 0
  33 0000 000050E3 		cmp	r0, #0
  34 0004 0200000A 		beq	.L3
  72:../src/zxing_lib/bigint/BigInteger.cpp **** 			: (x > 0) ? BigInteger::positive
  35              		.loc 1 72 0
  36 0008 030000DA 		ble	.L4
  37 000c 0100A0E3 		mov	r0, #1
  38              	.LVL1:
  39 0010 1EFF2FE1 		bx	lr
  40              	.LVL2:
  41              	.L3:
  71:../src/zxing_lib/bigint/BigInteger.cpp **** 		return (x == 0) ? BigInteger::zero
  42              		.loc 1 71 0
  43 0014 0000A0E3 		mov	r0, #0
  44              	.LVL3:
  45 0018 1EFF2FE1 		bx	lr
  46              	.LVL4:
  47              	.L4:
  48              		.loc 1 72 0
  49 001c 0000E0E3 		mvn	r0, #0
  50              	.LVL5:
  73:../src/zxing_lib/bigint/BigInteger.cpp **** 			: BigInteger::negative;
  74:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
  51              		.loc 1 74 0
  52 0020 1EFF2FE1 		bx	lr
  53              		.cfi_endproc
  54              	.LFE167:
  55              		.cantunwind
  56              		.fnend
  58              		.section	.text._ZN12_GLOBAL__N_15magOfIlmEEmT_,"ax",%progbits
  59              		.align	2
  60              		.syntax unified
  61              		.arm
  62              		.fpu neon
  64              	_ZN12_GLOBAL__N_15magOfIlmEEmT_:
  65              		.fnstart
  66              	.LFB168:
  64:../src/zxing_lib/bigint/BigInteger.cpp **** 		/* UX(...) cast needed to stop short(-2^15), which negates to
  67              		.loc 1 64 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.LVL6:
  68:../src/zxing_lib/bigint/BigInteger.cpp **** 	template <class X>
  73              		.loc 1 68 0
  74 0000 000050E3 		cmp	r0, #0
  75 0004 000060B2 		rsblt	r0, r0, #0
  76              	.LVL7:
  77 0008 1EFF2FE1 		bx	lr
  78              		.cfi_endproc
  79              	.LFE168:
  80              		.cantunwind
  81              		.fnend
  83              		.section	.text._ZN12_GLOBAL__N_16signOfIiEEN10BigInteger4SignET_,"ax",%progbits
  84              		.align	2
  85              		.syntax unified
  86              		.arm
  87              		.fpu neon
  89              	_ZN12_GLOBAL__N_16signOfIiEEN10BigInteger4SignET_:
  90              		.fnstart
  91              	.LFB169:
  70:../src/zxing_lib/bigint/BigInteger.cpp **** 		return (x == 0) ? BigInteger::zero
  92              		.loc 1 70 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.LVL8:
  71:../src/zxing_lib/bigint/BigInteger.cpp **** 			: (x > 0) ? BigInteger::positive
  98              		.loc 1 71 0
  99 0000 000050E3 		cmp	r0, #0
 100 0004 0200000A 		beq	.L8
  72:../src/zxing_lib/bigint/BigInteger.cpp **** 			: BigInteger::negative;
 101              		.loc 1 72 0
 102 0008 030000DA 		ble	.L9
 103 000c 0100A0E3 		mov	r0, #1
 104              	.LVL9:
 105 0010 1EFF2FE1 		bx	lr
 106              	.LVL10:
 107              	.L8:
  71:../src/zxing_lib/bigint/BigInteger.cpp **** 			: (x > 0) ? BigInteger::positive
 108              		.loc 1 71 0
 109 0014 0000A0E3 		mov	r0, #0
 110              	.LVL11:
 111 0018 1EFF2FE1 		bx	lr
 112              	.LVL12:
 113              	.L9:
  72:../src/zxing_lib/bigint/BigInteger.cpp **** 			: BigInteger::negative;
 114              		.loc 1 72 0
 115 001c 0000E0E3 		mvn	r0, #0
 116              	.LVL13:
 117              		.loc 1 74 0
 118 0020 1EFF2FE1 		bx	lr
 119              		.cfi_endproc
 120              	.LFE169:
 121              		.cantunwind
 122              		.fnend
 124              		.section	.text._ZN12_GLOBAL__N_15magOfIijEEmT_,"ax",%progbits
 125              		.align	2
 126              		.syntax unified
 127              		.arm
 128              		.fpu neon
 130              	_ZN12_GLOBAL__N_15magOfIijEEmT_:
 131              		.fnstart
 132              	.LFB170:
  64:../src/zxing_lib/bigint/BigInteger.cpp **** 		/* UX(...) cast needed to stop short(-2^15), which negates to
 133              		.loc 1 64 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.LVL14:
  68:../src/zxing_lib/bigint/BigInteger.cpp **** 	template <class X>
 139              		.loc 1 68 0
 140 0000 000050E3 		cmp	r0, #0
 141 0004 000060B2 		rsblt	r0, r0, #0
 142              	.LVL15:
 143 0008 1EFF2FE1 		bx	lr
 144              		.cfi_endproc
 145              	.LFE170:
 146              		.cantunwind
 147              		.fnend
 149              		.section	.text._ZN12_GLOBAL__N_16signOfIsEEN10BigInteger4SignET_,"ax",%progbits
 150              		.align	2
 151              		.syntax unified
 152              		.arm
 153              		.fpu neon
 155              	_ZN12_GLOBAL__N_16signOfIsEEN10BigInteger4SignET_:
 156              		.fnstart
 157              	.LFB171:
  70:../src/zxing_lib/bigint/BigInteger.cpp **** 		return (x == 0) ? BigInteger::zero
 158              		.loc 1 70 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163              	.LVL16:
  71:../src/zxing_lib/bigint/BigInteger.cpp **** 			: (x > 0) ? BigInteger::positive
 164              		.loc 1 71 0
 165 0000 000050E3 		cmp	r0, #0
 166              	.LVL17:
 167 0004 0200000A 		beq	.L13
  72:../src/zxing_lib/bigint/BigInteger.cpp **** 			: BigInteger::negative;
 168              		.loc 1 72 0
 169 0008 030000DA 		ble	.L14
 170 000c 0100A0E3 		mov	r0, #1
 171 0010 1EFF2FE1 		bx	lr
 172              	.L13:
  71:../src/zxing_lib/bigint/BigInteger.cpp **** 			: (x > 0) ? BigInteger::positive
 173              		.loc 1 71 0
 174 0014 0000A0E3 		mov	r0, #0
 175 0018 1EFF2FE1 		bx	lr
 176              	.L14:
  72:../src/zxing_lib/bigint/BigInteger.cpp **** 			: BigInteger::negative;
 177              		.loc 1 72 0
 178 001c 0000E0E3 		mvn	r0, #0
 179              		.loc 1 74 0
 180 0020 1EFF2FE1 		bx	lr
 181              		.cfi_endproc
 182              	.LFE171:
 183              		.cantunwind
 184              		.fnend
 186              		.section	.text._ZN12_GLOBAL__N_15magOfIstEEmT_,"ax",%progbits
 187              		.align	2
 188              		.syntax unified
 189              		.arm
 190              		.fpu neon
 192              	_ZN12_GLOBAL__N_15magOfIstEEmT_:
 193              		.fnstart
 194              	.LFB172:
  64:../src/zxing_lib/bigint/BigInteger.cpp **** 		/* UX(...) cast needed to stop short(-2^15), which negates to
 195              		.loc 1 64 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 200              	.LVL18:
  67:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 201              		.loc 1 67 0
 202 0000 000050E3 		cmp	r0, #0
 203              	.LVL19:
 204 0004 1EFF2FA1 		bxge	lr
  67:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 205              		.loc 1 67 0 is_stmt 0 discriminator 1
 206 0008 000060E2 		rsb	r0, r0, #0
 207 000c 7000FFE6 		uxth	r0, r0
  68:../src/zxing_lib/bigint/BigInteger.cpp **** 	template <class X>
 208              		.loc 1 68 0 is_stmt 1 discriminator 1
 209 0010 1EFF2FE1 		bx	lr
 210              		.cfi_endproc
 211              	.LFE172:
 212              		.cantunwind
 213              		.fnend
 215              		.section	.text._ZN10BigIntegerC2Em,"ax",%progbits
 216              		.align	2
 217              		.global	_ZN10BigIntegerC2Em
 218              		.syntax unified
 219              		.arm
 220              		.fpu neon
 222              	_ZN10BigIntegerC2Em:
 223              		.fnstart
 224              	.LFB111:
  56:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned int   x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 225              		.loc 1 56 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              	.LVL20:
 230 0000 10402DE9 		push	{r4, lr}
 231              		.save {r4, lr}
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 4, -8
 234              		.cfi_offset 14, -4
 235 0004 0040A0E1 		mov	r4, r0
 236              	.LBB305:
  56:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned int   x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 237              		.loc 1 56 0
 238 0008 040080E2 		add	r0, r0, #4
 239              	.LVL21:
 240 000c FEFFFFEB 		bl	_ZN11BigUnsignedC1Em
 241              	.LVL22:
 242              	.LBB306:
 243              	.LBB307:
 244              	.LBB308:
 245              		.file 2 "../src/zxing_lib/bigint/NumberlikeArray.hh"
   1:../src/zxing_lib/bigint/NumberlikeArray.hh **** #ifndef NUMBERLIKEARRAY_H
   2:../src/zxing_lib/bigint/NumberlikeArray.hh **** #define NUMBERLIKEARRAY_H
   3:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
   4:../src/zxing_lib/bigint/NumberlikeArray.hh **** // Make sure we have NULL.
   5:../src/zxing_lib/bigint/NumberlikeArray.hh **** #ifndef NULL
   6:../src/zxing_lib/bigint/NumberlikeArray.hh **** #define NULL 0
   7:../src/zxing_lib/bigint/NumberlikeArray.hh **** #endif
   8:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
   9:../src/zxing_lib/bigint/NumberlikeArray.hh **** /* A NumberlikeArray<Blk> object holds a heap-allocated array of Blk with a
  10:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * length and a capacity and provides basic memory management features.
  11:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * BigUnsigned and BigUnsignedInABase both subclass it.
  12:../src/zxing_lib/bigint/NumberlikeArray.hh ****  *
  13:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * NumberlikeArray provides no information hiding.  Subclasses should use
  14:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * nonpublic inheritance and manually expose members as desired using
  15:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * declarations like this:
  16:../src/zxing_lib/bigint/NumberlikeArray.hh ****  *
  17:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * public:
  18:../src/zxing_lib/bigint/NumberlikeArray.hh ****  *     NumberlikeArray< the-type-argument >::getLength;
  19:../src/zxing_lib/bigint/NumberlikeArray.hh ****  */
  20:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
  21:../src/zxing_lib/bigint/NumberlikeArray.hh **** class NumberlikeArray {
  22:../src/zxing_lib/bigint/NumberlikeArray.hh **** public:
  23:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  24:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Type for the index of a block in the array
  25:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	typedef unsigned int Index;
  26:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// The number of bits in a block, defined below.
  27:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	static const unsigned int N;
  28:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  29:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// The current allocated capacity of this NumberlikeArray (in blocks)
  30:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index cap;
  31:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// The actual length of the value stored in this NumberlikeArray (in blocks)
  32:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index len;
  33:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Heap-allocated array of the blocks (can be NULL if len == 0)
  34:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Blk *blk;
  35:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  36:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Constructs a ``zero'' NumberlikeArray with the given capacity.
  37:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray(Index c) : cap(c), len(0) { 
  38:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = (cap > 0) ? (new Blk[cap]) : NULL;
  39:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  40:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  41:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Constructs a zero NumberlikeArray without allocating a backing array.
  42:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * A subclass that doesn't know the needed capacity at initialization
  43:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * time can use this constructor and then overwrite blk without first
  44:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * deleting it. */
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray() : cap(0), len(0) {
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
  47:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  48:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  49:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Destructor.  Note that `delete NULL' is a no-op.
  50:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	~NumberlikeArray() {
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		delete [] blk;
  52:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  53:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  54:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Ensures that the array has at least the requested capacity; may
  55:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * destroy the contents. */
  56:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	void allocate(Index c);
  57:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  58:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Ensures that the array has at least the requested capacity; does not
  59:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * destroy the contents. */
  60:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	void allocateAndCopy(Index c);
  61:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  62:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy constructor
  63:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray(const NumberlikeArray<Blk> &x);
  64:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  65:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Assignment operator
  66:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	void operator=(const NumberlikeArray<Blk> &x);
  67:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  68:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Constructor that copies from a given array of blocks
  69:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray(const Blk *b, Index blen);
  70:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  71:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// ACCESSORS
  72:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index getCapacity()     const { return cap;      }
  73:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index getLength()       const { return len;      }
  74:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Blk   getBlock(Index i) const { return blk[i];   }
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	bool  isEmpty()         const { return len == 0; }
 246              		.loc 2 75 0
 247 0010 083094E5 		ldr	r3, [r4, #8]
 248              	.LVL23:
 249              	.LBE308:
 250              	.LBE307:
 251              	.LBE306:
  56:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned int   x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 252              		.loc 1 56 0
 253 0014 000053E3 		cmp	r3, #0
 254 0018 0130A013 		movne	r3, #1
 255              	.L19:
  56:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned int   x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 256              		.loc 1 56 0 is_stmt 0 discriminator 6
 257 001c 0030C4E5 		strb	r3, [r4]
 258              	.LBE305:
 259 0020 0400A0E1 		mov	r0, r4
 260 0024 1080BDE8 		pop	{r4, pc}
 261              		.cfi_endproc
 262              	.LFE111:
 263              		.fnend
 265              		.global	_ZN10BigIntegerC1Em
 266              		.set	_ZN10BigIntegerC1Em,_ZN10BigIntegerC2Em
 267              		.section	.text._ZN10BigIntegerC2Ej,"ax",%progbits
 268              		.align	2
 269              		.global	_ZN10BigIntegerC2Ej
 270              		.syntax unified
 271              		.arm
 272              		.fpu neon
 274              	_ZN10BigIntegerC2Ej:
 275              		.fnstart
 276              	.LFB114:
  57:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned short x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 277              		.loc 1 57 0 is_stmt 1
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              	.LVL24:
 282 0000 10402DE9 		push	{r4, lr}
 283              		.save {r4, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 4, -8
 286              		.cfi_offset 14, -4
 287 0004 0040A0E1 		mov	r4, r0
 288              	.LBB309:
  57:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned short x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 289              		.loc 1 57 0
 290 0008 040080E2 		add	r0, r0, #4
 291              	.LVL25:
 292 000c FEFFFFEB 		bl	_ZN11BigUnsignedC1Ej
 293              	.LVL26:
 294              	.LBB310:
 295              	.LBB311:
 296              	.LBB312:
 297              		.loc 2 75 0
 298 0010 083094E5 		ldr	r3, [r4, #8]
 299              	.LVL27:
 300              	.LBE312:
 301              	.LBE311:
 302              	.LBE310:
  57:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned short x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 303              		.loc 1 57 0
 304 0014 000053E3 		cmp	r3, #0
 305 0018 0130A013 		movne	r3, #1
 306              	.L23:
  57:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(unsigned short x) : mag(x) { sign = mag.isZero() ? zero : positive; }
 307              		.loc 1 57 0 is_stmt 0 discriminator 6
 308 001c 0030C4E5 		strb	r3, [r4]
 309              	.LBE309:
 310 0020 0400A0E1 		mov	r0, r4
 311 0024 1080BDE8 		pop	{r4, pc}
 312              		.cfi_endproc
 313              	.LFE114:
 314              		.fnend
 316              		.global	_ZN10BigIntegerC1Ej
 317              		.set	_ZN10BigIntegerC1Ej,_ZN10BigIntegerC2Ej
 318              		.section	.text._ZN10BigIntegerC2Et,"ax",%progbits
 319              		.align	2
 320              		.global	_ZN10BigIntegerC2Et
 321              		.syntax unified
 322              		.arm
 323              		.fpu neon
 325              	_ZN10BigIntegerC2Et:
 326              		.fnstart
 327              	.LFB117:
  58:../src/zxing_lib/bigint/BigInteger.cpp **** 
 328              		.loc 1 58 0 is_stmt 1
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              	.LVL28:
 333 0000 10402DE9 		push	{r4, lr}
 334              		.save {r4, lr}
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 4, -8
 337              		.cfi_offset 14, -4
 338 0004 0040A0E1 		mov	r4, r0
 339              	.LBB313:
  58:../src/zxing_lib/bigint/BigInteger.cpp **** 
 340              		.loc 1 58 0
 341 0008 040080E2 		add	r0, r0, #4
 342              	.LVL29:
 343 000c FEFFFFEB 		bl	_ZN11BigUnsignedC1Et
 344              	.LVL30:
 345              	.LBB314:
 346              	.LBB315:
 347              	.LBB316:
 348              		.loc 2 75 0
 349 0010 083094E5 		ldr	r3, [r4, #8]
 350              	.LVL31:
 351              	.LBE316:
 352              	.LBE315:
 353              	.LBE314:
  58:../src/zxing_lib/bigint/BigInteger.cpp **** 
 354              		.loc 1 58 0
 355 0014 000053E3 		cmp	r3, #0
 356 0018 0130A013 		movne	r3, #1
 357              	.L27:
  58:../src/zxing_lib/bigint/BigInteger.cpp **** 
 358              		.loc 1 58 0 is_stmt 0 discriminator 6
 359 001c 0030C4E5 		strb	r3, [r4]
 360              	.LBE313:
 361 0020 0400A0E1 		mov	r0, r4
 362 0024 1080BDE8 		pop	{r4, pc}
 363              		.cfi_endproc
 364              	.LFE117:
 365              		.fnend
 367              		.global	_ZN10BigIntegerC1Et
 368              		.set	_ZN10BigIntegerC1Et,_ZN10BigIntegerC2Et
 369              		.section	.text._ZN10BigIntegerC2El,"ax",%progbits
 370              		.align	2
 371              		.global	_ZN10BigIntegerC2El
 372              		.syntax unified
 373              		.arm
 374              		.fpu neon
 376              	_ZN10BigIntegerC2El:
 377              		.fnstart
 378              	.LFB122:
  75:../src/zxing_lib/bigint/BigInteger.cpp **** }
  76:../src/zxing_lib/bigint/BigInteger.cpp **** 
  77:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(long  x) : sign(signOf(x)), mag(magOf<long , unsigned long >(x)) {}
 379              		.loc 1 77 0 is_stmt 1
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              	.LVL32:
 384 0000 70402DE9 		push	{r4, r5, r6, lr}
 385              		.save {r4, r5, r6, lr}
 386              		.cfi_def_cfa_offset 16
 387              		.cfi_offset 4, -16
 388              		.cfi_offset 5, -12
 389              		.cfi_offset 6, -8
 390              		.cfi_offset 14, -4
 391 0004 0050A0E1 		mov	r5, r0
 392 0008 0160A0E1 		mov	r6, r1
 393              	.LBB317:
 394              		.loc 1 77 0
 395 000c 0100A0E1 		mov	r0, r1
 396              	.LVL33:
 397 0010 FEFFFFEB 		bl	_ZN12_GLOBAL__N_16signOfIlEEN10BigInteger4SignET_
 398              	.LVL34:
 399 0014 0540A0E1 		mov	r4, r5
 400 0018 0400C4E4 		strb	r0, [r4], #4
 401 001c 0600A0E1 		mov	r0, r6
 402 0020 FEFFFFEB 		bl	_ZN12_GLOBAL__N_15magOfIlmEEmT_
 403              	.LVL35:
 404 0024 0010A0E1 		mov	r1, r0
 405 0028 0400A0E1 		mov	r0, r4
 406 002c FEFFFFEB 		bl	_ZN11BigUnsignedC1Em
 407              	.LVL36:
 408              	.LBE317:
 409 0030 0500A0E1 		mov	r0, r5
 410 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 411              		.cfi_endproc
 412              	.LFE122:
 413              		.fnend
 415              		.global	_ZN10BigIntegerC1El
 416              		.set	_ZN10BigIntegerC1El,_ZN10BigIntegerC2El
 417              		.section	.text._ZN10BigIntegerC2Ei,"ax",%progbits
 418              		.align	2
 419              		.global	_ZN10BigIntegerC2Ei
 420              		.syntax unified
 421              		.arm
 422              		.fpu neon
 424              	_ZN10BigIntegerC2Ei:
 425              		.fnstart
 426              	.LFB125:
  78:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(int   x) : sign(signOf(x)), mag(magOf<int  , unsigned int  >(x)) {}
 427              		.loc 1 78 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              	.LVL37:
 432 0000 70402DE9 		push	{r4, r5, r6, lr}
 433              		.save {r4, r5, r6, lr}
 434              		.cfi_def_cfa_offset 16
 435              		.cfi_offset 4, -16
 436              		.cfi_offset 5, -12
 437              		.cfi_offset 6, -8
 438              		.cfi_offset 14, -4
 439 0004 0050A0E1 		mov	r5, r0
 440 0008 0160A0E1 		mov	r6, r1
 441              	.LBB318:
 442              		.loc 1 78 0
 443 000c 0100A0E1 		mov	r0, r1
 444              	.LVL38:
 445 0010 FEFFFFEB 		bl	_ZN12_GLOBAL__N_16signOfIiEEN10BigInteger4SignET_
 446              	.LVL39:
 447 0014 0540A0E1 		mov	r4, r5
 448 0018 0400C4E4 		strb	r0, [r4], #4
 449 001c 0600A0E1 		mov	r0, r6
 450 0020 FEFFFFEB 		bl	_ZN12_GLOBAL__N_15magOfIijEEmT_
 451              	.LVL40:
 452 0024 0010A0E1 		mov	r1, r0
 453 0028 0400A0E1 		mov	r0, r4
 454 002c FEFFFFEB 		bl	_ZN11BigUnsignedC1Em
 455              	.LVL41:
 456              	.LBE318:
 457 0030 0500A0E1 		mov	r0, r5
 458 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 459              		.cfi_endproc
 460              	.LFE125:
 461              		.fnend
 463              		.global	_ZN10BigIntegerC1Ei
 464              		.set	_ZN10BigIntegerC1Ei,_ZN10BigIntegerC2Ei
 465              		.section	.text._ZN10BigIntegerC2Es,"ax",%progbits
 466              		.align	2
 467              		.global	_ZN10BigIntegerC2Es
 468              		.syntax unified
 469              		.arm
 470              		.fpu neon
 472              	_ZN10BigIntegerC2Es:
 473              		.fnstart
 474              	.LFB128:
  79:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::BigInteger(short x) : sign(signOf(x)), mag(magOf<short, unsigned short>(x)) {}
 475              		.loc 1 79 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              	.LVL42:
 480 0000 70402DE9 		push	{r4, r5, r6, lr}
 481              		.save {r4, r5, r6, lr}
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 4, -16
 484              		.cfi_offset 5, -12
 485              		.cfi_offset 6, -8
 486              		.cfi_offset 14, -4
 487 0004 0050A0E1 		mov	r5, r0
 488 0008 0160A0E1 		mov	r6, r1
 489              	.LBB319:
 490              		.loc 1 79 0
 491 000c 0100A0E1 		mov	r0, r1
 492              	.LVL43:
 493 0010 FEFFFFEB 		bl	_ZN12_GLOBAL__N_16signOfIsEEN10BigInteger4SignET_
 494              	.LVL44:
 495 0014 0540A0E1 		mov	r4, r5
 496 0018 0400C4E4 		strb	r0, [r4], #4
 497 001c 0600A0E1 		mov	r0, r6
 498 0020 FEFFFFEB 		bl	_ZN12_GLOBAL__N_15magOfIstEEmT_
 499              	.LVL45:
 500 0024 0010A0E1 		mov	r1, r0
 501 0028 0400A0E1 		mov	r0, r4
 502 002c FEFFFFEB 		bl	_ZN11BigUnsignedC1Em
 503              	.LVL46:
 504              	.LBE319:
 505 0030 0500A0E1 		mov	r0, r5
 506 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 507              		.cfi_endproc
 508              	.LFE128:
 509              		.fnend
 511              		.global	_ZN10BigIntegerC1Es
 512              		.set	_ZN10BigIntegerC1Es,_ZN10BigIntegerC2Es
 513              		.section	.text._ZNK10BigInteger9compareToERKS_,"ax",%progbits
 514              		.align	2
 515              		.global	_ZNK10BigInteger9compareToERKS_
 516              		.syntax unified
 517              		.arm
 518              		.fpu neon
 520              	_ZNK10BigInteger9compareToERKS_:
 521              		.fnstart
 522              	.LFB139:
  80:../src/zxing_lib/bigint/BigInteger.cpp **** 
  81:../src/zxing_lib/bigint/BigInteger.cpp **** // CONVERSION TO PRIMITIVE INTEGERS
  82:../src/zxing_lib/bigint/BigInteger.cpp **** 
  83:../src/zxing_lib/bigint/BigInteger.cpp **** /* Reuse BigUnsigned's conversion to an unsigned primitive integer.
  84:../src/zxing_lib/bigint/BigInteger.cpp ****  * The friend is a separate function rather than
  85:../src/zxing_lib/bigint/BigInteger.cpp ****  * BigInteger::convertToUnsignedPrimitive to avoid requiring BigUnsigned to
  86:../src/zxing_lib/bigint/BigInteger.cpp ****  * declare BigInteger. */
  87:../src/zxing_lib/bigint/BigInteger.cpp **** template <class X>
  88:../src/zxing_lib/bigint/BigInteger.cpp **** inline X convertBigUnsignedToPrimitiveAccess(const BigUnsigned &a) {
  89:../src/zxing_lib/bigint/BigInteger.cpp **** 	return a.convertToPrimitive<X>();
  90:../src/zxing_lib/bigint/BigInteger.cpp **** }
  91:../src/zxing_lib/bigint/BigInteger.cpp **** 
  92:../src/zxing_lib/bigint/BigInteger.cpp **** template <class X>
  93:../src/zxing_lib/bigint/BigInteger.cpp **** X BigInteger::convertToUnsignedPrimitive() const {
  94:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == negative)
  95:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::to<Primitive>: "
  96:../src/zxing_lib/bigint/BigInteger.cpp **** 			"Cannot convert a negative integer to an unsigned type";
  97:../src/zxing_lib/bigint/BigInteger.cpp **** 	else
  98:../src/zxing_lib/bigint/BigInteger.cpp **** 		return convertBigUnsignedToPrimitiveAccess<X>(mag);
  99:../src/zxing_lib/bigint/BigInteger.cpp **** }
 100:../src/zxing_lib/bigint/BigInteger.cpp **** 
 101:../src/zxing_lib/bigint/BigInteger.cpp **** /* Similar to BigUnsigned::convertToPrimitive, but split into two cases for
 102:../src/zxing_lib/bigint/BigInteger.cpp ****  * nonnegative and negative numbers. */
 103:../src/zxing_lib/bigint/BigInteger.cpp **** template <class X, class UX>
 104:../src/zxing_lib/bigint/BigInteger.cpp **** X BigInteger::convertToSignedPrimitive() const {
 105:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero)
 106:../src/zxing_lib/bigint/BigInteger.cpp **** 		return 0;
 107:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (mag.getLength() == 1) {
 108:../src/zxing_lib/bigint/BigInteger.cpp **** 		// The single block might fit in an X.  Try the conversion.
 109:../src/zxing_lib/bigint/BigInteger.cpp **** 		Blk b = mag.getBlock(0);
 110:../src/zxing_lib/bigint/BigInteger.cpp **** 		if (sign == positive) {
 111:../src/zxing_lib/bigint/BigInteger.cpp **** 			X x = X(b);
 112:../src/zxing_lib/bigint/BigInteger.cpp **** 			if (x >= 0 && Blk(x) == b)
 113:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 114:../src/zxing_lib/bigint/BigInteger.cpp **** 		} else {
 115:../src/zxing_lib/bigint/BigInteger.cpp **** 			X x = -X(b);
 116:../src/zxing_lib/bigint/BigInteger.cpp **** 			/* UX(...) needed to avoid rejecting conversion of
 117:../src/zxing_lib/bigint/BigInteger.cpp **** 			 * -2^15 to a short. */
 118:../src/zxing_lib/bigint/BigInteger.cpp **** 			if (x < 0 && Blk(UX(-x)) == b)
 119:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 120:../src/zxing_lib/bigint/BigInteger.cpp **** 		}
 121:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Otherwise fall through.
 122:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 123:../src/zxing_lib/bigint/BigInteger.cpp **** 	throw "BigInteger::to<Primitive>: "
 124:../src/zxing_lib/bigint/BigInteger.cpp **** 		"Value is too big to fit in the requested type";
 125:../src/zxing_lib/bigint/BigInteger.cpp **** }
 126:../src/zxing_lib/bigint/BigInteger.cpp **** 
 127:../src/zxing_lib/bigint/BigInteger.cpp **** unsigned long  BigInteger::toUnsignedLong () const { return convertToUnsignedPrimitive<unsigned lon
 128:../src/zxing_lib/bigint/BigInteger.cpp **** unsigned int   BigInteger::toUnsignedInt  () const { return convertToUnsignedPrimitive<unsigned int
 129:../src/zxing_lib/bigint/BigInteger.cpp **** unsigned short BigInteger::toUnsignedShort() const { return convertToUnsignedPrimitive<unsigned sho
 130:../src/zxing_lib/bigint/BigInteger.cpp **** long           BigInteger::toLong         () const { return convertToSignedPrimitive  <long , unsig
 131:../src/zxing_lib/bigint/BigInteger.cpp **** int            BigInteger::toInt          () const { return convertToSignedPrimitive  <int  , unsig
 132:../src/zxing_lib/bigint/BigInteger.cpp **** short          BigInteger::toShort        () const { return convertToSignedPrimitive  <short, unsig
 133:../src/zxing_lib/bigint/BigInteger.cpp **** 
 134:../src/zxing_lib/bigint/BigInteger.cpp **** // COMPARISON
 135:../src/zxing_lib/bigint/BigInteger.cpp **** BigInteger::CmpRes BigInteger::compareTo(const BigInteger &x) const {
 523              		.loc 1 135 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              	.LVL47:
 136:../src/zxing_lib/bigint/BigInteger.cpp **** 	// A greater sign implies a greater number
 137:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign < x.sign)
 528              		.loc 1 137 0
 529 0000 D030D0E1 		ldrsb	r3, [r0]
 530 0004 D020D1E1 		ldrsb	r2, [r1]
 531 0008 020053E1 		cmp	r3, r2
 532 000c 1B0000BA 		blt	.L41
 138:../src/zxing_lib/bigint/BigInteger.cpp **** 		return less;
 139:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (sign > x.sign)
 533              		.loc 1 139 0
 534 0010 1C0000CA 		bgt	.L42
 140:../src/zxing_lib/bigint/BigInteger.cpp **** 		return greater;
 141:../src/zxing_lib/bigint/BigInteger.cpp **** 	else switch (sign) {
 535              		.loc 1 141 0
 536 0014 000053E3 		cmp	r3, #0
 537 0018 1C00000A 		beq	.L43
 135:../src/zxing_lib/bigint/BigInteger.cpp **** 	// A greater sign implies a greater number
 538              		.loc 1 135 0
 539 001c 10402DE9 		push	{r4, lr}
 540              		.save {r4, lr}
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 4, -8
 543              		.cfi_offset 14, -4
 544              		.loc 1 141 0
 545 0020 010053E3 		cmp	r3, #1
 546 0024 0A00000A 		beq	.L39
 547 0028 010073E3 		cmn	r3, #1
 548 002c 0C00000A 		beq	.L49
 142:../src/zxing_lib/bigint/BigInteger.cpp **** 		// If the signs are the same...
 143:../src/zxing_lib/bigint/BigInteger.cpp **** 	case zero:
 144:../src/zxing_lib/bigint/BigInteger.cpp **** 		return equal; // Two zeros are equal
 145:../src/zxing_lib/bigint/BigInteger.cpp **** 	case positive:
 146:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Compare the magnitudes
 147:../src/zxing_lib/bigint/BigInteger.cpp **** 		return mag.compareTo(x.mag);
 148:../src/zxing_lib/bigint/BigInteger.cpp **** 	case negative:
 149:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Compare the magnitudes, but return the opposite result
 150:../src/zxing_lib/bigint/BigInteger.cpp **** 		return CmpRes(-mag.compareTo(x.mag));
 151:../src/zxing_lib/bigint/BigInteger.cpp **** 	default:
 152:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger internal error";
 549              		.loc 1 152 0
 550 0030 0400A0E3 		mov	r0, #4
 551              	.LVL48:
 552 0034 FEFFFFEB 		bl	__cxa_allocate_exception
 553              	.LVL49:
 554 0038 003000E3 		movw	r3, #:lower16:.LC0
 555 003c 003040E3 		movt	r3, #:upper16:.LC0
 556 0040 003080E5 		str	r3, [r0]
 557 0044 0020A0E3 		mov	r2, #0
 558 0048 001000E3 		movw	r1, #:lower16:_ZTIPKc
 559 004c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 560 0050 FEFFFFEB 		bl	__cxa_throw
 561              	.LVL50:
 562              	.L39:
 147:../src/zxing_lib/bigint/BigInteger.cpp **** 	case negative:
 563              		.loc 1 147 0
 564 0054 041081E2 		add	r1, r1, #4
 565              	.LVL51:
 566 0058 040080E2 		add	r0, r0, #4
 567              	.LVL52:
 568 005c FEFFFFEB 		bl	_ZNK11BigUnsigned9compareToERKS_
 569              	.LVL53:
 570 0060 1080BDE8 		pop	{r4, pc}
 571              	.LVL54:
 572              	.L49:
 150:../src/zxing_lib/bigint/BigInteger.cpp **** 	default:
 573              		.loc 1 150 0
 574 0064 041081E2 		add	r1, r1, #4
 575              	.LVL55:
 576 0068 040080E2 		add	r0, r0, #4
 577              	.LVL56:
 578 006c FEFFFFEB 		bl	_ZNK11BigUnsigned9compareToERKS_
 579              	.LVL57:
 580 0070 7000EFE6 		uxtb	r0, r0
 581 0074 000060E2 		rsb	r0, r0, #0
 582 0078 7000AFE6 		sxtb	r0, r0
 583 007c 1080BDE8 		pop	{r4, pc}
 584              	.LVL58:
 585              	.L41:
 586              		.cfi_def_cfa_offset 0
 587              		.cfi_restore 4
 588              		.cfi_restore 14
 138:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (sign > x.sign)
 589              		.loc 1 138 0
 590 0080 0000E0E3 		mvn	r0, #0
 591              	.LVL59:
 592 0084 1EFF2FE1 		bx	lr
 593              	.LVL60:
 594              	.L42:
 140:../src/zxing_lib/bigint/BigInteger.cpp **** 	else switch (sign) {
 595              		.loc 1 140 0
 596 0088 0100A0E3 		mov	r0, #1
 597              	.LVL61:
 598 008c 1EFF2FE1 		bx	lr
 599              	.LVL62:
 600              	.L43:
 144:../src/zxing_lib/bigint/BigInteger.cpp **** 	case positive:
 601              		.loc 1 144 0
 602 0090 0000A0E3 		mov	r0, #0
 603              	.LVL63:
 604 0094 1EFF2FE1 		bx	lr
 605              		.cfi_endproc
 606              	.LFE139:
 607              		.fnend
 609              		.section	.text._ZN15NumberlikeArrayImEC2EPKmj,"axG",%progbits,_ZN15NumberlikeArrayImEC5EPKmj,comda
 610              		.align	2
 611              		.weak	_ZN15NumberlikeArrayImEC2EPKmj
 612              		.syntax unified
 613              		.arm
 614              		.fpu neon
 616              	_ZN15NumberlikeArrayImEC2EPKmj:
 617              		.fnstart
 618              	.LFB150:
  76:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  77:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Equality comparison: checks if both objects have the same length and
  78:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * equal (==) array elements to that length.  Subclasses may wish to
  79:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * override. */
  80:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	bool operator ==(const NumberlikeArray<Blk> &x) const;
  81:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  82:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	bool operator !=(const NumberlikeArray<Blk> &x) const {
  83:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		return !operator ==(x);
  84:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  85:../src/zxing_lib/bigint/NumberlikeArray.hh **** };
  86:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  87:../src/zxing_lib/bigint/NumberlikeArray.hh **** /* BEGIN TEMPLATE DEFINITIONS.  They are present here so that source files that
  88:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * include this header file can generate the necessary real definitions. */
  89:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  90:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
  91:../src/zxing_lib/bigint/NumberlikeArray.hh **** const unsigned int NumberlikeArray<Blk>::N = 8 * sizeof(Blk);
  92:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  93:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
  94:../src/zxing_lib/bigint/NumberlikeArray.hh **** void NumberlikeArray<Blk>::allocate(Index c) {
  95:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
  96:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	if (c > cap) {
  97:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Delete the old number array
  98:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		delete [] blk;
  99:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new array
 100:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		cap = c;
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = new Blk[cap];
 102:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 103:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 104:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 105:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 106:../src/zxing_lib/bigint/NumberlikeArray.hh **** void NumberlikeArray<Blk>::allocateAndCopy(Index c) {
 107:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 108:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	if (c > cap) {
 109:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		Blk *oldBlk = blk;
 110:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new number array
 111:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		cap = c;
 112:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = new Blk[cap];
 113:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Copy number blocks
 114:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		Index i;
 115:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		for (i = 0; i < len; i++)
 116:../src/zxing_lib/bigint/NumberlikeArray.hh **** 			blk[i] = oldBlk[i];
 117:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Delete the old array
 118:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		delete [] oldBlk;
 119:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 120:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 121:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 122:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 123:../src/zxing_lib/bigint/NumberlikeArray.hh **** NumberlikeArray<Blk>::NumberlikeArray(const NumberlikeArray<Blk> &x)
 124:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		: len(x.len) {
 125:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Create array
 126:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	cap = len;
 127:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	blk = new Blk[cap];
 128:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 129:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index i;
 130:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	for (i = 0; i < len; i++)
 131:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 132:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 133:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 134:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 135:../src/zxing_lib/bigint/NumberlikeArray.hh **** void NumberlikeArray<Blk>::operator=(const NumberlikeArray<Blk> &x) {
 136:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Calls like a = a have no effect; catch them before the aliasing
 137:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * causes a problem */
 138:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	if (this == &x)
 139:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		return;
 140:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy length
 141:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	len = x.len;
 142:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Expand array if necessary
 143:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	allocate(len);
 144:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy number blocks
 145:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index i;
 146:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	for (i = 0; i < len; i++)
 147:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 148:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 149:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 150:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 151:../src/zxing_lib/bigint/NumberlikeArray.hh **** NumberlikeArray<Blk>::NumberlikeArray(const Blk *b, Index blen)
 619              		.loc 2 151 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623              	.LVL64:
 624 0000 70402DE9 		push	{r4, r5, r6, lr}
 625              		.save {r4, r5, r6, lr}
 626              		.cfi_def_cfa_offset 16
 627              		.cfi_offset 4, -16
 628              		.cfi_offset 5, -12
 629              		.cfi_offset 6, -8
 630              		.cfi_offset 14, -4
 631              	.LBB320:
 152:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		: cap(blen), len(blen) {
 632              		.loc 2 152 0
 633 0004 002080E5 		str	r2, [r0]
 634 0008 042080E5 		str	r2, [r0, #4]
 635              	.LBB321:
 153:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Create array
 154:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	blk = new Blk[cap];
 636              		.loc 2 154 0
 637 000c 2E0272E3 		cmn	r2, #-536870910
 638 0010 0D00008A 		bhi	.L51
 639 0014 0040A0E1 		mov	r4, r0
 640 0018 0150A0E1 		mov	r5, r1
 641              		.loc 2 154 0 is_stmt 0 discriminator 1
 642 001c 0201A0E1 		lsl	r0, r2, #2
 643              	.LVL65:
 644 0020 FEFFFFEB 		bl	_Znaj
 645              	.LVL66:
 646 0024 080084E5 		str	r0, [r4, #8]
 647              	.LVL67:
 155:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 156:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index i;
 157:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	for (i = 0; i < len; i++)
 648              		.loc 2 157 0 is_stmt 1 discriminator 1
 649 0028 0030A0E3 		mov	r3, #0
 650              	.LVL68:
 651              	.L52:
 652              		.loc 2 157 0 is_stmt 0 discriminator 3
 653 002c 042094E5 		ldr	r2, [r4, #4]
 654 0030 020053E1 		cmp	r3, r2
 655 0034 0500002A 		bcs	.L53
 158:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = b[i];
 656              		.loc 2 158 0 is_stmt 1 discriminator 2
 657 0038 082094E5 		ldr	r2, [r4, #8]
 658 003c 031195E7 		ldr	r1, [r5, r3, lsl #2]
 659 0040 031182E7 		str	r1, [r2, r3, lsl #2]
 157:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = b[i];
 660              		.loc 2 157 0 discriminator 2
 661 0044 013083E2 		add	r3, r3, #1
 662              	.LVL69:
 663 0048 F7FFFFEA 		b	.L52
 664              	.LVL70:
 665              	.L51:
 154:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 666              		.loc 2 154 0 discriminator 2
 667 004c FEFFFFEB 		bl	__cxa_throw_bad_array_new_length
 668              	.LVL71:
 669              	.L53:
 670              	.LBE321:
 671              	.LBE320:
 159:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 672              		.loc 2 159 0
 673 0050 0400A0E1 		mov	r0, r4
 674 0054 7080BDE8 		pop	{r4, r5, r6, pc}
 675              		.cfi_endproc
 676              	.LFE150:
 677              		.fnend
 679              		.weak	_ZN15NumberlikeArrayImEC1EPKmj
 680              		.set	_ZN15NumberlikeArrayImEC1EPKmj,_ZN15NumberlikeArrayImEC2EPKmj
 681              		.section	.text._ZN10BigIntegerC2EPKmjNS_4SignE,"ax",%progbits
 682              		.align	2
 683              		.global	_ZN10BigIntegerC2EPKmjNS_4SignE
 684              		.syntax unified
 685              		.arm
 686              		.fpu neon
 688              	_ZN10BigIntegerC2EPKmjNS_4SignE:
 689              		.fnstart
 690              	.LFB105:
  13:../src/zxing_lib/bigint/BigInteger.cpp **** 	switch (s) {
 691              		.loc 1 13 0
 692              		.cfi_startproc
 693              		.cfi_personality 0,__gxx_personality_v0
 694              		.cfi_lsda 0,.LLSDA105
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              	.LVL72:
 698 0000 70402DE9 		push	{r4, r5, r6, lr}
 699              		.save {r4, r5, r6, lr}
 700              		.cfi_def_cfa_offset 16
 701              		.cfi_offset 4, -16
 702              		.cfi_offset 5, -12
 703              		.cfi_offset 6, -8
 704              		.cfi_offset 14, -4
 705 0004 0050A0E1 		mov	r5, r0
 706 0008 0360A0E1 		mov	r6, r3
 707              	.LBB338:
  13:../src/zxing_lib/bigint/BigInteger.cpp **** 	switch (s) {
 708              		.loc 1 13 0
 709 000c 044080E2 		add	r4, r0, #4
 710              	.LVL73:
 711              	.LBB339:
 712              	.LBB340:
 713              		.file 3 "../src/zxing_lib/bigint/BigUnsigned.hh"
   1:../src/zxing_lib/bigint/BigUnsigned.hh **** #ifndef BIGUNSIGNED_H
   2:../src/zxing_lib/bigint/BigUnsigned.hh **** #define BIGUNSIGNED_H
   3:../src/zxing_lib/bigint/BigUnsigned.hh **** 
   4:../src/zxing_lib/bigint/BigUnsigned.hh **** #include "NumberlikeArray.hh"
   5:../src/zxing_lib/bigint/BigUnsigned.hh **** 
   6:../src/zxing_lib/bigint/BigUnsigned.hh **** /* A BigUnsigned object represents a nonnegative integer of size limited only by
   7:../src/zxing_lib/bigint/BigUnsigned.hh ****  * available memory.  BigUnsigneds support most mathematical operators and can
   8:../src/zxing_lib/bigint/BigUnsigned.hh ****  * be converted to and from most primitive integer types.
   9:../src/zxing_lib/bigint/BigUnsigned.hh ****  *
  10:../src/zxing_lib/bigint/BigUnsigned.hh ****  * The number is stored as a NumberlikeArray of unsigned longs as if it were
  11:../src/zxing_lib/bigint/BigUnsigned.hh ****  * written in base 256^sizeof(unsigned long).  The least significant block is
  12:../src/zxing_lib/bigint/BigUnsigned.hh ****  * first, and the length is such that the most significant block is nonzero. */
  13:../src/zxing_lib/bigint/BigUnsigned.hh **** class BigUnsigned : protected NumberlikeArray<unsigned long> {
  14:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  15:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  16:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Enumeration for the result of a comparison.
  17:../src/zxing_lib/bigint/BigUnsigned.hh **** 	enum CmpRes { less = -1, equal = 0, greater = 1 };
  18:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  19:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// BigUnsigneds are built with a Blk type of unsigned long.
  20:../src/zxing_lib/bigint/BigUnsigned.hh **** 	typedef unsigned long Blk;
  21:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  22:../src/zxing_lib/bigint/BigUnsigned.hh **** 	typedef NumberlikeArray<Blk>::Index Index;
  23:../src/zxing_lib/bigint/BigUnsigned.hh **** 	using NumberlikeArray<Blk>::N;
  24:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  25:../src/zxing_lib/bigint/BigUnsigned.hh **** protected:
  26:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Creates a BigUnsigned with a capacity; for internal use.
  27:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(int, Index c) : NumberlikeArray<Blk>(0, c) {}
  28:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  29:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Decreases len to eliminate any leading zero blocks.
  30:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void zapLeadingZeros() { 
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 		while (len > 0 && blk[len - 1] == 0)
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
  33:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
  34:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  35:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  36:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Constructs zero.
  37:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned() : NumberlikeArray<Blk>() {}
  38:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  39:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Copy constructor
  40:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(const BigUnsigned &x) : NumberlikeArray<Blk>(x) {}
  41:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  42:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Assignment operator
  43:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator=(const BigUnsigned &x) {
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 		NumberlikeArray<Blk>::operator =(x);
  45:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
  46:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  47:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Constructor that copies from a given array of blocks.
  48:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(const Blk *b, Index blen) : NumberlikeArray<Blk>(b, blen) {
 714              		.loc 3 48 0
 715 0010 0400A0E1 		mov	r0, r4
 716              	.LVL74:
 717              	.LEHB0:
 718 0014 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEC2EPKmj
 719              	.LVL75:
 720              	.LEHE0:
 721              	.L57:
 722              	.LBB341:
 723              	.LBB342:
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
 724              		.loc 3 31 0
 725 0018 043094E5 		ldr	r3, [r4, #4]
 726 001c 000053E3 		cmp	r3, #0
 727 0020 0600000A 		beq	.L56
 728 0024 082094E5 		ldr	r2, [r4, #8]
 729 0028 071143E2 		sub	r1, r3, #-1073741823
 730 002c 012192E7 		ldr	r2, [r2, r1, lsl #2]
 731 0030 000052E3 		cmp	r2, #0
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 732              		.loc 3 32 0
 733 0034 01304302 		subeq	r3, r3, #1
 734 0038 04308405 		streq	r3, [r4, #4]
 735 003c F5FFFF0A 		beq	.L57
 736              	.L56:
 737              	.LVL76:
 738              	.LBE342:
 739              	.LBE341:
 740              	.LBE340:
 741              	.LBE339:
  14:../src/zxing_lib/bigint/BigInteger.cpp **** 	case zero:
 742              		.loc 1 14 0
 743 0040 000056E3 		cmp	r6, #0
 744 0044 1100000A 		beq	.L59
 745 0048 010056E3 		cmp	r6, #1
 746 004c 1F00000A 		beq	.L60
 747 0050 010076E3 		cmn	r6, #1
 748 0054 1D00000A 		beq	.L60
  28:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 749              		.loc 1 28 0
 750 0058 0400A0E3 		mov	r0, #4
 751 005c FEFFFFEB 		bl	__cxa_allocate_exception
 752              	.LVL77:
 753 0060 003000E3 		movw	r3, #:lower16:.LC2
 754 0064 003040E3 		movt	r3, #:upper16:.LC2
 755 0068 003080E5 		str	r3, [r0]
 756 006c 0020A0E3 		mov	r2, #0
 757 0070 001000E3 		movw	r1, #:lower16:_ZTIPKc
 758 0074 001040E3 		movt	r1, #:upper16:_ZTIPKc
 759              	.LEHB1:
 760 0078 FEFFFFEB 		bl	__cxa_throw
 761              	.LVL78:
 762              	.LEHE1:
 763              	.L66:
 764              	.LBB343:
 765              	.LBB344:
 766              	.LBB345:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 767              		.loc 2 51 0
 768 007c 0C0095E5 		ldr	r0, [r5, #12]
 769 0080 000050E3 		cmp	r0, #0
 770 0084 0000000A 		beq	.L65
 771 0088 FEFFFFEB 		bl	_ZdaPv
 772              	.LVL79:
 773              	.L65:
 774              	.LEHB2:
 775 008c FEFFFFEB 		bl	__cxa_end_cleanup
 776              	.LVL80:
 777              	.LEHE2:
 778              	.L59:
 779              	.LBE345:
 780              	.LBE344:
 781              	.LBE343:
 782              	.LBB346:
 783              	.LBB347:
 784              	.LBB348:
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 785              		.loc 2 75 0
 786 0090 083095E5 		ldr	r3, [r5, #8]
 787              	.LVL81:
 788              	.LBE348:
 789              	.LBE347:
 790              	.LBE346:
  16:../src/zxing_lib/bigint/BigInteger.cpp **** 			throw "BigInteger::BigInteger(const Blk *, Index, Sign): Cannot use a sign of zero with a nonzer
 791              		.loc 1 16 0
 792 0094 000053E3 		cmp	r3, #0
 793 0098 0300001A 		bne	.L70
  18:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 794              		.loc 1 18 0
 795 009c 0030A0E3 		mov	r3, #0
 796 00a0 0030C5E5 		strb	r3, [r5]
 797              	.L68:
 798              	.LBE338:
  30:../src/zxing_lib/bigint/BigInteger.cpp **** 
 799              		.loc 1 30 0
 800 00a4 0500A0E1 		mov	r0, r5
 801 00a8 7080BDE8 		pop	{r4, r5, r6, pc}
 802              	.L70:
 803              	.LBB352:
  17:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
 804              		.loc 1 17 0
 805 00ac 0400A0E3 		mov	r0, #4
 806 00b0 FEFFFFEB 		bl	__cxa_allocate_exception
 807              	.LVL82:
 808 00b4 003000E3 		movw	r3, #:lower16:.LC1
 809 00b8 003040E3 		movt	r3, #:upper16:.LC1
 810 00bc 003080E5 		str	r3, [r0]
 811 00c0 0020A0E3 		mov	r2, #0
 812 00c4 001000E3 		movw	r1, #:lower16:_ZTIPKc
 813 00c8 001040E3 		movt	r1, #:upper16:_ZTIPKc
 814              	.LEHB3:
 815 00cc FEFFFFEB 		bl	__cxa_throw
 816              	.LVL83:
 817              	.LEHE3:
 818              	.L60:
 819              	.LBB349:
 820              	.LBB350:
 821              	.LBB351:
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 822              		.loc 2 75 0
 823 00d0 083095E5 		ldr	r3, [r5, #8]
 824              	.LVL84:
 825              	.LBE351:
 826              	.LBE350:
 827              	.LBE349:
  23:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 828              		.loc 1 23 0
 829 00d4 000053E3 		cmp	r3, #0
 830 00d8 0100000A 		beq	.L71
 831              	.L63:
  23:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 832              		.loc 1 23 0 is_stmt 0 discriminator 5
 833 00dc 0060C5E5 		strb	r6, [r5]
 834              	.LBE352:
  30:../src/zxing_lib/bigint/BigInteger.cpp **** 
 835              		.loc 1 30 0 is_stmt 1 discriminator 5
 836 00e0 EFFFFFEA 		b	.L68
 837              	.L71:
 838              	.LBB353:
  23:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 839              		.loc 1 23 0
 840 00e4 0060A0E3 		mov	r6, #0
 841 00e8 FBFFFFEA 		b	.L63
 842              	.LBE353:
 843              		.cfi_endproc
 844              	.LFE105:
 845              		.global	__gxx_personality_v0
 846              		.personality	__gxx_personality_v0
 847              		.handlerdata
 848              	.LLSDA105:
 849 0008 FF       		.byte	0xff
 850 0009 FF       		.byte	0xff
 851 000a 01       		.byte	0x1
 852 000b 12       		.uleb128 .LLSDACSE105-.LLSDACSB105
 853              	.LLSDACSB105:
 854 000c 14       		.uleb128 .LEHB0-.LFB105
 855 000d 04       		.uleb128 .LEHE0-.LEHB0
 856 000e 00       		.uleb128 0
 857 000f 00       		.uleb128 0
 858 0010 78       		.uleb128 .LEHB1-.LFB105
 859 0011 04       		.uleb128 .LEHE1-.LEHB1
 860 0012 7C       		.uleb128 .L66-.LFB105
 861 0013 00       		.uleb128 0
 862 0014 8C01     		.uleb128 .LEHB2-.LFB105
 863 0016 04       		.uleb128 .LEHE2-.LEHB2
 864 0017 00       		.uleb128 0
 865 0018 00       		.uleb128 0
 866 0019 CC01     		.uleb128 .LEHB3-.LFB105
 867 001b 04       		.uleb128 .LEHE3-.LEHB3
 868 001c 7C       		.uleb128 .L66-.LFB105
 869 001d 00       		.uleb128 0
 870              	.LLSDACSE105:
 871              		.section	.text._ZN10BigIntegerC2EPKmjNS_4SignE
 872              		.fnend
 874              		.global	_ZN10BigIntegerC1EPKmjNS_4SignE
 875              		.set	_ZN10BigIntegerC1EPKmjNS_4SignE,_ZN10BigIntegerC2EPKmjNS_4SignE
 876              		.section	.text._ZN15NumberlikeArrayImEC2ERKS0_,"axG",%progbits,_ZN15NumberlikeArrayImEC5ERKS0_,com
 877              		.align	2
 878              		.weak	_ZN15NumberlikeArrayImEC2ERKS0_
 879              		.syntax unified
 880              		.arm
 881              		.fpu neon
 883              	_ZN15NumberlikeArrayImEC2ERKS0_:
 884              		.fnstart
 885              	.LFB159:
 123:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		: len(x.len) {
 886              		.loc 2 123 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              	.LVL85:
 891 0000 70402DE9 		push	{r4, r5, r6, lr}
 892              		.save {r4, r5, r6, lr}
 893              		.cfi_def_cfa_offset 16
 894              		.cfi_offset 4, -16
 895              		.cfi_offset 5, -12
 896              		.cfi_offset 6, -8
 897              		.cfi_offset 14, -4
 898 0004 0040A0E1 		mov	r4, r0
 899              	.LBB354:
 124:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Create array
 900              		.loc 2 124 0
 901 0008 040091E5 		ldr	r0, [r1, #4]
 902              	.LVL86:
 903 000c 040084E5 		str	r0, [r4, #4]
 904              	.LBB355:
 126:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	blk = new Blk[cap];
 905              		.loc 2 126 0
 906 0010 000084E5 		str	r0, [r4]
 127:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 907              		.loc 2 127 0
 908 0014 2E0270E3 		cmn	r0, #-536870910
 909 0018 0D00008A 		bhi	.L73
 910 001c 0150A0E1 		mov	r5, r1
 127:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 911              		.loc 2 127 0 is_stmt 0 discriminator 1
 912 0020 0001A0E1 		lsl	r0, r0, #2
 913 0024 FEFFFFEB 		bl	_Znaj
 914              	.LVL87:
 915 0028 080084E5 		str	r0, [r4, #8]
 916              	.LVL88:
 130:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 917              		.loc 2 130 0 is_stmt 1 discriminator 1
 918 002c 0030A0E3 		mov	r3, #0
 919              	.LVL89:
 920              	.L74:
 130:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 921              		.loc 2 130 0 is_stmt 0 discriminator 3
 922 0030 042094E5 		ldr	r2, [r4, #4]
 923 0034 020053E1 		cmp	r3, r2
 924 0038 0600002A 		bcs	.L75
 131:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 925              		.loc 2 131 0 is_stmt 1 discriminator 2
 926 003c 082094E5 		ldr	r2, [r4, #8]
 927 0040 081095E5 		ldr	r1, [r5, #8]
 928 0044 031191E7 		ldr	r1, [r1, r3, lsl #2]
 929 0048 031182E7 		str	r1, [r2, r3, lsl #2]
 130:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 930              		.loc 2 130 0 discriminator 2
 931 004c 013083E2 		add	r3, r3, #1
 932              	.LVL90:
 933 0050 F6FFFFEA 		b	.L74
 934              	.LVL91:
 935              	.L73:
 127:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 936              		.loc 2 127 0 discriminator 2
 937 0054 FEFFFFEB 		bl	__cxa_throw_bad_array_new_length
 938              	.LVL92:
 939              	.L75:
 940              	.LBE355:
 941              	.LBE354:
 132:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 942              		.loc 2 132 0
 943 0058 0400A0E1 		mov	r0, r4
 944 005c 7080BDE8 		pop	{r4, r5, r6, pc}
 945              		.cfi_endproc
 946              	.LFE159:
 947              		.fnend
 949              		.weak	_ZN15NumberlikeArrayImEC1ERKS0_
 950              		.set	_ZN15NumberlikeArrayImEC1ERKS0_,_ZN15NumberlikeArrayImEC2ERKS0_
 951              		.section	.text._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE,"ax",%progbits
 952              		.align	2
 953              		.global	_ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE
 954              		.syntax unified
 955              		.arm
 956              		.fpu neon
 958              	_ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE:
 959              		.fnstart
 960              	.LFB108:
  32:../src/zxing_lib/bigint/BigInteger.cpp **** 	switch (s) {
 961              		.loc 1 32 0
 962              		.cfi_startproc
 963              		.cfi_personality 0,__gxx_personality_v0
 964              		.cfi_lsda 0,.LLSDA108
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              	.LVL93:
 968 0000 70402DE9 		push	{r4, r5, r6, lr}
 969              		.save {r4, r5, r6, lr}
 970              		.cfi_def_cfa_offset 16
 971              		.cfi_offset 4, -16
 972              		.cfi_offset 5, -12
 973              		.cfi_offset 6, -8
 974              		.cfi_offset 14, -4
 975 0004 0040A0E1 		mov	r4, r0
 976 0008 0250A0E1 		mov	r5, r2
 977              	.LVL94:
 978              	.LBB356:
 979              	.LBB357:
 980              	.LBB358:
  40:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 981              		.loc 3 40 0
 982 000c 040080E2 		add	r0, r0, #4
 983              	.LVL95:
 984              	.LEHB4:
 985 0010 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEC2ERKS0_
 986              	.LVL96:
 987              	.LEHE4:
 988              	.LBE358:
 989              	.LBE357:
  33:../src/zxing_lib/bigint/BigInteger.cpp **** 	case zero:
 990              		.loc 1 33 0
 991 0014 000055E3 		cmp	r5, #0
 992 0018 1100000A 		beq	.L79
 993 001c 010055E3 		cmp	r5, #1
 994 0020 1D00000A 		beq	.L80
 995 0024 010075E3 		cmn	r5, #1
 996 0028 1B00000A 		beq	.L80
  47:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 997              		.loc 1 47 0
 998 002c 0400A0E3 		mov	r0, #4
 999 0030 FEFFFFEB 		bl	__cxa_allocate_exception
 1000              	.LVL97:
 1001 0034 003000E3 		movw	r3, #:lower16:.LC4
 1002 0038 003040E3 		movt	r3, #:upper16:.LC4
 1003 003c 003080E5 		str	r3, [r0]
 1004 0040 0020A0E3 		mov	r2, #0
 1005 0044 001000E3 		movw	r1, #:lower16:_ZTIPKc
 1006 0048 001040E3 		movt	r1, #:upper16:_ZTIPKc
 1007              	.LEHB5:
 1008 004c FEFFFFEB 		bl	__cxa_throw
 1009              	.LVL98:
 1010              	.LEHE5:
 1011              	.L86:
 1012              	.LBB359:
 1013              	.LBB360:
 1014              	.LBB361:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1015              		.loc 2 51 0
 1016 0050 0C0094E5 		ldr	r0, [r4, #12]
 1017 0054 000050E3 		cmp	r0, #0
 1018 0058 0000000A 		beq	.L85
 1019 005c FEFFFFEB 		bl	_ZdaPv
 1020              	.LVL99:
 1021              	.L85:
 1022              	.LEHB6:
 1023 0060 FEFFFFEB 		bl	__cxa_end_cleanup
 1024              	.LVL100:
 1025              	.LEHE6:
 1026              	.L79:
 1027              	.LBE361:
 1028              	.LBE360:
 1029              	.LBE359:
 1030              	.LBB362:
 1031              	.LBB363:
 1032              	.LBB364:
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 1033              		.loc 2 75 0
 1034 0064 083094E5 		ldr	r3, [r4, #8]
 1035              	.LVL101:
 1036              	.LBE364:
 1037              	.LBE363:
 1038              	.LBE362:
  35:../src/zxing_lib/bigint/BigInteger.cpp **** 			throw "BigInteger::BigInteger(const BigUnsigned &, Sign): Cannot use a sign of zero with a nonze
 1039              		.loc 1 35 0
 1040 0068 000053E3 		cmp	r3, #0
  37:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 1041              		.loc 1 37 0
 1042 006c 0030A003 		moveq	r3, #0
 1043 0070 0030C405 		strbeq	r3, [r4]
  38:../src/zxing_lib/bigint/BigInteger.cpp **** 	case positive:
 1044              		.loc 1 38 0
 1045 0074 0C00000A 		beq	.L88
 1046              	.L90:
  36:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
 1047              		.loc 1 36 0
 1048 0078 0400A0E3 		mov	r0, #4
 1049 007c FEFFFFEB 		bl	__cxa_allocate_exception
 1050              	.LVL102:
 1051 0080 003000E3 		movw	r3, #:lower16:.LC3
 1052 0084 003040E3 		movt	r3, #:upper16:.LC3
 1053 0088 003080E5 		str	r3, [r0]
 1054 008c 0020A0E3 		mov	r2, #0
 1055 0090 001000E3 		movw	r1, #:lower16:_ZTIPKc
 1056 0094 001040E3 		movt	r1, #:upper16:_ZTIPKc
 1057              	.LEHB7:
 1058 0098 FEFFFFEB 		bl	__cxa_throw
 1059              	.LVL103:
 1060              	.LEHE7:
 1061              	.L80:
 1062              	.LBB365:
 1063              	.LBB366:
 1064              	.LBB367:
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 1065              		.loc 2 75 0
 1066 009c 083094E5 		ldr	r3, [r4, #8]
 1067              	.LVL104:
 1068              	.LBE367:
 1069              	.LBE366:
 1070              	.LBE365:
  42:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 1071              		.loc 1 42 0
 1072 00a0 000053E3 		cmp	r3, #0
 1073 00a4 0200000A 		beq	.L91
 1074              	.L83:
  42:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 1075              		.loc 1 42 0 is_stmt 0 discriminator 5
 1076 00a8 0050C4E5 		strb	r5, [r4]
 1077              	.L88:
 1078              	.LBE356:
  49:../src/zxing_lib/bigint/BigInteger.cpp **** 
 1079              		.loc 1 49 0 is_stmt 1
 1080 00ac 0400A0E1 		mov	r0, r4
 1081 00b0 7080BDE8 		pop	{r4, r5, r6, pc}
 1082              	.L91:
 1083              	.LBB368:
  42:../src/zxing_lib/bigint/BigInteger.cpp **** 		break;
 1084              		.loc 1 42 0
 1085 00b4 0050A0E3 		mov	r5, #0
 1086 00b8 FAFFFFEA 		b	.L83
 1087              	.LBE368:
 1088              		.cfi_endproc
 1089              	.LFE108:
 1090              		.personality	__gxx_personality_v0
 1091              		.handlerdata
 1092              	.LLSDA108:
 1093 0008 FF       		.byte	0xff
 1094 0009 FF       		.byte	0xff
 1095 000a 01       		.byte	0x1
 1096 000b 11       		.uleb128 .LLSDACSE108-.LLSDACSB108
 1097              	.LLSDACSB108:
 1098 000c 10       		.uleb128 .LEHB4-.LFB108
 1099 000d 04       		.uleb128 .LEHE4-.LEHB4
 1100 000e 00       		.uleb128 0
 1101 000f 00       		.uleb128 0
 1102 0010 4C       		.uleb128 .LEHB5-.LFB108
 1103 0011 04       		.uleb128 .LEHE5-.LEHB5
 1104 0012 50       		.uleb128 .L86-.LFB108
 1105 0013 00       		.uleb128 0
 1106 0014 60       		.uleb128 .LEHB6-.LFB108
 1107 0015 04       		.uleb128 .LEHE6-.LEHB6
 1108 0016 00       		.uleb128 0
 1109 0017 00       		.uleb128 0
 1110 0018 9801     		.uleb128 .LEHB7-.LFB108
 1111 001a 04       		.uleb128 .LEHE7-.LEHB7
 1112 001b 50       		.uleb128 .L86-.LFB108
 1113 001c 00       		.uleb128 0
 1114              	.LLSDACSE108:
 1115              		.section	.text._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE
 1116              		.fnend
 1118              		.global	_ZN10BigIntegerC1ERK11BigUnsignedNS_4SignE
 1119              		.set	_ZN10BigIntegerC1ERK11BigUnsignedNS_4SignE,_ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE
 1120              		.section	.text._ZNK15NumberlikeArrayImEeqERKS0_,"axG",%progbits,_ZNK15NumberlikeArrayImEeqERKS0_,c
 1121              		.align	2
 1122              		.weak	_ZNK15NumberlikeArrayImEeqERKS0_
 1123              		.syntax unified
 1124              		.arm
 1125              		.fpu neon
 1127              	_ZNK15NumberlikeArrayImEeqERKS0_:
 1128              		.fnstart
 1129              	.LFB163:
 160:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 161:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 162:../src/zxing_lib/bigint/NumberlikeArray.hh **** bool NumberlikeArray<Blk>::operator ==(const NumberlikeArray<Blk> &x) const {
 1130              		.loc 2 162 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              	.LVL105:
 1135 0000 04E02DE5 		str	lr, [sp, #-4]!
 1136              		.cfi_def_cfa_offset 4
 1137              		.cfi_offset 14, -4
 1138              	.LBB369:
 163:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	if (len != x.len)
 1139              		.loc 2 163 0
 1140 0004 04E090E5 		ldr	lr, [r0, #4]
 1141 0008 043091E5 		ldr	r3, [r1, #4]
 1142 000c 03005EE1 		cmp	lr, r3
 1143 0010 0100000A 		beq	.L99
 164:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Definitely unequal.
 165:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		return false;
 1144              		.loc 2 165 0
 1145 0014 0000A0E3 		mov	r0, #0
 1146              	.LVL106:
 1147 0018 04F09DE4 		ldr	pc, [sp], #4
 1148              	.LVL107:
 1149              	.L99:
 1150 001c 0030A0E3 		mov	r3, #0
 1151              	.L94:
 1152              	.LVL108:
 1153              	.LBB370:
 166:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	else {
 167:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Compare corresponding blocks one by one.
 168:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		Index i;
 169:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		for (i = 0; i < len; i++)
 1154              		.loc 2 169 0 discriminator 1
 1155 0020 0E0053E1 		cmp	r3, lr
 1156 0024 0700002A 		bcs	.L96
 170:../src/zxing_lib/bigint/NumberlikeArray.hh **** 			if (blk[i] != x.blk[i])
 1157              		.loc 2 170 0
 1158 0028 082090E5 		ldr	r2, [r0, #8]
 1159 002c 03C192E7 		ldr	ip, [r2, r3, lsl #2]
 1160 0030 082091E5 		ldr	r2, [r1, #8]
 1161 0034 032192E7 		ldr	r2, [r2, r3, lsl #2]
 1162 0038 02005CE1 		cmp	ip, r2
 1163 003c 0300001A 		bne	.L97
 169:../src/zxing_lib/bigint/NumberlikeArray.hh **** 			if (blk[i] != x.blk[i])
 1164              		.loc 2 169 0 discriminator 2
 1165 0040 013083E2 		add	r3, r3, #1
 1166              	.LVL109:
 1167 0044 F5FFFFEA 		b	.L94
 1168              	.L96:
 171:../src/zxing_lib/bigint/NumberlikeArray.hh **** 				return false;
 172:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// No blocks differed, so the objects are equal.
 173:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		return true;
 1169              		.loc 2 173 0
 1170 0048 0100A0E3 		mov	r0, #1
 1171              	.LVL110:
 1172 004c 04F09DE4 		ldr	pc, [sp], #4
 1173              	.LVL111:
 1174              	.L97:
 171:../src/zxing_lib/bigint/NumberlikeArray.hh **** 				return false;
 1175              		.loc 2 171 0
 1176 0050 0000A0E3 		mov	r0, #0
 1177              	.LVL112:
 1178              	.LBE370:
 1179              	.LBE369:
 174:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 175:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 1180              		.loc 2 175 0
 1181 0054 04F09DE4 		ldr	pc, [sp], #4
 1182              		.cfi_endproc
 1183              	.LFE163:
 1184              		.cantunwind
 1185              		.fnend
 1187              		.section	.text._ZN10BigIntegerppEv,"ax",%progbits
 1188              		.align	2
 1189              		.global	_ZN10BigIntegerppEv
 1190              		.syntax unified
 1191              		.arm
 1192              		.fpu neon
 1194              	_ZN10BigIntegerppEv:
 1195              		.fnstart
 1196              	.LFB145:
 153:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 154:../src/zxing_lib/bigint/BigInteger.cpp **** }
 155:../src/zxing_lib/bigint/BigInteger.cpp **** 
 156:../src/zxing_lib/bigint/BigInteger.cpp **** /* COPY-LESS OPERATIONS
 157:../src/zxing_lib/bigint/BigInteger.cpp ****  * These do some messing around to determine the sign of the result,
 158:../src/zxing_lib/bigint/BigInteger.cpp ****  * then call one of BigUnsigned's copy-less operations. */
 159:../src/zxing_lib/bigint/BigInteger.cpp **** 
 160:../src/zxing_lib/bigint/BigInteger.cpp **** // See remarks about aliased calls in BigUnsigned.cc .
 161:../src/zxing_lib/bigint/BigInteger.cpp **** #define DTRT_ALIASED(cond, op) \
 162:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (cond) { \
 163:../src/zxing_lib/bigint/BigInteger.cpp **** 		BigInteger tmpThis; \
 164:../src/zxing_lib/bigint/BigInteger.cpp **** 		tmpThis.op; \
 165:../src/zxing_lib/bigint/BigInteger.cpp **** 		*this = tmpThis; \
 166:../src/zxing_lib/bigint/BigInteger.cpp **** 		return; \
 167:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 168:../src/zxing_lib/bigint/BigInteger.cpp **** 
 169:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::add(const BigInteger &a, const BigInteger &b) {
 170:../src/zxing_lib/bigint/BigInteger.cpp **** 	DTRT_ALIASED(this == &a || this == &b, add(a, b));
 171:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one argument is zero, copy the other.
 172:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (a.sign == zero)
 173:../src/zxing_lib/bigint/BigInteger.cpp **** 		operator =(b);
 174:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (b.sign == zero)
 175:../src/zxing_lib/bigint/BigInteger.cpp **** 		operator =(a);
 176:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If the arguments have the same sign, take the
 177:../src/zxing_lib/bigint/BigInteger.cpp **** 	// common sign and add their magnitudes.
 178:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (a.sign == b.sign) {
 179:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = a.sign;
 180:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag.add(a.mag, b.mag);
 181:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 182:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Otherwise, their magnitudes must be compared.
 183:../src/zxing_lib/bigint/BigInteger.cpp **** 		switch (a.mag.compareTo(b.mag)) {
 184:../src/zxing_lib/bigint/BigInteger.cpp **** 		case equal:
 185:../src/zxing_lib/bigint/BigInteger.cpp **** 			// If their magnitudes are the same, copy zero.
 186:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag = 0;
 187:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 188:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 189:../src/zxing_lib/bigint/BigInteger.cpp **** 			// Otherwise, take the sign of the greater, and subtract
 190:../src/zxing_lib/bigint/BigInteger.cpp **** 			// the lesser magnitude from the greater magnitude.
 191:../src/zxing_lib/bigint/BigInteger.cpp **** 		case greater:
 192:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = a.sign;
 193:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(a.mag, b.mag);
 194:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 195:../src/zxing_lib/bigint/BigInteger.cpp **** 		case less:
 196:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = b.sign;
 197:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(b.mag, a.mag);
 198:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 199:../src/zxing_lib/bigint/BigInteger.cpp **** 		}
 200:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 201:../src/zxing_lib/bigint/BigInteger.cpp **** }
 202:../src/zxing_lib/bigint/BigInteger.cpp **** 
 203:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::subtract(const BigInteger &a, const BigInteger &b) {
 204:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Notice that this routine is identical to BigInteger::add,
 205:../src/zxing_lib/bigint/BigInteger.cpp **** 	// if one replaces b.sign by its opposite.
 206:../src/zxing_lib/bigint/BigInteger.cpp **** 	DTRT_ALIASED(this == &a || this == &b, subtract(a, b));
 207:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If a is zero, copy b and flip its sign.  If b is zero, copy a.
 208:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (a.sign == zero) {
 209:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag = b.mag;
 210:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Take the negative of _b_'s, sign, not ours.
 211:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Bug pointed out by Sam Larkin on 2005.03.30.
 212:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = Sign(-b.sign);
 213:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else if (b.sign == zero)
 214:../src/zxing_lib/bigint/BigInteger.cpp **** 		operator =(a);
 215:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If their signs differ, take a.sign and add the magnitudes.
 216:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (a.sign != b.sign) {
 217:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = a.sign;
 218:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag.add(a.mag, b.mag);
 219:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 220:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Otherwise, their magnitudes must be compared.
 221:../src/zxing_lib/bigint/BigInteger.cpp **** 		switch (a.mag.compareTo(b.mag)) {
 222:../src/zxing_lib/bigint/BigInteger.cpp **** 			// If their magnitudes are the same, copy zero.
 223:../src/zxing_lib/bigint/BigInteger.cpp **** 		case equal:
 224:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag = 0;
 225:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 226:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 227:../src/zxing_lib/bigint/BigInteger.cpp **** 			// If a's magnitude is greater, take a.sign and
 228:../src/zxing_lib/bigint/BigInteger.cpp **** 			// subtract a from b.
 229:../src/zxing_lib/bigint/BigInteger.cpp **** 		case greater:
 230:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = a.sign;
 231:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(a.mag, b.mag);
 232:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 233:../src/zxing_lib/bigint/BigInteger.cpp **** 			// If b's magnitude is greater, take the opposite
 234:../src/zxing_lib/bigint/BigInteger.cpp **** 			// of b.sign and subtract b from a.
 235:../src/zxing_lib/bigint/BigInteger.cpp **** 		case less:
 236:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = Sign(-b.sign);
 237:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(b.mag, a.mag);
 238:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 239:../src/zxing_lib/bigint/BigInteger.cpp **** 		}
 240:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 241:../src/zxing_lib/bigint/BigInteger.cpp **** }
 242:../src/zxing_lib/bigint/BigInteger.cpp **** 
 243:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::multiply(const BigInteger &a, const BigInteger &b) {
 244:../src/zxing_lib/bigint/BigInteger.cpp **** 	DTRT_ALIASED(this == &a || this == &b, multiply(a, b));
 245:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one object is zero, copy zero and return.
 246:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (a.sign == zero || b.sign == zero) {
 247:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
 248:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag = 0;
 249:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 250:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 251:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If the signs of the arguments are the same, the result
 252:../src/zxing_lib/bigint/BigInteger.cpp **** 	// is positive, otherwise it is negative.
 253:../src/zxing_lib/bigint/BigInteger.cpp **** 	sign = (a.sign == b.sign) ? positive : negative;
 254:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Multiply the magnitudes.
 255:../src/zxing_lib/bigint/BigInteger.cpp **** 	mag.multiply(a.mag, b.mag);
 256:../src/zxing_lib/bigint/BigInteger.cpp **** }
 257:../src/zxing_lib/bigint/BigInteger.cpp **** 
 258:../src/zxing_lib/bigint/BigInteger.cpp **** /*
 259:../src/zxing_lib/bigint/BigInteger.cpp ****  * DIVISION WITH REMAINDER
 260:../src/zxing_lib/bigint/BigInteger.cpp ****  * Please read the comments before the definition of
 261:../src/zxing_lib/bigint/BigInteger.cpp ****  * `BigUnsigned::divideWithRemainder' in `BigUnsigned.cc' for lots of
 262:../src/zxing_lib/bigint/BigInteger.cpp ****  * information you should know before reading this function.
 263:../src/zxing_lib/bigint/BigInteger.cpp ****  *
 264:../src/zxing_lib/bigint/BigInteger.cpp ****  * Following Knuth, I decree that x / y is to be
 265:../src/zxing_lib/bigint/BigInteger.cpp ****  * 0 if y==0 and floor(real-number x / y) if y!=0.
 266:../src/zxing_lib/bigint/BigInteger.cpp ****  * Then x % y shall be x - y*(integer x / y).
 267:../src/zxing_lib/bigint/BigInteger.cpp ****  *
 268:../src/zxing_lib/bigint/BigInteger.cpp ****  * Note that x = y * (x / y) + (x % y) always holds.
 269:../src/zxing_lib/bigint/BigInteger.cpp ****  * In addition, (x % y) is from 0 to y - 1 if y > 0,
 270:../src/zxing_lib/bigint/BigInteger.cpp ****  * and from -(|y| - 1) to 0 if y < 0.  (x % y) = x if y = 0.
 271:../src/zxing_lib/bigint/BigInteger.cpp ****  *
 272:../src/zxing_lib/bigint/BigInteger.cpp ****  * Examples: (q = a / b, r = a % b)
 273:../src/zxing_lib/bigint/BigInteger.cpp ****  *	a	b	q	r
 274:../src/zxing_lib/bigint/BigInteger.cpp ****  *	===	===	===	===
 275:../src/zxing_lib/bigint/BigInteger.cpp ****  *	4	3	1	1
 276:../src/zxing_lib/bigint/BigInteger.cpp ****  *	-4	3	-2	2
 277:../src/zxing_lib/bigint/BigInteger.cpp ****  *	4	-3	-2	-2
 278:../src/zxing_lib/bigint/BigInteger.cpp ****  *	-4	-3	1	-1
 279:../src/zxing_lib/bigint/BigInteger.cpp ****  */
 280:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::divideWithRemainder(const BigInteger &b, BigInteger &q) {
 281:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Defend against aliased calls;
 282:../src/zxing_lib/bigint/BigInteger.cpp **** 	// same idea as in BigUnsigned::divideWithRemainder .
 283:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (this == &q)
 284:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::divideWithRemainder: Cannot write quotient and remainder into the same variabl
 285:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (this == &b || &q == &b) {
 286:../src/zxing_lib/bigint/BigInteger.cpp **** 		BigInteger tmpB(b);
 287:../src/zxing_lib/bigint/BigInteger.cpp **** 		divideWithRemainder(tmpB, q);
 288:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 289:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 290:../src/zxing_lib/bigint/BigInteger.cpp **** 
 291:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Division by zero gives quotient 0 and remainder *this
 292:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (b.sign == zero) {
 293:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.mag = 0;
 294:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = zero;
 295:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 296:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 297:../src/zxing_lib/bigint/BigInteger.cpp **** 	// 0 / b gives quotient 0 and remainder 0
 298:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero) {
 299:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.mag = 0;
 300:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = zero;
 301:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 302:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 303:../src/zxing_lib/bigint/BigInteger.cpp **** 
 304:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Here *this != 0, b != 0.
 305:../src/zxing_lib/bigint/BigInteger.cpp **** 
 306:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Do the operands have the same sign?
 307:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == b.sign) {
 308:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Yes: easy case.  Quotient is zero or positive.
 309:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = positive;
 310:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 311:../src/zxing_lib/bigint/BigInteger.cpp **** 		// No: harder case.  Quotient is negative.
 312:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = negative;
 313:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Decrease the magnitude of the dividend by one.
 314:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag--;
 315:../src/zxing_lib/bigint/BigInteger.cpp **** 		/*
 316:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * We tinker with the dividend before and with the
 317:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * quotient and remainder after so that the result
 318:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * comes out right.  To see why it works, consider the following
 319:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * list of examples, where A is the magnitude-decreased
 320:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * a, Q and R are the results of BigUnsigned division
 321:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * with remainder on A and |b|, and q and r are the
 322:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * final results we want:
 323:../src/zxing_lib/bigint/BigInteger.cpp **** 		 *
 324:../src/zxing_lib/bigint/BigInteger.cpp **** 		 *	a	A	b	Q	R	q	r
 325:../src/zxing_lib/bigint/BigInteger.cpp **** 		 *	-3	-2	3	0	2	-1	0
 326:../src/zxing_lib/bigint/BigInteger.cpp **** 		 *	-4	-3	3	1	0	-2	2
 327:../src/zxing_lib/bigint/BigInteger.cpp **** 		 *	-5	-4	3	1	1	-2	1
 328:../src/zxing_lib/bigint/BigInteger.cpp **** 		 *	-6	-5	3	1	2	-2	0
 329:../src/zxing_lib/bigint/BigInteger.cpp **** 		 *
 330:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * It appears that we need a total of 3 corrections:
 331:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * Decrease the magnitude of a to get A.  Increase the
 332:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * magnitude of Q to get q (and make it negative).
 333:../src/zxing_lib/bigint/BigInteger.cpp **** 		 * Find r = (b - 1) - R and give it the desired sign.
 334:../src/zxing_lib/bigint/BigInteger.cpp **** 		 */
 335:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 336:../src/zxing_lib/bigint/BigInteger.cpp **** 
 337:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Divide the magnitudes.
 338:../src/zxing_lib/bigint/BigInteger.cpp **** 	mag.divideWithRemainder(b.mag, q.mag);
 339:../src/zxing_lib/bigint/BigInteger.cpp **** 
 340:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign != b.sign) {
 341:../src/zxing_lib/bigint/BigInteger.cpp **** 		// More for the harder case (as described):
 342:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Increase the magnitude of the quotient by one.
 343:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.mag++;
 344:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Modify the remainder.
 345:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag.subtract(b.mag, mag);
 346:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag--;
 347:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 348:../src/zxing_lib/bigint/BigInteger.cpp **** 
 349:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Sign of the remainder is always the sign of the divisor b.
 350:../src/zxing_lib/bigint/BigInteger.cpp **** 	sign = b.sign;
 351:../src/zxing_lib/bigint/BigInteger.cpp **** 
 352:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Set signs to zero as necessary.  (Thanks David Allen!)
 353:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (mag.isZero())
 354:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
 355:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (q.mag.isZero())
 356:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = zero;
 357:../src/zxing_lib/bigint/BigInteger.cpp **** 
 358:../src/zxing_lib/bigint/BigInteger.cpp **** 	// WHEW!!!
 359:../src/zxing_lib/bigint/BigInteger.cpp **** }
 360:../src/zxing_lib/bigint/BigInteger.cpp **** 
 361:../src/zxing_lib/bigint/BigInteger.cpp **** // Negation
 362:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::negate(const BigInteger &a) {
 363:../src/zxing_lib/bigint/BigInteger.cpp **** 	DTRT_ALIASED(this == &a, negate(a));
 364:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy a's magnitude
 365:../src/zxing_lib/bigint/BigInteger.cpp **** 	mag = a.mag;
 366:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy the opposite of a.sign
 367:../src/zxing_lib/bigint/BigInteger.cpp **** 	sign = Sign(-a.sign);
 368:../src/zxing_lib/bigint/BigInteger.cpp **** }
 369:../src/zxing_lib/bigint/BigInteger.cpp **** 
 370:../src/zxing_lib/bigint/BigInteger.cpp **** // INCREMENT/DECREMENT OPERATORS
 371:../src/zxing_lib/bigint/BigInteger.cpp **** 
 372:../src/zxing_lib/bigint/BigInteger.cpp **** // Prefix increment
 373:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::operator ++() {
 1197              		.loc 1 373 0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 16
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201              	.LVL113:
 1202 0000 30402DE9 		push	{r4, r5, lr}
 1203              		.save {r4, r5, lr}
 1204              		.cfi_def_cfa_offset 12
 1205              		.cfi_offset 4, -12
 1206              		.cfi_offset 5, -8
 1207              		.cfi_offset 14, -4
 1208              		.pad #20
 1209 0004 14D04DE2 		sub	sp, sp, #20
 1210              		.cfi_def_cfa_offset 32
 1211 0008 0040A0E1 		mov	r4, r0
 374:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == negative) {
 1212              		.loc 1 374 0
 1213 000c D030D0E1 		ldrsb	r3, [r0]
 1214 0010 010073E3 		cmn	r3, #1
 1215 0014 0600000A 		beq	.L105
 375:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag--;
 376:../src/zxing_lib/bigint/BigInteger.cpp **** 		if (mag == 0)
 377:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 378:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 379:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag++;
 1216              		.loc 1 379 0
 1217 0018 0010A0E3 		mov	r1, #0
 1218 001c 040080E2 		add	r0, r0, #4
 1219              	.LVL114:
 1220 0020 FEFFFFEB 		bl	_ZN11BigUnsignedppEi
 1221              	.LVL115:
 380:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = positive; // if not already
 1222              		.loc 1 380 0
 1223 0024 0130A0E3 		mov	r3, #1
 1224 0028 0030C4E5 		strb	r3, [r4]
 1225              	.L100:
 381:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 382:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1226              		.loc 1 382 0
 1227 002c 14D08DE2 		add	sp, sp, #20
 1228              		.cfi_remember_state
 1229              		.cfi_def_cfa_offset 12
 1230              		@ sp needed
 1231 0030 3080BDE8 		pop	{r4, r5, pc}
 1232              	.LVL116:
 1233              	.L105:
 1234              		.cfi_restore_state
 375:../src/zxing_lib/bigint/BigInteger.cpp **** 		if (mag == 0)
 1235              		.loc 1 375 0
 1236 0034 045080E2 		add	r5, r0, #4
 1237 0038 0010A0E3 		mov	r1, #0
 1238 003c 0500A0E1 		mov	r0, r5
 1239              	.LVL117:
 1240 0040 FEFFFFEB 		bl	_ZN11BigUnsignedmmEi
 1241              	.LVL118:
 376:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 1242              		.loc 1 376 0
 1243 0044 0010A0E3 		mov	r1, #0
 1244 0048 04008DE2 		add	r0, sp, #4
 1245 004c FEFFFFEB 		bl	_ZN11BigUnsignedC1Ei
 1246              	.LVL119:
 1247              	.LBB371:
 1248              	.LBB372:
  49:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Eliminate any leading zeros we may have been passed.
  50:../src/zxing_lib/bigint/BigUnsigned.hh **** 		zapLeadingZeros();
  51:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
  52:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  53:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Destructor.  NumberlikeArray does the delete for us.
  54:../src/zxing_lib/bigint/BigUnsigned.hh **** 	~BigUnsigned() {}
  55:../src/zxing_lib/bigint/BigUnsigned.hh **** 	
  56:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Constructors from primitive integer types
  57:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(unsigned long  x);
  58:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(         long  x);
  59:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(unsigned int   x);
  60:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(         int   x);
  61:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(unsigned short x);
  62:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(         short x);
  63:../src/zxing_lib/bigint/BigUnsigned.hh **** protected:
  64:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Helpers
  65:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> void initFromPrimitive      (X x);
  66:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> void initFromSignedPrimitive(X x);
  67:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  68:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  69:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Converters to primitive integer types
  70:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * The implicit conversion operators caused trouble, so these are now
  71:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * named. */
  72:../src/zxing_lib/bigint/BigUnsigned.hh **** 	unsigned long  toUnsignedLong () const;
  73:../src/zxing_lib/bigint/BigUnsigned.hh **** 	long           toLong         () const;
  74:../src/zxing_lib/bigint/BigUnsigned.hh **** 	unsigned int   toUnsignedInt  () const;
  75:../src/zxing_lib/bigint/BigUnsigned.hh **** 	int            toInt          () const;
  76:../src/zxing_lib/bigint/BigUnsigned.hh **** 	unsigned short toUnsignedShort() const;
  77:../src/zxing_lib/bigint/BigUnsigned.hh **** 	short          toShort        () const;
  78:../src/zxing_lib/bigint/BigUnsigned.hh **** protected:
  79:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Helpers
  80:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> X convertToSignedPrimitive() const;
  81:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> X convertToPrimitive      () const;
  82:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  83:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  84:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// BIT/BLOCK ACCESSORS
  85:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  86:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Expose these from NumberlikeArray directly.
  87:../src/zxing_lib/bigint/BigUnsigned.hh **** 	using NumberlikeArray<Blk>::getCapacity;
  88:../src/zxing_lib/bigint/BigUnsigned.hh **** 	using NumberlikeArray<Blk>::getLength;
  89:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  90:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Returns the requested block, or 0 if it is beyond the length (as if
  91:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * the number had 0s infinitely to the left). */
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	Blk getBlock(Index i) const { return i >= len ? 0 : blk[i]; }
  93:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
  94:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void setBlock(Index i, Blk newBlock);
  95:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  96:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// The number is zero if and only if the canonical length is zero.
  97:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool isZero() const { return NumberlikeArray<Blk>::isEmpty(); }
  98:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  99:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Returns the length of the number in bits, i.e., zero if the number
 100:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * is zero and otherwise one more than the largest value of bi for
 101:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * which getBit(bi) returns true. */
 102:../src/zxing_lib/bigint/BigUnsigned.hh **** 	Index bitLength() const;
 103:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Get the state of bit bi, which has value 2^bi.  Bits beyond the
 104:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * number's length are considered to be 0. */
 105:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool getBit(Index bi) const {
 106:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return (getBlock(bi / N) & (Blk(1) << (bi % N))) != 0;
 107:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 108:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the state of bit bi to newBit.  The number grows or shrinks as
 109:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * necessary. */
 110:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void setBit(Index bi, bool newBit);
 111:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 112:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// COMPARISONS
 113:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 114:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Compares this to x like Perl's <=>
 115:../src/zxing_lib/bigint/BigUnsigned.hh **** 	CmpRes compareTo(const BigUnsigned &x) const;
 116:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 117:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Ordinary comparison operators
 118:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator ==(const BigUnsigned &x) const {
 119:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return NumberlikeArray<Blk>::operator ==(x);
 1249              		.loc 3 119 0
 1250 0050 04108DE2 		add	r1, sp, #4
 1251              	.LVL120:
 1252 0054 0500A0E1 		mov	r0, r5
 1253 0058 FEFFFFEB 		bl	_ZNK15NumberlikeArrayImEeqERKS0_
 1254              	.LVL121:
 1255 005c 0050A0E1 		mov	r5, r0
 1256              	.LVL122:
 1257              	.LBE372:
 1258              	.LBE371:
 1259              	.LBB373:
 1260              	.LBB374:
 1261              	.LBB375:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1262              		.loc 2 51 0
 1263 0060 0C009DE5 		ldr	r0, [sp, #12]
 1264 0064 000050E3 		cmp	r0, #0
 1265 0068 0000000A 		beq	.L102
 1266 006c FEFFFFEB 		bl	_ZdaPv
 1267              	.LVL123:
 1268              	.L102:
 1269              	.LBE375:
 1270              	.LBE374:
 1271              	.LBE373:
 376:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 1272              		.loc 1 376 0
 1273 0070 000055E3 		cmp	r5, #0
 377:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 1274              		.loc 1 377 0
 1275 0074 0030A013 		movne	r3, #0
 1276 0078 0030C415 		strbne	r3, [r4]
 1277 007c EAFFFFEA 		b	.L100
 1278              		.cfi_endproc
 1279              	.LFE145:
 1280              		.fnend
 1282              		.section	.text._ZN10BigIntegerppEi,"ax",%progbits
 1283              		.align	2
 1284              		.global	_ZN10BigIntegerppEi
 1285              		.syntax unified
 1286              		.arm
 1287              		.fpu neon
 1289              	_ZN10BigIntegerppEi:
 1290              		.fnstart
 1291              	.LFB146:
 383:../src/zxing_lib/bigint/BigInteger.cpp **** 
 384:../src/zxing_lib/bigint/BigInteger.cpp **** // Postfix increment: same as prefix
 385:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::operator ++(int) {
 1292              		.loc 1 385 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 1296              	.LVL124:
 1297 0000 10402DE9 		push	{r4, lr}
 1298              		.save {r4, lr}
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 4, -8
 1301              		.cfi_offset 14, -4
 386:../src/zxing_lib/bigint/BigInteger.cpp **** 	operator ++();
 1302              		.loc 1 386 0
 1303 0004 FEFFFFEB 		bl	_ZN10BigIntegerppEv
 1304              	.LVL125:
 1305 0008 1080BDE8 		pop	{r4, pc}
 1306              		.cfi_endproc
 1307              	.LFE146:
 1308              		.fnend
 1310              		.section	.text._ZN10BigIntegermmEv,"ax",%progbits
 1311              		.align	2
 1312              		.global	_ZN10BigIntegermmEv
 1313              		.syntax unified
 1314              		.arm
 1315              		.fpu neon
 1317              	_ZN10BigIntegermmEv:
 1318              		.fnstart
 1319              	.LFB147:
 387:../src/zxing_lib/bigint/BigInteger.cpp **** }
 388:../src/zxing_lib/bigint/BigInteger.cpp **** 
 389:../src/zxing_lib/bigint/BigInteger.cpp **** // Prefix decrement
 390:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::operator --() {
 1320              		.loc 1 390 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 16
 1323              		@ frame_needed = 0, uses_anonymous_args = 0
 1324              	.LVL126:
 1325 0000 30402DE9 		push	{r4, r5, lr}
 1326              		.save {r4, r5, lr}
 1327              		.cfi_def_cfa_offset 12
 1328              		.cfi_offset 4, -12
 1329              		.cfi_offset 5, -8
 1330              		.cfi_offset 14, -4
 1331              		.pad #20
 1332 0004 14D04DE2 		sub	sp, sp, #20
 1333              		.cfi_def_cfa_offset 32
 1334 0008 0040A0E1 		mov	r4, r0
 391:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == positive) {
 1335              		.loc 1 391 0
 1336 000c D030D0E1 		ldrsb	r3, [r0]
 1337 0010 010053E3 		cmp	r3, #1
 1338 0014 0600000A 		beq	.L113
 392:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag--;
 393:../src/zxing_lib/bigint/BigInteger.cpp **** 		if (mag == 0)
 394:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 395:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 396:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag++;
 1339              		.loc 1 396 0
 1340 0018 0010A0E3 		mov	r1, #0
 1341 001c 040080E2 		add	r0, r0, #4
 1342              	.LVL127:
 1343 0020 FEFFFFEB 		bl	_ZN11BigUnsignedppEi
 1344              	.LVL128:
 397:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = negative;
 1345              		.loc 1 397 0
 1346 0024 0030E0E3 		mvn	r3, #0
 1347 0028 0030C4E5 		strb	r3, [r4]
 1348              	.L108:
 398:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 399:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1349              		.loc 1 399 0
 1350 002c 14D08DE2 		add	sp, sp, #20
 1351              		.cfi_remember_state
 1352              		.cfi_def_cfa_offset 12
 1353              		@ sp needed
 1354 0030 3080BDE8 		pop	{r4, r5, pc}
 1355              	.LVL129:
 1356              	.L113:
 1357              		.cfi_restore_state
 392:../src/zxing_lib/bigint/BigInteger.cpp **** 		if (mag == 0)
 1358              		.loc 1 392 0
 1359 0034 045080E2 		add	r5, r0, #4
 1360 0038 0010A0E3 		mov	r1, #0
 1361 003c 0500A0E1 		mov	r0, r5
 1362              	.LVL130:
 1363 0040 FEFFFFEB 		bl	_ZN11BigUnsignedmmEi
 1364              	.LVL131:
 393:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 1365              		.loc 1 393 0
 1366 0044 0010A0E3 		mov	r1, #0
 1367 0048 04008DE2 		add	r0, sp, #4
 1368 004c FEFFFFEB 		bl	_ZN11BigUnsignedC1Ei
 1369              	.LVL132:
 1370              	.LBB376:
 1371              	.LBB377:
 1372              		.loc 3 119 0
 1373 0050 04108DE2 		add	r1, sp, #4
 1374              	.LVL133:
 1375 0054 0500A0E1 		mov	r0, r5
 1376 0058 FEFFFFEB 		bl	_ZNK15NumberlikeArrayImEeqERKS0_
 1377              	.LVL134:
 1378 005c 0050A0E1 		mov	r5, r0
 1379              	.LVL135:
 1380              	.LBE377:
 1381              	.LBE376:
 1382              	.LBB378:
 1383              	.LBB379:
 1384              	.LBB380:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1385              		.loc 2 51 0
 1386 0060 0C009DE5 		ldr	r0, [sp, #12]
 1387 0064 000050E3 		cmp	r0, #0
 1388 0068 0000000A 		beq	.L110
 1389 006c FEFFFFEB 		bl	_ZdaPv
 1390              	.LVL136:
 1391              	.L110:
 1392              	.LBE380:
 1393              	.LBE379:
 1394              	.LBE378:
 393:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 1395              		.loc 1 393 0
 1396 0070 000055E3 		cmp	r5, #0
 394:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 1397              		.loc 1 394 0
 1398 0074 0030A013 		movne	r3, #0
 1399 0078 0030C415 		strbne	r3, [r4]
 1400 007c EAFFFFEA 		b	.L108
 1401              		.cfi_endproc
 1402              	.LFE147:
 1403              		.fnend
 1405              		.section	.text._ZN10BigIntegermmEi,"ax",%progbits
 1406              		.align	2
 1407              		.global	_ZN10BigIntegermmEi
 1408              		.syntax unified
 1409              		.arm
 1410              		.fpu neon
 1412              	_ZN10BigIntegermmEi:
 1413              		.fnstart
 1414              	.LFB148:
 400:../src/zxing_lib/bigint/BigInteger.cpp **** 
 401:../src/zxing_lib/bigint/BigInteger.cpp **** // Postfix decrement: same as prefix
 402:../src/zxing_lib/bigint/BigInteger.cpp **** void BigInteger::operator --(int) {
 1415              		.loc 1 402 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              	.LVL137:
 1420 0000 10402DE9 		push	{r4, lr}
 1421              		.save {r4, lr}
 1422              		.cfi_def_cfa_offset 8
 1423              		.cfi_offset 4, -8
 1424              		.cfi_offset 14, -4
 403:../src/zxing_lib/bigint/BigInteger.cpp **** 	operator --();
 1425              		.loc 1 403 0
 1426 0004 FEFFFFEB 		bl	_ZN10BigIntegermmEv
 1427              	.LVL138:
 1428 0008 1080BDE8 		pop	{r4, pc}
 1429              		.cfi_endproc
 1430              	.LFE148:
 1431              		.fnend
 1433              		.section	.text._ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v,"axG",%progbits,_ZNK10BigInteger
 1434              		.align	2
 1435              		.weak	_ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v
 1436              		.syntax unified
 1437              		.arm
 1438              		.fpu neon
 1440              	_ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v:
 1441              		.fnstart
 1442              	.LFB176:
 104:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero)
 1443              		.loc 1 104 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447              	.LVL139:
 1448              	.LBB381:
 105:../src/zxing_lib/bigint/BigInteger.cpp **** 		return 0;
 1449              		.loc 1 105 0
 1450 0000 D030D0E1 		ldrsb	r3, [r0]
 1451 0004 000053E3 		cmp	r3, #0
 1452 0008 1B00000A 		beq	.L121
 1453              	.LVL140:
 1454              	.LBB382:
 1455              	.LBB383:
 1456              	.LBB384:
  73:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Blk   getBlock(Index i) const { return blk[i];   }
 1457              		.loc 2 73 0
 1458 000c 082090E5 		ldr	r2, [r0, #8]
 1459              	.LVL141:
 1460              	.LBE384:
 1461              	.LBE383:
 107:../src/zxing_lib/bigint/BigInteger.cpp **** 		// The single block might fit in an X.  Try the conversion.
 1462              		.loc 1 107 0
 1463 0010 010052E3 		cmp	r2, #1
 1464 0014 0E00001A 		bne	.L118
 1465              	.LVL142:
 1466              	.LBB385:
 1467              	.LBB386:
 1468              	.LBB387:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1469              		.loc 3 92 0
 1470 0018 000052E3 		cmp	r2, #0
 1471 001c 0700000A 		beq	.L122
 1472 0020 0C2090E5 		ldr	r2, [r0, #12]
 1473 0024 002092E5 		ldr	r2, [r2]
 1474              	.L119:
 1475              	.LVL143:
 1476              	.LBE387:
 1477              	.LBE386:
 1478              	.LBB389:
 110:../src/zxing_lib/bigint/BigInteger.cpp **** 			X x = X(b);
 1479              		.loc 1 110 0
 1480 0028 010053E3 		cmp	r3, #1
 1481 002c 0500000A 		beq	.L125
 1482              	.LBB390:
 115:../src/zxing_lib/bigint/BigInteger.cpp **** 			/* UX(...) needed to avoid rejecting conversion of
 1483              		.loc 1 115 0
 1484 0030 000062E2 		rsb	r0, r2, #0
 1485              	.LVL144:
 118:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1486              		.loc 1 118 0
 1487 0034 000050E3 		cmp	r0, #0
 1488 0038 050000AA 		bge	.L118
 1489              	.LVL145:
 1490              	.L116:
 1491              	.LBE390:
 1492              	.LBE389:
 1493              	.LBE385:
 1494              	.LBE382:
 1495              	.LBE381:
 125:../src/zxing_lib/bigint/BigInteger.cpp **** 
 1496              		.loc 1 125 0
 1497 003c 1EFF2FE1 		bx	lr
 1498              	.LVL146:
 1499              	.L122:
 1500              	.LBB396:
 1501              	.LBB395:
 1502              	.LBB394:
 1503              	.LBB392:
 1504              	.LBB388:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1505              		.loc 3 92 0
 1506 0040 0020A0E3 		mov	r2, #0
 1507 0044 F7FFFFEA 		b	.L119
 1508              	.LVL147:
 1509              	.L125:
 1510              	.LBE388:
 1511              	.LBE392:
 1512              	.LBB393:
 1513              	.LBB391:
 111:../src/zxing_lib/bigint/BigInteger.cpp **** 			if (x >= 0 && Blk(x) == b)
 1514              		.loc 1 111 0
 1515 0048 0200A0E1 		mov	r0, r2
 1516              	.LVL148:
 112:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1517              		.loc 1 112 0
 1518 004c 000052E3 		cmp	r2, #0
 1519 0050 F9FFFFAA 		bge	.L116
 1520              	.LVL149:
 1521              	.L118:
 1522              	.LBE391:
 1523              	.LBE393:
 1524              	.LBE394:
 1525              	.LBE395:
 1526              	.LBE396:
 104:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero)
 1527              		.loc 1 104 0
 1528 0054 10402DE9 		push	{r4, lr}
 1529              		.save {r4, lr}
 1530              		.cfi_def_cfa_offset 8
 1531              		.cfi_offset 4, -8
 1532              		.cfi_offset 14, -4
 124:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1533              		.loc 1 124 0
 1534 0058 0400A0E3 		mov	r0, #4
 1535 005c FEFFFFEB 		bl	__cxa_allocate_exception
 1536              	.LVL150:
 123:../src/zxing_lib/bigint/BigInteger.cpp **** 		"Value is too big to fit in the requested type";
 1537              		.loc 1 123 0
 1538 0060 003000E3 		movw	r3, #:lower16:.LC5
 1539 0064 003040E3 		movt	r3, #:upper16:.LC5
 1540 0068 003080E5 		str	r3, [r0]
 124:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1541              		.loc 1 124 0
 1542 006c 0020A0E3 		mov	r2, #0
 1543 0070 001000E3 		movw	r1, #:lower16:_ZTIPKc
 1544 0074 001040E3 		movt	r1, #:upper16:_ZTIPKc
 1545 0078 FEFFFFEB 		bl	__cxa_throw
 1546              	.LVL151:
 1547              	.L121:
 1548              		.cfi_def_cfa_offset 0
 1549              		.cfi_restore 4
 1550              		.cfi_restore 14
 1551              	.LBB397:
 106:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (mag.getLength() == 1) {
 1552              		.loc 1 106 0
 1553 007c 0000A0E3 		mov	r0, #0
 1554              	.LVL152:
 1555 0080 EDFFFFEA 		b	.L116
 1556              	.LBE397:
 1557              		.cfi_endproc
 1558              	.LFE176:
 1559              		.fnend
 1561              		.section	.text._ZNK10BigInteger6toLongEv,"ax",%progbits
 1562              		.align	2
 1563              		.global	_ZNK10BigInteger6toLongEv
 1564              		.syntax unified
 1565              		.arm
 1566              		.fpu neon
 1568              	_ZNK10BigInteger6toLongEv:
 1569              		.fnstart
 1570              	.LFB136:
 130:../src/zxing_lib/bigint/BigInteger.cpp **** int            BigInteger::toInt          () const { return convertToSignedPrimitive  <int  , unsig
 1571              		.loc 1 130 0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 0
 1574              		@ frame_needed = 0, uses_anonymous_args = 0
 1575              	.LVL153:
 1576 0000 10402DE9 		push	{r4, lr}
 1577              		.save {r4, lr}
 1578              		.cfi_def_cfa_offset 8
 1579              		.cfi_offset 4, -8
 1580              		.cfi_offset 14, -4
 130:../src/zxing_lib/bigint/BigInteger.cpp **** int            BigInteger::toInt          () const { return convertToSignedPrimitive  <int  , unsig
 1581              		.loc 1 130 0
 1582 0004 FEFFFFEB 		bl	_ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v
 1583              	.LVL154:
 1584 0008 1080BDE8 		pop	{r4, pc}
 1585              		.cfi_endproc
 1586              	.LFE136:
 1587              		.fnend
 1589              		.section	.text._ZNK10BigInteger24convertToSignedPrimitiveIijEET_v,"axG",%progbits,_ZNK10BigInteger
 1590              		.align	2
 1591              		.weak	_ZNK10BigInteger24convertToSignedPrimitiveIijEET_v
 1592              		.syntax unified
 1593              		.arm
 1594              		.fpu neon
 1596              	_ZNK10BigInteger24convertToSignedPrimitiveIijEET_v:
 1597              		.fnstart
 1598              	.LFB177:
 104:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero)
 1599              		.loc 1 104 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603              	.LVL155:
 1604              	.LBB398:
 105:../src/zxing_lib/bigint/BigInteger.cpp **** 		return 0;
 1605              		.loc 1 105 0
 1606 0000 D030D0E1 		ldrsb	r3, [r0]
 1607 0004 000053E3 		cmp	r3, #0
 1608 0008 1B00000A 		beq	.L133
 1609              	.LVL156:
 1610              	.LBB399:
 1611              	.LBB400:
 1612              	.LBB401:
  73:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Blk   getBlock(Index i) const { return blk[i];   }
 1613              		.loc 2 73 0
 1614 000c 082090E5 		ldr	r2, [r0, #8]
 1615              	.LVL157:
 1616              	.LBE401:
 1617              	.LBE400:
 107:../src/zxing_lib/bigint/BigInteger.cpp **** 		// The single block might fit in an X.  Try the conversion.
 1618              		.loc 1 107 0
 1619 0010 010052E3 		cmp	r2, #1
 1620 0014 0E00001A 		bne	.L130
 1621              	.LVL158:
 1622              	.LBB402:
 1623              	.LBB403:
 1624              	.LBB404:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1625              		.loc 3 92 0
 1626 0018 000052E3 		cmp	r2, #0
 1627 001c 0700000A 		beq	.L134
 1628 0020 0C2090E5 		ldr	r2, [r0, #12]
 1629 0024 002092E5 		ldr	r2, [r2]
 1630              	.L131:
 1631              	.LVL159:
 1632              	.LBE404:
 1633              	.LBE403:
 1634              	.LBB406:
 110:../src/zxing_lib/bigint/BigInteger.cpp **** 			X x = X(b);
 1635              		.loc 1 110 0
 1636 0028 010053E3 		cmp	r3, #1
 1637 002c 0500000A 		beq	.L137
 1638              	.LBB407:
 115:../src/zxing_lib/bigint/BigInteger.cpp **** 			/* UX(...) needed to avoid rejecting conversion of
 1639              		.loc 1 115 0
 1640 0030 000062E2 		rsb	r0, r2, #0
 1641              	.LVL160:
 118:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1642              		.loc 1 118 0
 1643 0034 000050E3 		cmp	r0, #0
 1644 0038 050000AA 		bge	.L130
 1645              	.LVL161:
 1646              	.L128:
 1647              	.LBE407:
 1648              	.LBE406:
 1649              	.LBE402:
 1650              	.LBE399:
 1651              	.LBE398:
 125:../src/zxing_lib/bigint/BigInteger.cpp **** 
 1652              		.loc 1 125 0
 1653 003c 1EFF2FE1 		bx	lr
 1654              	.LVL162:
 1655              	.L134:
 1656              	.LBB413:
 1657              	.LBB412:
 1658              	.LBB411:
 1659              	.LBB409:
 1660              	.LBB405:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1661              		.loc 3 92 0
 1662 0040 0020A0E3 		mov	r2, #0
 1663 0044 F7FFFFEA 		b	.L131
 1664              	.LVL163:
 1665              	.L137:
 1666              	.LBE405:
 1667              	.LBE409:
 1668              	.LBB410:
 1669              	.LBB408:
 111:../src/zxing_lib/bigint/BigInteger.cpp **** 			if (x >= 0 && Blk(x) == b)
 1670              		.loc 1 111 0
 1671 0048 0200A0E1 		mov	r0, r2
 1672              	.LVL164:
 112:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1673              		.loc 1 112 0
 1674 004c 000052E3 		cmp	r2, #0
 1675 0050 F9FFFFAA 		bge	.L128
 1676              	.LVL165:
 1677              	.L130:
 1678              	.LBE408:
 1679              	.LBE410:
 1680              	.LBE411:
 1681              	.LBE412:
 1682              	.LBE413:
 104:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero)
 1683              		.loc 1 104 0
 1684 0054 10402DE9 		push	{r4, lr}
 1685              		.save {r4, lr}
 1686              		.cfi_def_cfa_offset 8
 1687              		.cfi_offset 4, -8
 1688              		.cfi_offset 14, -4
 124:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1689              		.loc 1 124 0
 1690 0058 0400A0E3 		mov	r0, #4
 1691 005c FEFFFFEB 		bl	__cxa_allocate_exception
 1692              	.LVL166:
 123:../src/zxing_lib/bigint/BigInteger.cpp **** 		"Value is too big to fit in the requested type";
 1693              		.loc 1 123 0
 1694 0060 003000E3 		movw	r3, #:lower16:.LC5
 1695 0064 003040E3 		movt	r3, #:upper16:.LC5
 1696 0068 003080E5 		str	r3, [r0]
 124:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1697              		.loc 1 124 0
 1698 006c 0020A0E3 		mov	r2, #0
 1699 0070 001000E3 		movw	r1, #:lower16:_ZTIPKc
 1700 0074 001040E3 		movt	r1, #:upper16:_ZTIPKc
 1701 0078 FEFFFFEB 		bl	__cxa_throw
 1702              	.LVL167:
 1703              	.L133:
 1704              		.cfi_def_cfa_offset 0
 1705              		.cfi_restore 4
 1706              		.cfi_restore 14
 1707              	.LBB414:
 106:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (mag.getLength() == 1) {
 1708              		.loc 1 106 0
 1709 007c 0000A0E3 		mov	r0, #0
 1710              	.LVL168:
 1711 0080 EDFFFFEA 		b	.L128
 1712              	.LBE414:
 1713              		.cfi_endproc
 1714              	.LFE177:
 1715              		.fnend
 1717              		.section	.text._ZNK10BigInteger5toIntEv,"ax",%progbits
 1718              		.align	2
 1719              		.global	_ZNK10BigInteger5toIntEv
 1720              		.syntax unified
 1721              		.arm
 1722              		.fpu neon
 1724              	_ZNK10BigInteger5toIntEv:
 1725              		.fnstart
 1726              	.LFB137:
 131:../src/zxing_lib/bigint/BigInteger.cpp **** short          BigInteger::toShort        () const { return convertToSignedPrimitive  <short, unsig
 1727              		.loc 1 131 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              	.LVL169:
 1732 0000 10402DE9 		push	{r4, lr}
 1733              		.save {r4, lr}
 1734              		.cfi_def_cfa_offset 8
 1735              		.cfi_offset 4, -8
 1736              		.cfi_offset 14, -4
 131:../src/zxing_lib/bigint/BigInteger.cpp **** short          BigInteger::toShort        () const { return convertToSignedPrimitive  <short, unsig
 1737              		.loc 1 131 0
 1738 0004 FEFFFFEB 		bl	_ZNK10BigInteger24convertToSignedPrimitiveIijEET_v
 1739              	.LVL170:
 1740 0008 1080BDE8 		pop	{r4, pc}
 1741              		.cfi_endproc
 1742              	.LFE137:
 1743              		.fnend
 1745              		.section	.text._ZNK10BigInteger24convertToSignedPrimitiveIstEET_v,"axG",%progbits,_ZNK10BigInteger
 1746              		.align	2
 1747              		.weak	_ZNK10BigInteger24convertToSignedPrimitiveIstEET_v
 1748              		.syntax unified
 1749              		.arm
 1750              		.fpu neon
 1752              	_ZNK10BigInteger24convertToSignedPrimitiveIstEET_v:
 1753              		.fnstart
 1754              	.LFB178:
 104:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero)
 1755              		.loc 1 104 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              	.LVL171:
 1760              	.LBB415:
 105:../src/zxing_lib/bigint/BigInteger.cpp **** 		return 0;
 1761              		.loc 1 105 0
 1762 0000 D030D0E1 		ldrsb	r3, [r0]
 1763 0004 000053E3 		cmp	r3, #0
 1764 0008 2100000A 		beq	.L145
 1765              	.LVL172:
 1766              	.LBB416:
 1767              	.LBB417:
 1768              	.LBB418:
  73:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Blk   getBlock(Index i) const { return blk[i];   }
 1769              		.loc 2 73 0
 1770 000c 082090E5 		ldr	r2, [r0, #8]
 1771              	.LVL173:
 1772              	.LBE418:
 1773              	.LBE417:
 107:../src/zxing_lib/bigint/BigInteger.cpp **** 		// The single block might fit in an X.  Try the conversion.
 1774              		.loc 1 107 0
 1775 0010 010052E3 		cmp	r2, #1
 1776 0014 1400001A 		bne	.L142
 1777              	.LVL174:
 1778              	.LBB419:
 1779              	.LBB420:
 1780              	.LBB421:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1781              		.loc 3 92 0
 1782 0018 000052E3 		cmp	r2, #0
 1783 001c 0B00000A 		beq	.L146
 1784 0020 0C2090E5 		ldr	r2, [r0, #12]
 1785 0024 002092E5 		ldr	r2, [r2]
 1786              	.L143:
 1787              	.LVL175:
 1788              	.LBE421:
 1789              	.LBE420:
 1790              	.LBB423:
 110:../src/zxing_lib/bigint/BigInteger.cpp **** 			X x = X(b);
 1791              		.loc 1 110 0
 1792 0028 010053E3 		cmp	r3, #1
 1793 002c 0900000A 		beq	.L149
 1794              	.LBB424:
 115:../src/zxing_lib/bigint/BigInteger.cpp **** 			/* UX(...) needed to avoid rejecting conversion of
 1795              		.loc 1 115 0
 1796 0030 000062E2 		rsb	r0, r2, #0
 1797              	.LVL176:
 1798 0034 7000BFE6 		sxth	r0, r0
 1799              	.LVL177:
 118:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1800              		.loc 1 118 0
 1801 0038 000050E3 		cmp	r0, #0
 1802 003c 0A0000AA 		bge	.L142
 118:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1803              		.loc 1 118 0 is_stmt 0 discriminator 1
 1804 0040 7230FFE6 		uxth	r3, r2
 1805 0044 020053E1 		cmp	r3, r2
 1806 0048 0700001A 		bne	.L142
 1807              	.LVL178:
 1808              	.L141:
 1809              	.LBE424:
 1810              	.LBE423:
 1811              	.LBE419:
 1812              	.LBE416:
 1813              	.LBE415:
 125:../src/zxing_lib/bigint/BigInteger.cpp **** 
 1814              		.loc 1 125 0 is_stmt 1
 1815 004c 1EFF2FE1 		bx	lr
 1816              	.LVL179:
 1817              	.L146:
 1818              	.LBB430:
 1819              	.LBB429:
 1820              	.LBB428:
 1821              	.LBB426:
 1822              	.LBB422:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1823              		.loc 3 92 0
 1824 0050 0020A0E3 		mov	r2, #0
 1825 0054 F3FFFFEA 		b	.L143
 1826              	.LVL180:
 1827              	.L149:
 1828              	.LBE422:
 1829              	.LBE426:
 1830              	.LBB427:
 1831              	.LBB425:
 111:../src/zxing_lib/bigint/BigInteger.cpp **** 			if (x >= 0 && Blk(x) == b)
 1832              		.loc 1 111 0
 1833 0058 7200BFE6 		sxth	r0, r2
 1834              	.LVL181:
 112:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1835              		.loc 1 112 0
 1836 005c 000050E3 		cmp	r0, #0
 1837 0060 010000BA 		blt	.L142
 112:../src/zxing_lib/bigint/BigInteger.cpp **** 				return x;
 1838              		.loc 1 112 0 is_stmt 0 discriminator 1
 1839 0064 020050E1 		cmp	r0, r2
 1840 0068 F7FFFF0A 		beq	.L141
 1841              	.LVL182:
 1842              	.L142:
 1843              	.LBE425:
 1844              	.LBE427:
 1845              	.LBE428:
 1846              	.LBE429:
 1847              	.LBE430:
 104:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == zero)
 1848              		.loc 1 104 0 is_stmt 1
 1849 006c 10402DE9 		push	{r4, lr}
 1850              		.save {r4, lr}
 1851              		.cfi_def_cfa_offset 8
 1852              		.cfi_offset 4, -8
 1853              		.cfi_offset 14, -4
 124:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1854              		.loc 1 124 0
 1855 0070 0400A0E3 		mov	r0, #4
 1856 0074 FEFFFFEB 		bl	__cxa_allocate_exception
 1857              	.LVL183:
 123:../src/zxing_lib/bigint/BigInteger.cpp **** 		"Value is too big to fit in the requested type";
 1858              		.loc 1 123 0
 1859 0078 003000E3 		movw	r3, #:lower16:.LC5
 1860 007c 003040E3 		movt	r3, #:upper16:.LC5
 1861 0080 003080E5 		str	r3, [r0]
 124:../src/zxing_lib/bigint/BigInteger.cpp **** }
 1862              		.loc 1 124 0
 1863 0084 0020A0E3 		mov	r2, #0
 1864 0088 001000E3 		movw	r1, #:lower16:_ZTIPKc
 1865 008c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 1866 0090 FEFFFFEB 		bl	__cxa_throw
 1867              	.LVL184:
 1868              	.L145:
 1869              		.cfi_def_cfa_offset 0
 1870              		.cfi_restore 4
 1871              		.cfi_restore 14
 1872              	.LBB431:
 106:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (mag.getLength() == 1) {
 1873              		.loc 1 106 0
 1874 0094 0000A0E3 		mov	r0, #0
 1875              	.LVL185:
 1876 0098 EBFFFFEA 		b	.L141
 1877              	.LBE431:
 1878              		.cfi_endproc
 1879              	.LFE178:
 1880              		.fnend
 1882              		.section	.text._ZNK10BigInteger7toShortEv,"ax",%progbits
 1883              		.align	2
 1884              		.global	_ZNK10BigInteger7toShortEv
 1885              		.syntax unified
 1886              		.arm
 1887              		.fpu neon
 1889              	_ZNK10BigInteger7toShortEv:
 1890              		.fnstart
 1891              	.LFB138:
 132:../src/zxing_lib/bigint/BigInteger.cpp **** 
 1892              		.loc 1 132 0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 0
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896              	.LVL186:
 1897 0000 10402DE9 		push	{r4, lr}
 1898              		.save {r4, lr}
 1899              		.cfi_def_cfa_offset 8
 1900              		.cfi_offset 4, -8
 1901              		.cfi_offset 14, -4
 132:../src/zxing_lib/bigint/BigInteger.cpp **** 
 1902              		.loc 1 132 0
 1903 0004 FEFFFFEB 		bl	_ZNK10BigInteger24convertToSignedPrimitiveIstEET_v
 1904              	.LVL187:
 1905 0008 1080BDE8 		pop	{r4, pc}
 1906              		.cfi_endproc
 1907              	.LFE138:
 1908              		.fnend
 1910              		.section	.text._ZN15NumberlikeArrayImE8allocateEj,"axG",%progbits,_ZN15NumberlikeArrayImE8allocate
 1911              		.align	2
 1912              		.weak	_ZN15NumberlikeArrayImE8allocateEj
 1913              		.syntax unified
 1914              		.arm
 1915              		.fpu neon
 1917              	_ZN15NumberlikeArrayImE8allocateEj:
 1918              		.fnstart
 1919              	.LFB179:
  94:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 1920              		.loc 2 94 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 0
 1923              		@ frame_needed = 0, uses_anonymous_args = 0
 1924              	.LVL188:
  96:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Delete the old number array
 1925              		.loc 2 96 0
 1926 0000 003090E5 		ldr	r3, [r0]
 1927 0004 010053E1 		cmp	r3, r1
 1928 0008 1EFF2F21 		bxcs	lr
  94:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 1929              		.loc 2 94 0
 1930 000c 70402DE9 		push	{r4, r5, r6, lr}
 1931              		.save {r4, r5, r6, lr}
 1932              		.cfi_def_cfa_offset 16
 1933              		.cfi_offset 4, -16
 1934              		.cfi_offset 5, -12
 1935              		.cfi_offset 6, -8
 1936              		.cfi_offset 14, -4
 1937 0010 0150A0E1 		mov	r5, r1
 1938 0014 0040A0E1 		mov	r4, r0
  98:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new array
 1939              		.loc 2 98 0
 1940 0018 080090E5 		ldr	r0, [r0, #8]
 1941              	.LVL189:
 1942 001c 000050E3 		cmp	r0, #0
 1943 0020 0000000A 		beq	.L154
  98:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new array
 1944              		.loc 2 98 0 is_stmt 0 discriminator 1
 1945 0024 FEFFFFEB 		bl	_ZdaPv
 1946              	.LVL190:
 1947              	.L154:
 100:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = new Blk[cap];
 1948              		.loc 2 100 0 is_stmt 1
 1949 0028 005084E5 		str	r5, [r4]
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1950              		.loc 2 101 0
 1951 002c 2E0275E3 		cmn	r5, #-536870910
 1952 0030 0300008A 		bhi	.L155
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1953              		.loc 2 101 0 is_stmt 0 discriminator 1
 1954 0034 0501A0E1 		lsl	r0, r5, #2
 1955 0038 FEFFFFEB 		bl	_Znaj
 1956              	.LVL191:
 1957 003c 080084E5 		str	r0, [r4, #8]
 1958 0040 7080BDE8 		pop	{r4, r5, r6, pc}
 1959              	.L155:
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1960              		.loc 2 101 0 discriminator 2
 1961 0044 FEFFFFEB 		bl	__cxa_throw_bad_array_new_length
 1962              	.LVL192:
 1963              		.cfi_endproc
 1964              	.LFE179:
 1965              		.fnend
 1967              		.section	.text._ZN15NumberlikeArrayImEaSERKS0_,"axG",%progbits,_ZN15NumberlikeArrayImEaSERKS0_,com
 1968              		.align	2
 1969              		.weak	_ZN15NumberlikeArrayImEaSERKS0_
 1970              		.syntax unified
 1971              		.arm
 1972              		.fpu neon
 1974              	_ZN15NumberlikeArrayImEaSERKS0_:
 1975              		.fnstart
 1976              	.LFB161:
 135:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Calls like a = a have no effect; catch them before the aliasing
 1977              		.loc 2 135 0 is_stmt 1
 1978              		.cfi_startproc
 1979              		@ args = 0, pretend = 0, frame = 0
 1980              		@ frame_needed = 0, uses_anonymous_args = 0
 1981              	.LVL193:
 138:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		return;
 1982              		.loc 2 138 0
 1983 0000 010050E1 		cmp	r0, r1
 1984 0004 1EFF2F01 		bxeq	lr
 135:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Calls like a = a have no effect; catch them before the aliasing
 1985              		.loc 2 135 0
 1986 0008 70402DE9 		push	{r4, r5, r6, lr}
 1987              		.save {r4, r5, r6, lr}
 1988              		.cfi_def_cfa_offset 16
 1989              		.cfi_offset 4, -16
 1990              		.cfi_offset 5, -12
 1991              		.cfi_offset 6, -8
 1992              		.cfi_offset 14, -4
 1993 000c 0150A0E1 		mov	r5, r1
 1994 0010 0040A0E1 		mov	r4, r0
 141:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Expand array if necessary
 1995              		.loc 2 141 0
 1996 0014 041091E5 		ldr	r1, [r1, #4]
 1997              	.LVL194:
 1998 0018 041080E5 		str	r1, [r0, #4]
 143:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy number blocks
 1999              		.loc 2 143 0
 2000 001c FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 2001              	.LVL195:
 146:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 2002              		.loc 2 146 0
 2003 0020 0030A0E3 		mov	r3, #0
 2004              	.LVL196:
 2005              	.L162:
 146:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 2006              		.loc 2 146 0 is_stmt 0 discriminator 3
 2007 0024 042094E5 		ldr	r2, [r4, #4]
 2008 0028 020053E1 		cmp	r3, r2
 2009 002c 7080BD28 		popcs	{r4, r5, r6, pc}
 147:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 2010              		.loc 2 147 0 is_stmt 1 discriminator 2
 2011 0030 082094E5 		ldr	r2, [r4, #8]
 2012 0034 080095E5 		ldr	r0, [r5, #8]
 2013 0038 030190E7 		ldr	r0, [r0, r3, lsl #2]
 2014 003c 030182E7 		str	r0, [r2, r3, lsl #2]
 146:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 2015              		.loc 2 146 0 discriminator 2
 2016 0040 013083E2 		add	r3, r3, #1
 2017              	.LVL197:
 2018 0044 F6FFFFEA 		b	.L162
 2019              		.cfi_endproc
 2020              	.LFE161:
 2021              		.fnend
 2023              		.section	.text._ZN10BigIntegeraSERKS_,"ax",%progbits
 2024              		.align	2
 2025              		.global	_ZN10BigIntegeraSERKS_
 2026              		.syntax unified
 2027              		.arm
 2028              		.fpu neon
 2030              	_ZN10BigIntegeraSERKS_:
 2031              		.fnstart
 2032              	.LFB103:
   3:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Calls like a = a have no effect
 2033              		.loc 1 3 0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 0
 2036              		@ frame_needed = 0, uses_anonymous_args = 0
 2037              	.LVL198:
   5:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 2038              		.loc 1 5 0
 2039 0000 010050E1 		cmp	r0, r1
 2040 0004 1EFF2F01 		bxeq	lr
   3:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Calls like a = a have no effect
 2041              		.loc 1 3 0
 2042 0008 10402DE9 		push	{r4, lr}
 2043              		.save {r4, lr}
 2044              		.cfi_def_cfa_offset 8
 2045              		.cfi_offset 4, -8
 2046              		.cfi_offset 14, -4
   8:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy the rest
 2047              		.loc 1 8 0
 2048 000c D430D1E0 		ldrsb	r3, [r1], #4
 2049              	.LVL199:
 2050 0010 0430C0E4 		strb	r3, [r0], #4
 2051              	.LVL200:
 2052              	.LBB432:
 2053              	.LBB433:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2054              		.loc 3 44 0
 2055 0014 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 2056              	.LVL201:
 2057 0018 1080BDE8 		pop	{r4, pc}
 2058              	.LBE433:
 2059              	.LBE432:
 2060              		.cfi_endproc
 2061              	.LFE103:
 2062              		.fnend
 2064              		.section	.text._ZN10BigInteger3addERKS_S1_,"ax",%progbits
 2065              		.align	2
 2066              		.global	_ZN10BigInteger3addERKS_S1_
 2067              		.syntax unified
 2068              		.arm
 2069              		.fpu neon
 2071              	_ZN10BigInteger3addERKS_S1_:
 2072              		.fnstart
 2073              	.LFB140:
 169:../src/zxing_lib/bigint/BigInteger.cpp **** 	DTRT_ALIASED(this == &a || this == &b, add(a, b));
 2074              		.loc 1 169 0
 2075              		.cfi_startproc
 2076              		.cfi_personality 0,__gxx_personality_v0
 2077              		.cfi_lsda 0,.LLSDA140
 2078              		@ args = 0, pretend = 0, frame = 32
 2079              		@ frame_needed = 0, uses_anonymous_args = 0
 2080              	.LVL202:
 2081 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 2082              		.save {r4, r5, r6, r7, r8, lr}
 2083              		.cfi_def_cfa_offset 24
 2084              		.cfi_offset 4, -24
 2085              		.cfi_offset 5, -20
 2086              		.cfi_offset 6, -16
 2087              		.cfi_offset 7, -12
 2088              		.cfi_offset 8, -8
 2089              		.cfi_offset 14, -4
 2090              		.pad #32
 2091 0004 20D04DE2 		sub	sp, sp, #32
 2092              		.cfi_def_cfa_offset 56
 2093 0008 0040A0E1 		mov	r4, r0
 2094 000c 0150A0E1 		mov	r5, r1
 2095 0010 0260A0E1 		mov	r6, r2
 2096              	.LBB434:
 170:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one argument is zero, copy the other.
 2097              		.loc 1 170 0
 2098 0014 020050E1 		cmp	r0, r2
 2099 0018 01005011 		cmpne	r0, r1
 2100 001c 1900000A 		beq	.L191
 2101              	.LBE434:
 172:../src/zxing_lib/bigint/BigInteger.cpp **** 		operator =(b);
 2102              		.loc 1 172 0
 2103 0020 D030D1E1 		ldrsb	r3, [r1]
 2104 0024 000053E3 		cmp	r3, #0
 2105 0028 2600000A 		beq	.L192
 174:../src/zxing_lib/bigint/BigInteger.cpp **** 		operator =(a);
 2106              		.loc 1 174 0
 2107 002c D020D2E1 		ldrsb	r2, [r2]
 2108              	.LVL203:
 2109 0030 000052E3 		cmp	r2, #0
 2110 0034 2600000A 		beq	.L193
 178:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = a.sign;
 2111              		.loc 1 178 0
 2112 0038 020053E1 		cmp	r3, r2
 2113 003c 2600000A 		beq	.L194
 183:../src/zxing_lib/bigint/BigInteger.cpp **** 		case equal:
 2114              		.loc 1 183 0
 2115 0040 048081E2 		add	r8, r1, #4
 2116 0044 047086E2 		add	r7, r6, #4
 2117 0048 0710A0E1 		mov	r1, r7
 2118              	.LVL204:
 2119 004c 0800A0E1 		mov	r0, r8
 2120              	.LVL205:
 2121              	.LEHB8:
 2122 0050 FEFFFFEB 		bl	_ZNK11BigUnsigned9compareToERKS_
 2123              	.LVL206:
 2124 0054 000050E3 		cmp	r0, #0
 2125 0058 2400000A 		beq	.L180
 2126 005c 010050E3 		cmp	r0, #1
 2127 0060 2F00000A 		beq	.L181
 2128 0064 010070E3 		cmn	r0, #1
 2129 0068 1400001A 		bne	.L173
 196:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(b.mag, a.mag);
 2130              		.loc 1 196 0
 2131 006c D030D6E1 		ldrsb	r3, [r6]
 2132 0070 0400A0E1 		mov	r0, r4
 2133 0074 0430C0E4 		strb	r3, [r0], #4
 197:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 2134              		.loc 1 197 0
 2135 0078 0820A0E1 		mov	r2, r8
 2136 007c 0710A0E1 		mov	r1, r7
 2137 0080 FEFFFFEB 		bl	_ZN11BigUnsigned8subtractERKS_S1_
 2138              	.LVL207:
 2139              	.LEHE8:
 198:../src/zxing_lib/bigint/BigInteger.cpp **** 		}
 2140              		.loc 1 198 0
 2141 0084 0D0000EA 		b	.L173
 2142              	.LVL208:
 2143              	.L191:
 2144              	.LBB452:
 2145              	.LBB435:
 2146              	.LBB436:
 2147              	.LBB437:
 2148              	.LBB438:
 2149              		.file 4 "../src/zxing_lib/bigint/BigInteger.hh"
   1:../src/zxing_lib/bigint/BigInteger.hh **** #ifndef BIGINTEGER_H
   2:../src/zxing_lib/bigint/BigInteger.hh **** #define BIGINTEGER_H
   3:../src/zxing_lib/bigint/BigInteger.hh **** 
   4:../src/zxing_lib/bigint/BigInteger.hh **** #include "BigUnsigned.hh"
   5:../src/zxing_lib/bigint/BigInteger.hh **** 
   6:../src/zxing_lib/bigint/BigInteger.hh **** /* A BigInteger object represents a signed integer of size limited only by
   7:../src/zxing_lib/bigint/BigInteger.hh ****  * available memory.  BigUnsigneds support most mathematical operators and can
   8:../src/zxing_lib/bigint/BigInteger.hh ****  * be converted to and from most primitive integer types.
   9:../src/zxing_lib/bigint/BigInteger.hh ****  *
  10:../src/zxing_lib/bigint/BigInteger.hh ****  * A BigInteger is just an aggregate of a BigUnsigned and a sign.  (It is no
  11:../src/zxing_lib/bigint/BigInteger.hh ****  * longer derived from BigUnsigned because that led to harmful implicit
  12:../src/zxing_lib/bigint/BigInteger.hh ****  * conversions.) */
  13:../src/zxing_lib/bigint/BigInteger.hh **** class BigInteger {
  14:../src/zxing_lib/bigint/BigInteger.hh **** 
  15:../src/zxing_lib/bigint/BigInteger.hh **** public:
  16:../src/zxing_lib/bigint/BigInteger.hh **** 	typedef BigUnsigned::Blk Blk;
  17:../src/zxing_lib/bigint/BigInteger.hh **** 	typedef BigUnsigned::Index Index;
  18:../src/zxing_lib/bigint/BigInteger.hh **** 	typedef BigUnsigned::CmpRes CmpRes;
  19:../src/zxing_lib/bigint/BigInteger.hh **** 	static const CmpRes
  20:../src/zxing_lib/bigint/BigInteger.hh **** 		less    = BigUnsigned::less   ,
  21:../src/zxing_lib/bigint/BigInteger.hh **** 		equal   = BigUnsigned::equal  ,
  22:../src/zxing_lib/bigint/BigInteger.hh **** 		greater = BigUnsigned::greater;
  23:../src/zxing_lib/bigint/BigInteger.hh **** 	// Enumeration for the sign of a BigInteger.
  24:../src/zxing_lib/bigint/BigInteger.hh **** 	enum Sign { negative = -1, zero = 0, positive = 1 };
  25:../src/zxing_lib/bigint/BigInteger.hh **** 
  26:../src/zxing_lib/bigint/BigInteger.hh **** protected:
  27:../src/zxing_lib/bigint/BigInteger.hh **** 	Sign sign;
  28:../src/zxing_lib/bigint/BigInteger.hh **** 	BigUnsigned mag;
  29:../src/zxing_lib/bigint/BigInteger.hh **** 
  30:../src/zxing_lib/bigint/BigInteger.hh **** public:
  31:../src/zxing_lib/bigint/BigInteger.hh **** 	// Constructs zero.
  32:../src/zxing_lib/bigint/BigInteger.hh **** 	BigInteger() : sign(zero), mag() {}
 2150              		.loc 4 32 0
 2151 0088 0030A0E3 		mov	r3, #0
 2152 008c 0430CDE5 		strb	r3, [sp, #4]
 2153              	.LVL209:
 2154              	.LBB439:
 2155              	.LBB440:
 2156              	.LBB441:
 2157              	.LBB442:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 2158              		.loc 2 45 0
 2159 0090 08308DE5 		str	r3, [sp, #8]
 2160 0094 0C308DE5 		str	r3, [sp, #12]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2161              		.loc 2 46 0
 2162 0098 10308DE5 		str	r3, [sp, #16]
 2163              	.LVL210:
 2164              	.LBE442:
 2165              	.LBE441:
 2166              	.LBE440:
 2167              	.LBE439:
 2168              	.LBE438:
 2169              	.LBE437:
 2170              	.LBE436:
 170:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one argument is zero, copy the other.
 2171              		.loc 1 170 0
 2172 009c 04008DE2 		add	r0, sp, #4
 2173              	.LVL211:
 2174              	.LEHB9:
 2175 00a0 FEFFFFEB 		bl	_ZN10BigInteger3addERKS_S1_
 2176              	.LVL212:
 170:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one argument is zero, copy the other.
 2177              		.loc 1 170 0 is_stmt 0 discriminator 4
 2178 00a4 04108DE2 		add	r1, sp, #4
 2179 00a8 0400A0E1 		mov	r0, r4
 2180 00ac FEFFFFEB 		bl	_ZN10BigIntegeraSERKS_
 2181              	.LVL213:
 2182              	.LEHE9:
 2183              	.LBB443:
 2184              	.LBB444:
 2185              	.LBB445:
 2186              	.LBB446:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2187              		.loc 2 51 0 is_stmt 1
 2188 00b0 10009DE5 		ldr	r0, [sp, #16]
 2189 00b4 000050E3 		cmp	r0, #0
 2190 00b8 0000000A 		beq	.L173
 2191 00bc FEFFFFEB 		bl	_ZdaPv
 2192              	.LVL214:
 2193              	.L173:
 2194              	.LBE446:
 2195              	.LBE445:
 2196              	.LBE444:
 2197              	.LBE443:
 2198              	.LBE435:
 2199              	.LBE452:
 201:../src/zxing_lib/bigint/BigInteger.cpp **** 
 2200              		.loc 1 201 0
 2201 00c0 20D08DE2 		add	sp, sp, #32
 2202              		.cfi_remember_state
 2203              		.cfi_def_cfa_offset 24
 2204              		@ sp needed
 2205 00c4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2206              	.LVL215:
 2207              	.L192:
 2208              		.cfi_restore_state
 173:../src/zxing_lib/bigint/BigInteger.cpp **** 	else if (b.sign == zero)
 2209              		.loc 1 173 0
 2210 00c8 0210A0E1 		mov	r1, r2
 2211              	.LVL216:
 2212              	.LEHB10:
 2213 00cc FEFFFFEB 		bl	_ZN10BigIntegeraSERKS_
 2214              	.LVL217:
 2215 00d0 FAFFFFEA 		b	.L173
 2216              	.LVL218:
 2217              	.L193:
 175:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If the arguments have the same sign, take the
 2218              		.loc 1 175 0
 2219 00d4 FEFFFFEB 		bl	_ZN10BigIntegeraSERKS_
 2220              	.LVL219:
 2221 00d8 F8FFFFEA 		b	.L173
 2222              	.LVL220:
 2223              	.L194:
 179:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag.add(a.mag, b.mag);
 2224              		.loc 1 179 0
 2225 00dc 0430C0E4 		strb	r3, [r0], #4
 2226              	.LVL221:
 180:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 2227              		.loc 1 180 0
 2228 00e0 042086E2 		add	r2, r6, #4
 2229 00e4 041081E2 		add	r1, r1, #4
 2230              	.LVL222:
 2231 00e8 FEFFFFEB 		bl	_ZN11BigUnsigned3addERKS_S1_
 2232              	.LVL223:
 2233 00ec F3FFFFEA 		b	.L173
 2234              	.L180:
 186:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 2235              		.loc 1 186 0
 2236 00f0 0010A0E3 		mov	r1, #0
 2237 00f4 14008DE2 		add	r0, sp, #20
 2238 00f8 FEFFFFEB 		bl	_ZN11BigUnsignedC1Ei
 2239              	.LVL224:
 2240              	.LEHE10:
 2241              	.LBB453:
 2242              	.LBB454:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2243              		.loc 3 44 0
 2244 00fc 14108DE2 		add	r1, sp, #20
 2245              	.LVL225:
 2246 0100 040084E2 		add	r0, r4, #4
 2247              	.LVL226:
 2248              	.LEHB11:
 2249 0104 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 2250              	.LVL227:
 2251              	.LEHE11:
 2252              	.LBE454:
 2253              	.LBE453:
 2254              	.LBB455:
 2255              	.LBB456:
 2256              	.LBB457:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2257              		.loc 2 51 0
 2258 0108 1C009DE5 		ldr	r0, [sp, #28]
 2259 010c 000050E3 		cmp	r0, #0
 2260 0110 0000000A 		beq	.L183
 2261 0114 FEFFFFEB 		bl	_ZdaPv
 2262              	.LVL228:
 2263              	.L183:
 2264              	.LBE457:
 2265              	.LBE456:
 2266              	.LBE455:
 187:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 2267              		.loc 1 187 0
 2268 0118 0030A0E3 		mov	r3, #0
 2269 011c 0030C4E5 		strb	r3, [r4]
 188:../src/zxing_lib/bigint/BigInteger.cpp **** 			// Otherwise, take the sign of the greater, and subtract
 2270              		.loc 1 188 0
 2271 0120 E6FFFFEA 		b	.L173
 2272              	.L181:
 192:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(a.mag, b.mag);
 2273              		.loc 1 192 0
 2274 0124 D030D5E1 		ldrsb	r3, [r5]
 2275 0128 0400A0E1 		mov	r0, r4
 2276 012c 0430C0E4 		strb	r3, [r0], #4
 193:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 2277              		.loc 1 193 0
 2278 0130 0720A0E1 		mov	r2, r7
 2279 0134 0810A0E1 		mov	r1, r8
 2280              	.LEHB12:
 2281 0138 FEFFFFEB 		bl	_ZN11BigUnsigned8subtractERKS_S1_
 2282              	.LVL229:
 194:../src/zxing_lib/bigint/BigInteger.cpp **** 		case less:
 2283              		.loc 1 194 0
 2284 013c DFFFFFEA 		b	.L173
 2285              	.L188:
 2286              	.LVL230:
 2287              	.LBB458:
 2288              	.LBB451:
 2289              	.LBB447:
 2290              	.LBB448:
 2291              	.LBB449:
 2292              	.LBB450:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2293              		.loc 2 51 0
 2294 0140 10009DE5 		ldr	r0, [sp, #16]
 2295 0144 000050E3 		cmp	r0, #0
 2296 0148 0000000A 		beq	.L185
 2297 014c FEFFFFEB 		bl	_ZdaPv
 2298              	.LVL231:
 2299              	.L185:
 2300 0150 FEFFFFEB 		bl	__cxa_end_cleanup
 2301              	.LVL232:
 2302              	.L189:
 2303              	.LBE450:
 2304              	.LBE449:
 2305              	.LBE448:
 2306              	.LBE447:
 2307              	.LBE451:
 2308              	.LBE458:
 2309              	.LBB459:
 2310              	.LBB460:
 2311              	.LBB461:
 2312 0154 1C009DE5 		ldr	r0, [sp, #28]
 2313 0158 000050E3 		cmp	r0, #0
 2314 015c 0000000A 		beq	.L187
 2315 0160 FEFFFFEB 		bl	_ZdaPv
 2316              	.LVL233:
 2317              	.L187:
 2318 0164 FEFFFFEB 		bl	__cxa_end_cleanup
 2319              	.LVL234:
 2320              	.LEHE12:
 2321              	.LBE461:
 2322              	.LBE460:
 2323              	.LBE459:
 2324              		.cfi_endproc
 2325              	.LFE140:
 2326              		.personality	__gxx_personality_v0
 2327              		.handlerdata
 2328              	.LLSDA140:
 2329 0008 FF       		.byte	0xff
 2330 0009 FF       		.byte	0xff
 2331 000a 01       		.byte	0x1
 2332 000b 1A       		.uleb128 .LLSDACSE140-.LLSDACSB140
 2333              	.LLSDACSB140:
 2334 000c 50       		.uleb128 .LEHB8-.LFB140
 2335 000d 34       		.uleb128 .LEHE8-.LEHB8
 2336 000e 00       		.uleb128 0
 2337 000f 00       		.uleb128 0
 2338 0010 A001     		.uleb128 .LEHB9-.LFB140
 2339 0012 10       		.uleb128 .LEHE9-.LEHB9
 2340 0013 C002     		.uleb128 .L188-.LFB140
 2341 0015 00       		.uleb128 0
 2342 0016 CC01     		.uleb128 .LEHB10-.LFB140
 2343 0018 30       		.uleb128 .LEHE10-.LEHB10
 2344 0019 00       		.uleb128 0
 2345 001a 00       		.uleb128 0
 2346 001b 8402     		.uleb128 .LEHB11-.LFB140
 2347 001d 04       		.uleb128 .LEHE11-.LEHB11
 2348 001e D402     		.uleb128 .L189-.LFB140
 2349 0020 00       		.uleb128 0
 2350 0021 B802     		.uleb128 .LEHB12-.LFB140
 2351 0023 30       		.uleb128 .LEHE12-.LEHB12
 2352 0024 00       		.uleb128 0
 2353 0025 00       		.uleb128 0
 2354              	.LLSDACSE140:
 2355              		.section	.text._ZN10BigInteger3addERKS_S1_
 2356              		.fnend
 2358              		.section	.text._ZN10BigInteger8subtractERKS_S1_,"ax",%progbits
 2359              		.align	2
 2360              		.global	_ZN10BigInteger8subtractERKS_S1_
 2361              		.syntax unified
 2362              		.arm
 2363              		.fpu neon
 2365              	_ZN10BigInteger8subtractERKS_S1_:
 2366              		.fnstart
 2367              	.LFB141:
 203:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Notice that this routine is identical to BigInteger::add,
 2368              		.loc 1 203 0
 2369              		.cfi_startproc
 2370              		.cfi_personality 0,__gxx_personality_v0
 2371              		.cfi_lsda 0,.LLSDA141
 2372              		@ args = 0, pretend = 0, frame = 32
 2373              		@ frame_needed = 0, uses_anonymous_args = 0
 2374              	.LVL235:
 2375 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 2376              		.save {r4, r5, r6, r7, r8, lr}
 2377              		.cfi_def_cfa_offset 24
 2378              		.cfi_offset 4, -24
 2379              		.cfi_offset 5, -20
 2380              		.cfi_offset 6, -16
 2381              		.cfi_offset 7, -12
 2382              		.cfi_offset 8, -8
 2383              		.cfi_offset 14, -4
 2384              		.pad #32
 2385 0004 20D04DE2 		sub	sp, sp, #32
 2386              		.cfi_def_cfa_offset 56
 2387 0008 0040A0E1 		mov	r4, r0
 2388 000c 0160A0E1 		mov	r6, r1
 2389 0010 0250A0E1 		mov	r5, r2
 2390              	.LBB462:
 206:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If a is zero, copy b and flip its sign.  If b is zero, copy a.
 2391              		.loc 1 206 0
 2392 0014 020050E1 		cmp	r0, r2
 2393 0018 01005011 		cmpne	r0, r1
 2394 001c 0D00000A 		beq	.L213
 2395              	.LBE462:
 208:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag = b.mag;
 2396              		.loc 1 208 0
 2397 0020 D030D1E1 		ldrsb	r3, [r1]
 2398 0024 000053E3 		cmp	r3, #0
 2399 0028 1900000A 		beq	.L214
 213:../src/zxing_lib/bigint/BigInteger.cpp **** 		operator =(a);
 2400              		.loc 1 213 0
 2401 002c D020D2E1 		ldrsb	r2, [r2]
 2402              	.LVL236:
 2403 0030 000052E3 		cmp	r2, #0
 2404 0034 1D00000A 		beq	.L215
 216:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = a.sign;
 2405              		.loc 1 216 0
 2406 0038 020053E1 		cmp	r3, r2
 2407 003c 1D00000A 		beq	.L201
 217:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag.add(a.mag, b.mag);
 2408              		.loc 1 217 0
 2409 0040 0430C0E4 		strb	r3, [r0], #4
 2410              	.LVL237:
 218:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 2411              		.loc 1 218 0
 2412 0044 042085E2 		add	r2, r5, #4
 2413 0048 041081E2 		add	r1, r1, #4
 2414              	.LVL238:
 2415              	.LEHB13:
 2416 004c FEFFFFEB 		bl	_ZN11BigUnsigned3addERKS_S1_
 2417              	.LVL239:
 2418              	.LEHE13:
 2419              	.L195:
 241:../src/zxing_lib/bigint/BigInteger.cpp **** 
 2420              		.loc 1 241 0
 2421 0050 20D08DE2 		add	sp, sp, #32
 2422              		.cfi_remember_state
 2423              		.cfi_def_cfa_offset 24
 2424              		@ sp needed
 2425 0054 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2426              	.LVL240:
 2427              	.L213:
 2428              		.cfi_restore_state
 2429              	.LBB480:
 2430              	.LBB463:
 2431              	.LBB464:
 2432              	.LBB465:
 2433              	.LBB466:
 2434              		.loc 4 32 0
 2435 0058 0030A0E3 		mov	r3, #0
 2436 005c 0430CDE5 		strb	r3, [sp, #4]
 2437              	.LVL241:
 2438              	.LBB467:
 2439              	.LBB468:
 2440              	.LBB469:
 2441              	.LBB470:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 2442              		.loc 2 45 0
 2443 0060 08308DE5 		str	r3, [sp, #8]
 2444 0064 0C308DE5 		str	r3, [sp, #12]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2445              		.loc 2 46 0
 2446 0068 10308DE5 		str	r3, [sp, #16]
 2447              	.LVL242:
 2448              	.LBE470:
 2449              	.LBE469:
 2450              	.LBE468:
 2451              	.LBE467:
 2452              	.LBE466:
 2453              	.LBE465:
 2454              	.LBE464:
 206:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If a is zero, copy b and flip its sign.  If b is zero, copy a.
 2455              		.loc 1 206 0
 2456 006c 04008DE2 		add	r0, sp, #4
 2457              	.LVL243:
 2458              	.LEHB14:
 2459 0070 FEFFFFEB 		bl	_ZN10BigInteger8subtractERKS_S1_
 2460              	.LVL244:
 206:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If a is zero, copy b and flip its sign.  If b is zero, copy a.
 2461              		.loc 1 206 0 is_stmt 0 discriminator 4
 2462 0074 04108DE2 		add	r1, sp, #4
 2463 0078 0400A0E1 		mov	r0, r4
 2464 007c FEFFFFEB 		bl	_ZN10BigIntegeraSERKS_
 2465              	.LVL245:
 2466              	.LEHE14:
 2467              	.LBB471:
 2468              	.LBB472:
 2469              	.LBB473:
 2470              	.LBB474:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2471              		.loc 2 51 0 is_stmt 1
 2472 0080 10009DE5 		ldr	r0, [sp, #16]
 2473 0084 000050E3 		cmp	r0, #0
 2474 0088 F0FFFF0A 		beq	.L195
 2475 008c FEFFFFEB 		bl	_ZdaPv
 2476              	.LVL246:
 2477 0090 EEFFFFEA 		b	.L195
 2478              	.LVL247:
 2479              	.L214:
 2480              	.LBE474:
 2481              	.LBE473:
 2482              	.LBE472:
 2483              	.LBE471:
 2484              	.LBE463:
 2485              	.LBE480:
 2486              	.LBB481:
 2487              	.LBB482:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2488              		.loc 3 44 0
 2489 0094 041082E2 		add	r1, r2, #4
 2490              	.LVL248:
 2491 0098 040080E2 		add	r0, r0, #4
 2492              	.LVL249:
 2493              	.LEHB15:
 2494 009c FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 2495              	.LVL250:
 2496              	.LBE482:
 2497              	.LBE481:
 212:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else if (b.sign == zero)
 2498              		.loc 1 212 0
 2499 00a0 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 2500 00a4 003063E2 		rsb	r3, r3, #0
 2501 00a8 0030C4E5 		strb	r3, [r4]
 2502 00ac E7FFFFEA 		b	.L195
 2503              	.LVL251:
 2504              	.L215:
 214:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If their signs differ, take a.sign and add the magnitudes.
 2505              		.loc 1 214 0
 2506 00b0 FEFFFFEB 		bl	_ZN10BigIntegeraSERKS_
 2507              	.LVL252:
 2508 00b4 E5FFFFEA 		b	.L195
 2509              	.LVL253:
 2510              	.L201:
 221:../src/zxing_lib/bigint/BigInteger.cpp **** 			// If their magnitudes are the same, copy zero.
 2511              		.loc 1 221 0
 2512 00b8 048081E2 		add	r8, r1, #4
 2513 00bc 047085E2 		add	r7, r5, #4
 2514 00c0 0710A0E1 		mov	r1, r7
 2515              	.LVL254:
 2516 00c4 0800A0E1 		mov	r0, r8
 2517              	.LVL255:
 2518 00c8 FEFFFFEB 		bl	_ZNK11BigUnsigned9compareToERKS_
 2519              	.LVL256:
 2520 00cc 000050E3 		cmp	r0, #0
 2521 00d0 0B00000A 		beq	.L202
 2522 00d4 010050E3 		cmp	r0, #1
 2523 00d8 1600000A 		beq	.L203
 2524 00dc 010070E3 		cmn	r0, #1
 2525 00e0 DAFFFF1A 		bne	.L195
 236:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(b.mag, a.mag);
 2526              		.loc 1 236 0
 2527 00e4 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 2528 00e8 003063E2 		rsb	r3, r3, #0
 2529 00ec 0400A0E1 		mov	r0, r4
 2530 00f0 0430C0E4 		strb	r3, [r0], #4
 237:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 2531              		.loc 1 237 0
 2532 00f4 0820A0E1 		mov	r2, r8
 2533 00f8 0710A0E1 		mov	r1, r7
 2534 00fc FEFFFFEB 		bl	_ZN11BigUnsigned8subtractERKS_S1_
 2535              	.LVL257:
 238:../src/zxing_lib/bigint/BigInteger.cpp **** 		}
 2536              		.loc 1 238 0
 2537 0100 D2FFFFEA 		b	.L195
 2538              	.L202:
 224:../src/zxing_lib/bigint/BigInteger.cpp **** 			sign = zero;
 2539              		.loc 1 224 0
 2540 0104 0010A0E3 		mov	r1, #0
 2541 0108 14008DE2 		add	r0, sp, #20
 2542 010c FEFFFFEB 		bl	_ZN11BigUnsignedC1Ei
 2543              	.LVL258:
 2544              	.LEHE15:
 2545              	.LBB483:
 2546              	.LBB484:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2547              		.loc 3 44 0
 2548 0110 14108DE2 		add	r1, sp, #20
 2549              	.LVL259:
 2550 0114 040084E2 		add	r0, r4, #4
 2551              	.LVL260:
 2552              	.LEHB16:
 2553 0118 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 2554              	.LVL261:
 2555              	.LEHE16:
 2556              	.LBE484:
 2557              	.LBE483:
 2558              	.LBB485:
 2559              	.LBB486:
 2560              	.LBB487:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2561              		.loc 2 51 0
 2562 011c 1C009DE5 		ldr	r0, [sp, #28]
 2563 0120 000050E3 		cmp	r0, #0
 2564 0124 0000000A 		beq	.L205
 2565 0128 FEFFFFEB 		bl	_ZdaPv
 2566              	.LVL262:
 2567              	.L205:
 2568              	.LBE487:
 2569              	.LBE486:
 2570              	.LBE485:
 225:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 2571              		.loc 1 225 0
 2572 012c 0030A0E3 		mov	r3, #0
 2573 0130 0030C4E5 		strb	r3, [r4]
 226:../src/zxing_lib/bigint/BigInteger.cpp **** 			// If a's magnitude is greater, take a.sign and
 2574              		.loc 1 226 0
 2575 0134 C5FFFFEA 		b	.L195
 2576              	.L203:
 230:../src/zxing_lib/bigint/BigInteger.cpp **** 			mag.subtract(a.mag, b.mag);
 2577              		.loc 1 230 0
 2578 0138 D030D6E1 		ldrsb	r3, [r6]
 2579 013c 0400A0E1 		mov	r0, r4
 2580 0140 0430C0E4 		strb	r3, [r0], #4
 231:../src/zxing_lib/bigint/BigInteger.cpp **** 			break;
 2581              		.loc 1 231 0
 2582 0144 0720A0E1 		mov	r2, r7
 2583 0148 0810A0E1 		mov	r1, r8
 2584              	.LEHB17:
 2585 014c FEFFFFEB 		bl	_ZN11BigUnsigned8subtractERKS_S1_
 2586              	.LVL263:
 232:../src/zxing_lib/bigint/BigInteger.cpp **** 			// If b's magnitude is greater, take the opposite
 2587              		.loc 1 232 0
 2588 0150 BEFFFFEA 		b	.L195
 2589              	.L210:
 2590              	.LVL264:
 2591              	.LBB488:
 2592              	.LBB479:
 2593              	.LBB475:
 2594              	.LBB476:
 2595              	.LBB477:
 2596              	.LBB478:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2597              		.loc 2 51 0
 2598 0154 10009DE5 		ldr	r0, [sp, #16]
 2599 0158 000050E3 		cmp	r0, #0
 2600 015c 0000000A 		beq	.L207
 2601 0160 FEFFFFEB 		bl	_ZdaPv
 2602              	.LVL265:
 2603              	.L207:
 2604 0164 FEFFFFEB 		bl	__cxa_end_cleanup
 2605              	.LVL266:
 2606              	.L211:
 2607              	.LBE478:
 2608              	.LBE477:
 2609              	.LBE476:
 2610              	.LBE475:
 2611              	.LBE479:
 2612              	.LBE488:
 2613              	.LBB489:
 2614              	.LBB490:
 2615              	.LBB491:
 2616 0168 1C009DE5 		ldr	r0, [sp, #28]
 2617 016c 000050E3 		cmp	r0, #0
 2618 0170 0000000A 		beq	.L209
 2619 0174 FEFFFFEB 		bl	_ZdaPv
 2620              	.LVL267:
 2621              	.L209:
 2622 0178 FEFFFFEB 		bl	__cxa_end_cleanup
 2623              	.LVL268:
 2624              	.LEHE17:
 2625              	.LBE491:
 2626              	.LBE490:
 2627              	.LBE489:
 2628              		.cfi_endproc
 2629              	.LFE141:
 2630              		.personality	__gxx_personality_v0
 2631              		.handlerdata
 2632              	.LLSDA141:
 2633 0008 FF       		.byte	0xff
 2634 0009 FF       		.byte	0xff
 2635 000a 01       		.byte	0x1
 2636 000b 19       		.uleb128 .LLSDACSE141-.LLSDACSB141
 2637              	.LLSDACSB141:
 2638 000c 4C       		.uleb128 .LEHB13-.LFB141
 2639 000d 04       		.uleb128 .LEHE13-.LEHB13
 2640 000e 00       		.uleb128 0
 2641 000f 00       		.uleb128 0
 2642 0010 70       		.uleb128 .LEHB14-.LFB141
 2643 0011 10       		.uleb128 .LEHE14-.LEHB14
 2644 0012 D402     		.uleb128 .L210-.LFB141
 2645 0014 00       		.uleb128 0
 2646 0015 9C01     		.uleb128 .LEHB15-.LFB141
 2647 0017 74       		.uleb128 .LEHE15-.LEHB15
 2648 0018 00       		.uleb128 0
 2649 0019 00       		.uleb128 0
 2650 001a 9802     		.uleb128 .LEHB16-.LFB141
 2651 001c 04       		.uleb128 .LEHE16-.LEHB16
 2652 001d E802     		.uleb128 .L211-.LFB141
 2653 001f 00       		.uleb128 0
 2654 0020 CC02     		.uleb128 .LEHB17-.LFB141
 2655 0022 30       		.uleb128 .LEHE17-.LEHB17
 2656 0023 00       		.uleb128 0
 2657 0024 00       		.uleb128 0
 2658              	.LLSDACSE141:
 2659              		.section	.text._ZN10BigInteger8subtractERKS_S1_
 2660              		.fnend
 2662              		.section	.text._ZN10BigInteger8multiplyERKS_S1_,"ax",%progbits
 2663              		.align	2
 2664              		.global	_ZN10BigInteger8multiplyERKS_S1_
 2665              		.syntax unified
 2666              		.arm
 2667              		.fpu neon
 2669              	_ZN10BigInteger8multiplyERKS_S1_:
 2670              		.fnstart
 2671              	.LFB142:
 243:../src/zxing_lib/bigint/BigInteger.cpp **** 	DTRT_ALIASED(this == &a || this == &b, multiply(a, b));
 2672              		.loc 1 243 0
 2673              		.cfi_startproc
 2674              		.cfi_personality 0,__gxx_personality_v0
 2675              		.cfi_lsda 0,.LLSDA142
 2676              		@ args = 0, pretend = 0, frame = 32
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 2678              	.LVL269:
 2679 0000 10402DE9 		push	{r4, lr}
 2680              		.save {r4, lr}
 2681              		.cfi_def_cfa_offset 8
 2682              		.cfi_offset 4, -8
 2683              		.cfi_offset 14, -4
 2684              		.pad #32
 2685 0004 20D04DE2 		sub	sp, sp, #32
 2686              		.cfi_def_cfa_offset 40
 2687 0008 0040A0E1 		mov	r4, r0
 2688              	.LBB492:
 244:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one object is zero, copy zero and return.
 2689              		.loc 1 244 0
 2690 000c 020050E1 		cmp	r0, r2
 2691 0010 01005011 		cmpne	r0, r1
 2692 0014 0D00000A 		beq	.L232
 2693              	.LBE492:
 246:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
 2694              		.loc 1 246 0
 2695 0018 D030D1E1 		ldrsb	r3, [r1]
 2696 001c 000053E3 		cmp	r3, #0
 2697 0020 0200000A 		beq	.L220
 246:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
 2698              		.loc 1 246 0 is_stmt 0 discriminator 1
 2699 0024 D000D2E1 		ldrsb	r0, [r2]
 2700              	.LVL270:
 2701 0028 000050E3 		cmp	r0, #0
 2702 002c 1C00001A 		bne	.L221
 2703              	.L220:
 247:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag = 0;
 2704              		.loc 1 247 0 is_stmt 1
 2705 0030 0010A0E3 		mov	r1, #0
 2706              	.LVL271:
 2707 0034 0410C4E4 		strb	r1, [r4], #4
 2708              	.LVL272:
 248:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 2709              		.loc 1 248 0
 2710 0038 14008DE2 		add	r0, sp, #20
 2711              	.LEHB18:
 2712 003c FEFFFFEB 		bl	_ZN11BigUnsignedC1Ei
 2713              	.LVL273:
 2714              	.LEHE18:
 2715              	.LBB510:
 2716              	.LBB511:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2717              		.loc 3 44 0
 2718 0040 14108DE2 		add	r1, sp, #20
 2719              	.LVL274:
 2720 0044 0400A0E1 		mov	r0, r4
 2721              	.LEHB19:
 2722 0048 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 2723              	.LVL275:
 2724              	.LEHE19:
 2725 004c 0E0000EA 		b	.L233
 2726              	.LVL276:
 2727              	.L232:
 2728              	.LBE511:
 2729              	.LBE510:
 2730              	.LBB512:
 2731              	.LBB493:
 2732              	.LBB494:
 2733              	.LBB495:
 2734              	.LBB496:
 2735              		.loc 4 32 0
 2736 0050 0030A0E3 		mov	r3, #0
 2737 0054 0430CDE5 		strb	r3, [sp, #4]
 2738              	.LVL277:
 2739              	.LBB497:
 2740              	.LBB498:
 2741              	.LBB499:
 2742              	.LBB500:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 2743              		.loc 2 45 0
 2744 0058 08308DE5 		str	r3, [sp, #8]
 2745 005c 0C308DE5 		str	r3, [sp, #12]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2746              		.loc 2 46 0
 2747 0060 10308DE5 		str	r3, [sp, #16]
 2748              	.LVL278:
 2749              	.LBE500:
 2750              	.LBE499:
 2751              	.LBE498:
 2752              	.LBE497:
 2753              	.LBE496:
 2754              	.LBE495:
 2755              	.LBE494:
 244:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one object is zero, copy zero and return.
 2756              		.loc 1 244 0
 2757 0064 04008DE2 		add	r0, sp, #4
 2758              	.LVL279:
 2759              	.LEHB20:
 2760 0068 FEFFFFEB 		bl	_ZN10BigInteger8multiplyERKS_S1_
 2761              	.LVL280:
 244:../src/zxing_lib/bigint/BigInteger.cpp **** 	// If one object is zero, copy zero and return.
 2762              		.loc 1 244 0 is_stmt 0 discriminator 4
 2763 006c 04108DE2 		add	r1, sp, #4
 2764 0070 0400A0E1 		mov	r0, r4
 2765 0074 FEFFFFEB 		bl	_ZN10BigIntegeraSERKS_
 2766              	.LVL281:
 2767              	.LEHE20:
 2768              	.LBB501:
 2769              	.LBB502:
 2770              	.LBB503:
 2771              	.LBB504:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2772              		.loc 2 51 0 is_stmt 1
 2773 0078 10009DE5 		ldr	r0, [sp, #16]
 2774 007c 000050E3 		cmp	r0, #0
 2775 0080 0500000A 		beq	.L216
 2776 0084 FEFFFFEB 		bl	_ZdaPv
 2777              	.LVL282:
 2778 0088 030000EA 		b	.L216
 2779              	.LVL283:
 2780              	.L233:
 2781              	.LBE504:
 2782              	.LBE503:
 2783              	.LBE502:
 2784              	.LBE501:
 2785              	.LBE493:
 2786              	.LBE512:
 2787              	.LBB513:
 2788              	.LBB514:
 2789              	.LBB515:
 2790 008c 1C009DE5 		ldr	r0, [sp, #28]
 2791 0090 000050E3 		cmp	r0, #0
 2792 0094 0000000A 		beq	.L216
 2793 0098 FEFFFFEB 		bl	_ZdaPv
 2794              	.LVL284:
 2795              	.L216:
 2796              	.LBE515:
 2797              	.LBE514:
 2798              	.LBE513:
 256:../src/zxing_lib/bigint/BigInteger.cpp **** 
 2799              		.loc 1 256 0
 2800 009c 20D08DE2 		add	sp, sp, #32
 2801              		.cfi_remember_state
 2802              		.cfi_def_cfa_offset 8
 2803              		@ sp needed
 2804 00a0 1080BDE8 		pop	{r4, pc}
 2805              	.LVL285:
 2806              	.L221:
 2807              		.cfi_restore_state
 253:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Multiply the magnitudes.
 2808              		.loc 1 253 0
 2809 00a4 000053E1 		cmp	r3, r0
 2810 00a8 0600000A 		beq	.L234
 2811 00ac 0030E0E3 		mvn	r3, #0
 2812              	.L223:
 253:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Multiply the magnitudes.
 2813              		.loc 1 253 0 is_stmt 0 discriminator 4
 2814 00b0 0400A0E1 		mov	r0, r4
 2815 00b4 0430C0E4 		strb	r3, [r0], #4
 255:../src/zxing_lib/bigint/BigInteger.cpp **** }
 2816              		.loc 1 255 0 is_stmt 1 discriminator 4
 2817 00b8 042082E2 		add	r2, r2, #4
 2818              	.LVL286:
 2819 00bc 041081E2 		add	r1, r1, #4
 2820              	.LVL287:
 2821              	.LEHB21:
 2822 00c0 FEFFFFEB 		bl	_ZN11BigUnsigned8multiplyERKS_S1_
 2823              	.LVL288:
 2824 00c4 F4FFFFEA 		b	.L216
 2825              	.LVL289:
 2826              	.L234:
 253:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Multiply the magnitudes.
 2827              		.loc 1 253 0
 2828 00c8 0130A0E3 		mov	r3, #1
 2829 00cc F7FFFFEA 		b	.L223
 2830              	.LVL290:
 2831              	.L229:
 2832              	.LBB516:
 2833              	.LBB509:
 2834              	.LBB505:
 2835              	.LBB506:
 2836              	.LBB507:
 2837              	.LBB508:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2838              		.loc 2 51 0
 2839 00d0 10009DE5 		ldr	r0, [sp, #16]
 2840 00d4 000050E3 		cmp	r0, #0
 2841 00d8 0000000A 		beq	.L225
 2842 00dc FEFFFFEB 		bl	_ZdaPv
 2843              	.LVL291:
 2844              	.L225:
 2845 00e0 FEFFFFEB 		bl	__cxa_end_cleanup
 2846              	.LVL292:
 2847              	.L230:
 2848              	.LBE508:
 2849              	.LBE507:
 2850              	.LBE506:
 2851              	.LBE505:
 2852              	.LBE509:
 2853              	.LBE516:
 2854              	.LBB517:
 2855              	.LBB518:
 2856              	.LBB519:
 2857 00e4 1C009DE5 		ldr	r0, [sp, #28]
 2858 00e8 000050E3 		cmp	r0, #0
 2859 00ec 0000000A 		beq	.L227
 2860 00f0 FEFFFFEB 		bl	_ZdaPv
 2861              	.LVL293:
 2862              	.L227:
 2863 00f4 FEFFFFEB 		bl	__cxa_end_cleanup
 2864              	.LVL294:
 2865              	.LEHE21:
 2866              	.LBE519:
 2867              	.LBE518:
 2868              	.LBE517:
 2869              		.cfi_endproc
 2870              	.LFE142:
 2871              		.personality	__gxx_personality_v0
 2872              		.handlerdata
 2873              	.LLSDA142:
 2874 0008 FF       		.byte	0xff
 2875 0009 FF       		.byte	0xff
 2876 000a 01       		.byte	0x1
 2877 000b 13       		.uleb128 .LLSDACSE142-.LLSDACSB142
 2878              	.LLSDACSB142:
 2879 000c 3C       		.uleb128 .LEHB18-.LFB142
 2880 000d 04       		.uleb128 .LEHE18-.LEHB18
 2881 000e 00       		.uleb128 0
 2882 000f 00       		.uleb128 0
 2883 0010 48       		.uleb128 .LEHB19-.LFB142
 2884 0011 04       		.uleb128 .LEHE19-.LEHB19
 2885 0012 E401     		.uleb128 .L230-.LFB142
 2886 0014 00       		.uleb128 0
 2887 0015 68       		.uleb128 .LEHB20-.LFB142
 2888 0016 10       		.uleb128 .LEHE20-.LEHB20
 2889 0017 D001     		.uleb128 .L229-.LFB142
 2890 0019 00       		.uleb128 0
 2891 001a C001     		.uleb128 .LEHB21-.LFB142
 2892 001c 38       		.uleb128 .LEHE21-.LEHB21
 2893 001d 00       		.uleb128 0
 2894 001e 00       		.uleb128 0
 2895              	.LLSDACSE142:
 2896              		.section	.text._ZN10BigInteger8multiplyERKS_S1_
 2897              		.fnend
 2899              		.section	.text._ZN10BigInteger19divideWithRemainderERKS_RS_,"ax",%progbits
 2900              		.align	2
 2901              		.global	_ZN10BigInteger19divideWithRemainderERKS_RS_
 2902              		.syntax unified
 2903              		.arm
 2904              		.fpu neon
 2906              	_ZN10BigInteger19divideWithRemainderERKS_RS_:
 2907              		.fnstart
 2908              	.LFB143:
 280:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Defend against aliased calls;
 2909              		.loc 1 280 0
 2910              		.cfi_startproc
 2911              		.cfi_personality 0,__gxx_personality_v0
 2912              		.cfi_lsda 0,.LLSDA143
 2913              		@ args = 0, pretend = 0, frame = 40
 2914              		@ frame_needed = 0, uses_anonymous_args = 0
 2915              	.LVL295:
 2916 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 2917              		.save {r4, r5, r6, r7, r8, r9, lr}
 2918              		.cfi_def_cfa_offset 28
 2919              		.cfi_offset 4, -28
 2920              		.cfi_offset 5, -24
 2921              		.cfi_offset 6, -20
 2922              		.cfi_offset 7, -16
 2923              		.cfi_offset 8, -12
 2924              		.cfi_offset 9, -8
 2925              		.cfi_offset 14, -4
 2926              		.pad #44
 2927 0004 2CD04DE2 		sub	sp, sp, #44
 2928              		.cfi_def_cfa_offset 72
 283:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::divideWithRemainder: Cannot write quotient and remainder into the same variabl
 2929              		.loc 1 283 0
 2930 0008 020050E1 		cmp	r0, r2
 2931 000c 3000000A 		beq	.L258
 2932 0010 0060A0E1 		mov	r6, r0
 2933 0014 0140A0E1 		mov	r4, r1
 2934 0018 0270A0E1 		mov	r7, r2
 2935              	.LBB520:
 285:../src/zxing_lib/bigint/BigInteger.cpp **** 		BigInteger tmpB(b);
 2936              		.loc 1 285 0
 2937 001c 010052E1 		cmp	r2, r1
 2938 0020 01005011 		cmpne	r0, r1
 2939 0024 3300000A 		beq	.L259
 2940              	.LBE520:
 292:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.mag = 0;
 2941              		.loc 1 292 0
 2942 0028 D030D1E1 		ldrsb	r3, [r1]
 2943 002c 000053E3 		cmp	r3, #0
 2944 0030 3F00000A 		beq	.L260
 298:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.mag = 0;
 2945              		.loc 1 298 0
 2946 0034 D020D0E1 		ldrsb	r2, [r0]
 2947              	.LVL296:
 2948 0038 000052E3 		cmp	r2, #0
 2949 003c 4900000A 		beq	.L261
 307:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Yes: easy case.  Quotient is zero or positive.
 2950              		.loc 1 307 0
 2951 0040 020053E1 		cmp	r3, r2
 2952 0044 5400000A 		beq	.L262
 312:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Decrease the magnitude of the dividend by one.
 2953              		.loc 1 312 0
 2954 0048 0030E0E3 		mvn	r3, #0
 2955 004c 0030C7E5 		strb	r3, [r7]
 314:../src/zxing_lib/bigint/BigInteger.cpp **** 		/*
 2956              		.loc 1 314 0
 2957 0050 0010A0E3 		mov	r1, #0
 2958              	.LVL297:
 2959 0054 040080E2 		add	r0, r0, #4
 2960              	.LVL298:
 2961              	.LEHB22:
 2962 0058 FEFFFFEB 		bl	_ZN11BigUnsignedmmEi
 2963              	.LVL299:
 2964              	.L245:
 338:../src/zxing_lib/bigint/BigInteger.cpp **** 
 2965              		.loc 1 338 0
 2966 005c 045086E2 		add	r5, r6, #4
 2967 0060 048084E2 		add	r8, r4, #4
 2968 0064 049087E2 		add	r9, r7, #4
 2969 0068 0920A0E1 		mov	r2, r9
 2970 006c 0810A0E1 		mov	r1, r8
 2971 0070 0500A0E1 		mov	r0, r5
 2972 0074 FEFFFFEB 		bl	_ZN11BigUnsigned19divideWithRemainderERKS_RS_
 2973              	.LVL300:
 340:../src/zxing_lib/bigint/BigInteger.cpp **** 		// More for the harder case (as described):
 2974              		.loc 1 340 0
 2975 0078 D020D6E1 		ldrsb	r2, [r6]
 2976 007c D030D4E1 		ldrsb	r3, [r4]
 2977 0080 030052E1 		cmp	r2, r3
 2978 0084 0900000A 		beq	.L246
 343:../src/zxing_lib/bigint/BigInteger.cpp **** 		// Modify the remainder.
 2979              		.loc 1 343 0
 2980 0088 0010A0E3 		mov	r1, #0
 2981 008c 0900A0E1 		mov	r0, r9
 2982 0090 FEFFFFEB 		bl	_ZN11BigUnsignedppEi
 2983              	.LVL301:
 345:../src/zxing_lib/bigint/BigInteger.cpp **** 		mag--;
 2984              		.loc 1 345 0
 2985 0094 0520A0E1 		mov	r2, r5
 2986 0098 0810A0E1 		mov	r1, r8
 2987 009c 0500A0E1 		mov	r0, r5
 2988 00a0 FEFFFFEB 		bl	_ZN11BigUnsigned8subtractERKS_S1_
 2989              	.LVL302:
 346:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 2990              		.loc 1 346 0
 2991 00a4 0010A0E3 		mov	r1, #0
 2992 00a8 0500A0E1 		mov	r0, r5
 2993 00ac FEFFFFEB 		bl	_ZN11BigUnsignedmmEi
 2994              	.LVL303:
 2995              	.L246:
 350:../src/zxing_lib/bigint/BigInteger.cpp **** 
 2996              		.loc 1 350 0
 2997 00b0 D030D4E1 		ldrsb	r3, [r4]
 2998 00b4 0030C6E5 		strb	r3, [r6]
 2999              	.LVL304:
 3000              	.LBB537:
 3001              	.LBB538:
 3002              	.LBB539:
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 3003              		.loc 2 75 0
 3004 00b8 083096E5 		ldr	r3, [r6, #8]
 3005              	.LVL305:
 3006              	.LBE539:
 3007              	.LBE538:
 3008              	.LBE537:
 353:../src/zxing_lib/bigint/BigInteger.cpp **** 		sign = zero;
 3009              		.loc 1 353 0
 3010 00bc 000053E3 		cmp	r3, #0
 354:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (q.mag.isZero())
 3011              		.loc 1 354 0
 3012 00c0 0030C605 		strbeq	r3, [r6]
 3013              	.L247:
 3014              	.LVL306:
 3015              	.LBB540:
 3016              	.LBB541:
 3017              	.LBB542:
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 3018              		.loc 2 75 0
 3019 00c4 083097E5 		ldr	r3, [r7, #8]
 3020              	.LVL307:
 3021              	.LBE542:
 3022              	.LBE541:
 3023              	.LBE540:
 355:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = zero;
 3024              		.loc 1 355 0
 3025 00c8 000053E3 		cmp	r3, #0
 356:../src/zxing_lib/bigint/BigInteger.cpp **** 
 3026              		.loc 1 356 0
 3027 00cc 0030C705 		strbeq	r3, [r7]
 3028 00d0 150000EA 		b	.L235
 3029              	.LVL308:
 3030              	.L258:
 284:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (this == &b || &q == &b) {
 3031              		.loc 1 284 0
 3032 00d4 0400A0E3 		mov	r0, #4
 3033              	.LVL309:
 3034 00d8 FEFFFFEB 		bl	__cxa_allocate_exception
 3035              	.LVL310:
 3036 00dc 003000E3 		movw	r3, #:lower16:.LC6
 3037 00e0 003040E3 		movt	r3, #:upper16:.LC6
 3038 00e4 003080E5 		str	r3, [r0]
 3039 00e8 0020A0E3 		mov	r2, #0
 3040 00ec 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3041 00f0 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3042 00f4 FEFFFFEB 		bl	__cxa_throw
 3043              	.LVL311:
 3044              	.L259:
 3045              	.LBB543:
 3046              	.LBB521:
 3047              	.LBB522:
 3048              	.LBB523:
 3049              	.LBB524:
  33:../src/zxing_lib/bigint/BigInteger.hh **** 
  34:../src/zxing_lib/bigint/BigInteger.hh **** 	// Copy constructor
  35:../src/zxing_lib/bigint/BigInteger.hh **** 	BigInteger(const BigInteger &x) : sign(x.sign), mag(x.mag) {};
 3050              		.loc 4 35 0
 3051 00f8 D430D1E0 		ldrsb	r3, [r1], #4
 3052              	.LVL312:
 3053 00fc 28508DE2 		add	r5, sp, #40
 3054 0100 283065E5 		strb	r3, [r5, #-40]!
 3055              	.LVL313:
 3056              	.LBB525:
 3057              	.LBB526:
 3058              	.LBB527:
  40:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 3059              		.loc 3 40 0
 3060 0104 04008DE2 		add	r0, sp, #4
 3061              	.LVL314:
 3062 0108 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEC2ERKS0_
 3063              	.LVL315:
 3064              	.LEHE22:
 3065              	.LBE527:
 3066              	.LBE526:
 3067              	.LBE525:
 3068              	.LBE524:
 3069              	.LBE523:
 3070              	.LBE522:
 287:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 3071              		.loc 1 287 0
 3072 010c 0720A0E1 		mov	r2, r7
 3073 0110 0510A0E1 		mov	r1, r5
 3074 0114 0600A0E1 		mov	r0, r6
 3075              	.LEHB23:
 3076 0118 FEFFFFEB 		bl	_ZN10BigInteger19divideWithRemainderERKS_RS_
 3077              	.LVL316:
 3078              	.LEHE23:
 3079              	.LBB528:
 3080              	.LBB529:
 3081              	.LBB530:
 3082              	.LBB531:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3083              		.loc 2 51 0
 3084 011c 0C009DE5 		ldr	r0, [sp, #12]
 3085 0120 000050E3 		cmp	r0, #0
 3086 0124 0000000A 		beq	.L235
 3087 0128 FEFFFFEB 		bl	_ZdaPv
 3088              	.LVL317:
 3089              	.L235:
 3090              	.LBE531:
 3091              	.LBE530:
 3092              	.LBE529:
 3093              	.LBE528:
 3094              	.LBE521:
 3095              	.LBE543:
 359:../src/zxing_lib/bigint/BigInteger.cpp **** 
 3096              		.loc 1 359 0
 3097 012c 2CD08DE2 		add	sp, sp, #44
 3098              		.cfi_remember_state
 3099              		.cfi_def_cfa_offset 28
 3100              		@ sp needed
 3101 0130 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3102              	.LVL318:
 3103              	.L260:
 3104              		.cfi_restore_state
 293:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = zero;
 3105              		.loc 1 293 0
 3106 0134 0010A0E3 		mov	r1, #0
 3107              	.LVL319:
 3108 0138 10008DE2 		add	r0, sp, #16
 3109              	.LVL320:
 3110              	.LEHB24:
 3111 013c FEFFFFEB 		bl	_ZN11BigUnsignedC1Ei
 3112              	.LVL321:
 3113              	.LEHE24:
 3114              	.LBB544:
 3115              	.LBB545:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3116              		.loc 3 44 0
 3117 0140 10108DE2 		add	r1, sp, #16
 3118              	.LVL322:
 3119 0144 040087E2 		add	r0, r7, #4
 3120              	.LVL323:
 3121              	.LEHB25:
 3122 0148 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3123              	.LVL324:
 3124              	.LEHE25:
 3125              	.LBE545:
 3126              	.LBE544:
 3127              	.LBB546:
 3128              	.LBB547:
 3129              	.LBB548:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3130              		.loc 2 51 0
 3131 014c 18009DE5 		ldr	r0, [sp, #24]
 3132 0150 000050E3 		cmp	r0, #0
 3133 0154 0000000A 		beq	.L241
 3134 0158 FEFFFFEB 		bl	_ZdaPv
 3135              	.LVL325:
 3136              	.L241:
 3137              	.LBE548:
 3138              	.LBE547:
 3139              	.LBE546:
 294:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 3140              		.loc 1 294 0
 3141 015c 0030A0E3 		mov	r3, #0
 3142 0160 0030C7E5 		strb	r3, [r7]
 295:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 3143              		.loc 1 295 0
 3144 0164 F0FFFFEA 		b	.L235
 3145              	.LVL326:
 3146              	.L261:
 299:../src/zxing_lib/bigint/BigInteger.cpp **** 		q.sign = zero;
 3147              		.loc 1 299 0
 3148 0168 0010A0E3 		mov	r1, #0
 3149              	.LVL327:
 3150 016c 1C008DE2 		add	r0, sp, #28
 3151              	.LVL328:
 3152              	.LEHB26:
 3153 0170 FEFFFFEB 		bl	_ZN11BigUnsignedC1Ei
 3154              	.LVL329:
 3155              	.LEHE26:
 3156              	.LBB549:
 3157              	.LBB550:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3158              		.loc 3 44 0
 3159 0174 1C108DE2 		add	r1, sp, #28
 3160              	.LVL330:
 3161 0178 040087E2 		add	r0, r7, #4
 3162              	.LVL331:
 3163              	.LEHB27:
 3164 017c FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3165              	.LVL332:
 3166              	.LEHE27:
 3167              	.LBE550:
 3168              	.LBE549:
 3169              	.LBB551:
 3170              	.LBB552:
 3171              	.LBB553:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3172              		.loc 2 51 0
 3173 0180 24009DE5 		ldr	r0, [sp, #36]
 3174 0184 000050E3 		cmp	r0, #0
 3175 0188 0000000A 		beq	.L243
 3176 018c FEFFFFEB 		bl	_ZdaPv
 3177              	.LVL333:
 3178              	.L243:
 3179              	.LBE553:
 3180              	.LBE552:
 3181              	.LBE551:
 300:../src/zxing_lib/bigint/BigInteger.cpp **** 		return;
 3182              		.loc 1 300 0
 3183 0190 0030A0E3 		mov	r3, #0
 3184 0194 0030C7E5 		strb	r3, [r7]
 301:../src/zxing_lib/bigint/BigInteger.cpp **** 	}
 3185              		.loc 1 301 0
 3186 0198 E3FFFFEA 		b	.L235
 3187              	.LVL334:
 3188              	.L262:
 309:../src/zxing_lib/bigint/BigInteger.cpp **** 	} else {
 3189              		.loc 1 309 0
 3190 019c 0130A0E3 		mov	r3, #1
 3191 01a0 0030C7E5 		strb	r3, [r7]
 3192 01a4 ACFFFFEA 		b	.L245
 3193              	.LVL335:
 3194              	.L254:
 3195              	.LBB554:
 3196              	.LBB536:
 3197              	.LBB532:
 3198              	.LBB533:
 3199              	.LBB534:
 3200              	.LBB535:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3201              		.loc 2 51 0
 3202 01a8 0C009DE5 		ldr	r0, [sp, #12]
 3203 01ac 000050E3 		cmp	r0, #0
 3204 01b0 0000000A 		beq	.L249
 3205 01b4 FEFFFFEB 		bl	_ZdaPv
 3206              	.LVL336:
 3207              	.L249:
 3208              	.LEHB28:
 3209 01b8 FEFFFFEB 		bl	__cxa_end_cleanup
 3210              	.LVL337:
 3211              	.L255:
 3212              	.LBE535:
 3213              	.LBE534:
 3214              	.LBE533:
 3215              	.LBE532:
 3216              	.LBE536:
 3217              	.LBE554:
 3218              	.LBB555:
 3219              	.LBB556:
 3220              	.LBB557:
 3221 01bc 18009DE5 		ldr	r0, [sp, #24]
 3222 01c0 000050E3 		cmp	r0, #0
 3223 01c4 0000000A 		beq	.L251
 3224 01c8 FEFFFFEB 		bl	_ZdaPv
 3225              	.LVL338:
 3226              	.L251:
 3227 01cc FEFFFFEB 		bl	__cxa_end_cleanup
 3228              	.LVL339:
 3229              	.L256:
 3230              	.LBE557:
 3231              	.LBE556:
 3232              	.LBE555:
 3233              	.LBB558:
 3234              	.LBB559:
 3235              	.LBB560:
 3236 01d0 24009DE5 		ldr	r0, [sp, #36]
 3237 01d4 000050E3 		cmp	r0, #0
 3238 01d8 0000000A 		beq	.L253
 3239 01dc FEFFFFEB 		bl	_ZdaPv
 3240              	.LVL340:
 3241              	.L253:
 3242 01e0 FEFFFFEB 		bl	__cxa_end_cleanup
 3243              	.LVL341:
 3244              	.LEHE28:
 3245              	.LBE560:
 3246              	.LBE559:
 3247              	.LBE558:
 3248              		.cfi_endproc
 3249              	.LFE143:
 3250              		.personality	__gxx_personality_v0
 3251              		.handlerdata
 3252              	.LLSDA143:
 3253 0008 FF       		.byte	0xff
 3254 0009 FF       		.byte	0xff
 3255 000a 01       		.byte	0x1
 3256 000b 26       		.uleb128 .LLSDACSE143-.LLSDACSB143
 3257              	.LLSDACSB143:
 3258 000c 58       		.uleb128 .LEHB22-.LFB143
 3259 000d B401     		.uleb128 .LEHE22-.LEHB22
 3260 000f 00       		.uleb128 0
 3261 0010 00       		.uleb128 0
 3262 0011 9802     		.uleb128 .LEHB23-.LFB143
 3263 0013 04       		.uleb128 .LEHE23-.LEHB23
 3264 0014 A803     		.uleb128 .L254-.LFB143
 3265 0016 00       		.uleb128 0
 3266 0017 BC02     		.uleb128 .LEHB24-.LFB143
 3267 0019 04       		.uleb128 .LEHE24-.LEHB24
 3268 001a 00       		.uleb128 0
 3269 001b 00       		.uleb128 0
 3270 001c C802     		.uleb128 .LEHB25-.LFB143
 3271 001e 04       		.uleb128 .LEHE25-.LEHB25
 3272 001f BC03     		.uleb128 .L255-.LFB143
 3273 0021 00       		.uleb128 0
 3274 0022 F002     		.uleb128 .LEHB26-.LFB143
 3275 0024 04       		.uleb128 .LEHE26-.LEHB26
 3276 0025 00       		.uleb128 0
 3277 0026 00       		.uleb128 0
 3278 0027 FC02     		.uleb128 .LEHB27-.LFB143
 3279 0029 04       		.uleb128 .LEHE27-.LEHB27
 3280 002a D003     		.uleb128 .L256-.LFB143
 3281 002c 00       		.uleb128 0
 3282 002d B803     		.uleb128 .LEHB28-.LFB143
 3283 002f 2C       		.uleb128 .LEHE28-.LEHB28
 3284 0030 00       		.uleb128 0
 3285 0031 00       		.uleb128 0
 3286              	.LLSDACSE143:
 3287              		.section	.text._ZN10BigInteger19divideWithRemainderERKS_RS_
 3288              		.fnend
 3290              		.section	.text._ZN10BigInteger6negateERKS_,"ax",%progbits
 3291              		.align	2
 3292              		.global	_ZN10BigInteger6negateERKS_
 3293              		.syntax unified
 3294              		.arm
 3295              		.fpu neon
 3297              	_ZN10BigInteger6negateERKS_:
 3298              		.fnstart
 3299              	.LFB144:
 362:../src/zxing_lib/bigint/BigInteger.cpp **** 	DTRT_ALIASED(this == &a, negate(a));
 3300              		.loc 1 362 0
 3301              		.cfi_startproc
 3302              		.cfi_personality 0,__gxx_personality_v0
 3303              		.cfi_lsda 0,.LLSDA144
 3304              		@ args = 0, pretend = 0, frame = 16
 3305              		@ frame_needed = 0, uses_anonymous_args = 0
 3306              	.LVL342:
 3307 0000 30402DE9 		push	{r4, r5, lr}
 3308              		.save {r4, r5, lr}
 3309              		.cfi_def_cfa_offset 12
 3310              		.cfi_offset 4, -12
 3311              		.cfi_offset 5, -8
 3312              		.cfi_offset 14, -4
 3313              		.pad #20
 3314 0004 14D04DE2 		sub	sp, sp, #20
 3315              		.cfi_def_cfa_offset 32
 3316 0008 0040A0E1 		mov	r4, r0
 3317 000c 0150A0E1 		mov	r5, r1
 3318              	.LBB561:
 363:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy a's magnitude
 3319              		.loc 1 363 0
 3320 0010 010050E1 		cmp	r0, r1
 3321 0014 0700000A 		beq	.L271
 3322              	.LVL343:
 3323              	.LBE561:
 3324              	.LBB578:
 3325              	.LBB579:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3326              		.loc 3 44 0
 3327 0018 041081E2 		add	r1, r1, #4
 3328              	.LVL344:
 3329 001c 040080E2 		add	r0, r0, #4
 3330              	.LVL345:
 3331              	.LEHB29:
 3332 0020 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3333              	.LVL346:
 3334              	.LEHE29:
 3335              	.LBE579:
 3336              	.LBE578:
 367:../src/zxing_lib/bigint/BigInteger.cpp **** }
 3337              		.loc 1 367 0
 3338 0024 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 3339 0028 003063E2 		rsb	r3, r3, #0
 3340 002c 0030C4E5 		strb	r3, [r4]
 3341              	.L263:
 368:../src/zxing_lib/bigint/BigInteger.cpp **** 
 3342              		.loc 1 368 0
 3343 0030 14D08DE2 		add	sp, sp, #20
 3344              		.cfi_remember_state
 3345              		.cfi_def_cfa_offset 12
 3346              		@ sp needed
 3347 0034 3080BDE8 		pop	{r4, r5, pc}
 3348              	.LVL347:
 3349              	.L271:
 3350              		.cfi_restore_state
 3351              	.LBB580:
 3352              	.LBB562:
 3353              	.LBB563:
 3354              	.LBB564:
 3355              	.LBB565:
  32:../src/zxing_lib/bigint/BigInteger.hh **** 
 3356              		.loc 4 32 0
 3357 0038 0030A0E3 		mov	r3, #0
 3358 003c 0030CDE5 		strb	r3, [sp]
 3359              	.LVL348:
 3360              	.LBB566:
 3361              	.LBB567:
 3362              	.LBB568:
 3363              	.LBB569:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 3364              		.loc 2 45 0
 3365 0040 04308DE5 		str	r3, [sp, #4]
 3366 0044 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3367              		.loc 2 46 0
 3368 0048 0C308DE5 		str	r3, [sp, #12]
 3369              	.LVL349:
 3370              	.LBE569:
 3371              	.LBE568:
 3372              	.LBE567:
 3373              	.LBE566:
 3374              	.LBE565:
 3375              	.LBE564:
 3376              	.LBE563:
 363:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy a's magnitude
 3377              		.loc 1 363 0
 3378 004c 0D00A0E1 		mov	r0, sp
 3379              	.LVL350:
 3380              	.LEHB30:
 3381 0050 FEFFFFEB 		bl	_ZN10BigInteger6negateERKS_
 3382              	.LVL351:
 363:../src/zxing_lib/bigint/BigInteger.cpp **** 	// Copy a's magnitude
 3383              		.loc 1 363 0 is_stmt 0 discriminator 4
 3384 0054 0D10A0E1 		mov	r1, sp
 3385 0058 0400A0E1 		mov	r0, r4
 3386 005c FEFFFFEB 		bl	_ZN10BigIntegeraSERKS_
 3387              	.LVL352:
 3388              	.LEHE30:
 3389              	.LBB570:
 3390              	.LBB571:
 3391              	.LBB572:
 3392              	.LBB573:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3393              		.loc 2 51 0 is_stmt 1
 3394 0060 0C009DE5 		ldr	r0, [sp, #12]
 3395 0064 000050E3 		cmp	r0, #0
 3396 0068 F0FFFF0A 		beq	.L263
 3397 006c FEFFFFEB 		bl	_ZdaPv
 3398              	.LVL353:
 3399 0070 EEFFFFEA 		b	.L263
 3400              	.L269:
 3401              	.LVL354:
 3402              	.LBE573:
 3403              	.LBE572:
 3404              	.LBE571:
 3405              	.LBE570:
 3406              	.LBB574:
 3407              	.LBB575:
 3408              	.LBB576:
 3409              	.LBB577:
 3410 0074 0C009DE5 		ldr	r0, [sp, #12]
 3411 0078 000050E3 		cmp	r0, #0
 3412 007c 0000000A 		beq	.L268
 3413 0080 FEFFFFEB 		bl	_ZdaPv
 3414              	.LVL355:
 3415              	.L268:
 3416              	.LEHB31:
 3417 0084 FEFFFFEB 		bl	__cxa_end_cleanup
 3418              	.LVL356:
 3419              	.LEHE31:
 3420              	.LBE577:
 3421              	.LBE576:
 3422              	.LBE575:
 3423              	.LBE574:
 3424              	.LBE562:
 3425              	.LBE580:
 3426              		.cfi_endproc
 3427              	.LFE144:
 3428              		.personality	__gxx_personality_v0
 3429              		.handlerdata
 3430              	.LLSDA144:
 3431 0008 FF       		.byte	0xff
 3432 0009 FF       		.byte	0xff
 3433 000a 01       		.byte	0x1
 3434 000b 0D       		.uleb128 .LLSDACSE144-.LLSDACSB144
 3435              	.LLSDACSB144:
 3436 000c 20       		.uleb128 .LEHB29-.LFB144
 3437 000d 04       		.uleb128 .LEHE29-.LEHB29
 3438 000e 00       		.uleb128 0
 3439 000f 00       		.uleb128 0
 3440 0010 50       		.uleb128 .LEHB30-.LFB144
 3441 0011 10       		.uleb128 .LEHE30-.LEHB30
 3442 0012 74       		.uleb128 .L269-.LFB144
 3443 0013 00       		.uleb128 0
 3444 0014 8401     		.uleb128 .LEHB31-.LFB144
 3445 0016 04       		.uleb128 .LEHE31-.LEHB31
 3446 0017 00       		.uleb128 0
 3447 0018 00       		.uleb128 0
 3448              	.LLSDACSE144:
 3449              		.section	.text._ZN10BigInteger6negateERKS_
 3450              		.fnend
 3452              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveImEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 3453              		.align	2
 3454              		.weak	_ZNK11BigUnsigned18convertToPrimitiveImEET_v
 3455              		.syntax unified
 3456              		.arm
 3457              		.fpu neon
 3459              	_ZNK11BigUnsigned18convertToPrimitiveImEET_v:
 3460              		.fnstart
 3461              	.LFB183:
 120:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 121:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator !=(const BigUnsigned &x) const {
 122:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return NumberlikeArray<Blk>::operator !=(x);
 123:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 124:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator < (const BigUnsigned &x) const { return compareTo(x) == less   ; }
 125:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator <=(const BigUnsigned &x) const { return compareTo(x) != greater; }
 126:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator >=(const BigUnsigned &x) const { return compareTo(x) != less   ; }
 127:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator > (const BigUnsigned &x) const { return compareTo(x) == greater; }
 128:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 129:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/*
 130:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * BigUnsigned and BigInteger both provide three kinds of operators.
 131:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Here ``big-integer'' refers to BigInteger or BigUnsigned.
 132:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 133:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * (1) Overloaded ``return-by-value'' operators:
 134:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     +, -, *, /, %, unary -, &, |, ^, <<, >>.
 135:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Big-integer code using these operators looks identical to code using
 136:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * the primitive integer types.  These operators take one or two
 137:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * big-integer inputs and return a big-integer result, which can then
 138:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * be assigned to a BigInteger variable or used in an expression.
 139:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Example:
 140:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger a(1), b = 1;
 141:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger c = a + b;
 142:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 143:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * (2) Overloaded assignment operators:
 144:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     +=, -=, *=, /=, %=, flipSign, &=, |=, ^=, <<=, >>=, ++, --.
 145:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Again, these are used on big integers just like on ints.  They take
 146:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * one writable big integer that both provides an operand and receives a
 147:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * result.  Most also take a second read-only operand.
 148:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Example:
 149:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger a(1), b(1);
 150:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     a += b;
 151:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 152:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * (3) Copy-less operations: `add', `subtract', etc.
 153:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * These named methods take operands as arguments and store the result
 154:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * in the receiver (*this), avoiding unnecessary copies and allocations.
 155:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * `divideWithRemainder' is special: it both takes the dividend from and
 156:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * stores the remainder into the receiver, and it takes a separate
 157:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * object in which to store the quotient.  NOTE: If you are wondering
 158:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * why these don't return a value, you probably mean to use the
 159:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * overloaded return-by-value operators instead.
 160:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * 
 161:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Examples:
 162:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger a(43), b(7), c, d;
 163:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 164:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     c = a + b;   // Now c == 50.
 165:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     c.add(a, b); // Same effect but without the two copies.
 166:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 167:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     c.divideWithRemainder(b, d);
 168:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     // 50 / 7; now d == 7 (quotient) and c == 1 (remainder).
 169:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 170:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     // ``Aliased'' calls now do the right thing using a temporary
 171:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     // copy, but see note on `divideWithRemainder'.
 172:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     a.add(a, b); 
 173:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 */
 174:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 175:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// COPY-LESS OPERATIONS
 176:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 177:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// These 8: Arguments are read-only operands, result is saved in *this.
 178:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void add(const BigUnsigned &a, const BigUnsigned &b);
 179:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void subtract(const BigUnsigned &a, const BigUnsigned &b);
 180:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void multiply(const BigUnsigned &a, const BigUnsigned &b);
 181:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitAnd(const BigUnsigned &a, const BigUnsigned &b);
 182:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitOr(const BigUnsigned &a, const BigUnsigned &b);
 183:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitXor(const BigUnsigned &a, const BigUnsigned &b);
 184:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Negative shift amounts translate to opposite-direction shifts,
 185:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * except for -2^(8*sizeof(int)-1) which is unimplemented. */
 186:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitShiftLeft(const BigUnsigned &a, int b);
 187:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitShiftRight(const BigUnsigned &a, int b);
 188:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 189:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* `a.divideWithRemainder(b, q)' is like `q = a / b, a %= b'.
 190:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * / and % use semantics similar to Knuth's, which differ from the
 191:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * primitive integer semantics under division by zero.  See the
 192:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * implementation in BigUnsigned.cc for details.
 193:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * `a.divideWithRemainder(b, a)' throws an exception: it doesn't make
 194:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * sense to write quotient and remainder into the same variable. */
 195:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void divideWithRemainder(const BigUnsigned &b, BigUnsigned &q);
 196:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 197:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* `divide' and `modulo' are no longer offered.  Use
 198:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * `divideWithRemainder' instead. */
 199:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 200:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// OVERLOADED RETURN-BY-VALUE OPERATORS
 201:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator +(const BigUnsigned &x) const;
 202:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator -(const BigUnsigned &x) const;
 203:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator *(const BigUnsigned &x) const;
 204:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator /(const BigUnsigned &x) const;
 205:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator %(const BigUnsigned &x) const;
 206:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* OK, maybe unary minus could succeed in one case, but it really
 207:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * shouldn't be used, so it isn't provided. */
 208:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator &(const BigUnsigned &x) const;
 209:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator |(const BigUnsigned &x) const;
 210:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator ^(const BigUnsigned &x) const;
 211:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator <<(int b) const;
 212:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator >>(int b) const;
 213:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 214:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// OVERLOADED ASSIGNMENT OPERATORS
 215:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator +=(const BigUnsigned &x);
 216:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator -=(const BigUnsigned &x);
 217:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator *=(const BigUnsigned &x);
 218:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator /=(const BigUnsigned &x);
 219:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator %=(const BigUnsigned &x);
 220:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator &=(const BigUnsigned &x);
 221:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator |=(const BigUnsigned &x);
 222:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator ^=(const BigUnsigned &x);
 223:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator <<=(int b);
 224:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator >>=(int b);
 225:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 226:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* INCREMENT/DECREMENT OPERATORS
 227:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * To discourage messy coding, these do not return *this, so prefix
 228:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * and postfix behave the same. */
 229:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator ++(   );
 230:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator ++(int);
 231:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator --(   );
 232:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator --(int);
 233:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 234:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Helper function that needs access to BigUnsigned internals
 235:../src/zxing_lib/bigint/BigUnsigned.hh **** 	friend Blk getShiftedBlock(const BigUnsigned &num, Index x,
 236:../src/zxing_lib/bigint/BigUnsigned.hh **** 			unsigned int y);
 237:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 238:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// See BigInteger.cc.
 239:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X>
 240:../src/zxing_lib/bigint/BigUnsigned.hh **** 	friend X convertBigUnsignedToPrimitiveAccess(const BigUnsigned &a);
 241:../src/zxing_lib/bigint/BigUnsigned.hh **** };
 242:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 243:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Implementing the return-by-value and assignment operators in terms of the
 244:../src/zxing_lib/bigint/BigUnsigned.hh ****  * copy-less operations.  The copy-less operations are responsible for making
 245:../src/zxing_lib/bigint/BigUnsigned.hh ****  * any necessary temporary copies to work around aliasing. */
 246:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 247:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator +(const BigUnsigned &x) const {
 248:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 249:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.add(*this, x);
 250:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 251:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 252:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator -(const BigUnsigned &x) const {
 253:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 254:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.subtract(*this, x);
 255:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 256:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 257:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator *(const BigUnsigned &x) const {
 258:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 259:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.multiply(*this, x);
 260:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 261:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 262:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator /(const BigUnsigned &x) const {
 263:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator /: division by zero";
 264:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q, r;
 265:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r = *this;
 266:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r.divideWithRemainder(x, q);
 267:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return q;
 268:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 269:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator %(const BigUnsigned &x) const {
 270:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator %: division by zero";
 271:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q, r;
 272:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r = *this;
 273:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r.divideWithRemainder(x, q);
 274:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return r;
 275:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 276:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator &(const BigUnsigned &x) const {
 277:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 278:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitAnd(*this, x);
 279:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 280:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 281:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator |(const BigUnsigned &x) const {
 282:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 283:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitOr(*this, x);
 284:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 285:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 286:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator ^(const BigUnsigned &x) const {
 287:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 288:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitXor(*this, x);
 289:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 290:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 291:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator <<(int b) const {
 292:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 293:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitShiftLeft(*this, b);
 294:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 295:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 296:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator >>(int b) const {
 297:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 298:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitShiftRight(*this, b);
 299:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 300:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 301:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 302:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator +=(const BigUnsigned &x) {
 303:../src/zxing_lib/bigint/BigUnsigned.hh **** 	add(*this, x);
 304:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 305:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator -=(const BigUnsigned &x) {
 306:../src/zxing_lib/bigint/BigUnsigned.hh **** 	subtract(*this, x);
 307:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 308:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator *=(const BigUnsigned &x) {
 309:../src/zxing_lib/bigint/BigUnsigned.hh **** 	multiply(*this, x);
 310:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 311:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator /=(const BigUnsigned &x) {
 312:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator /=: division by zero";
 313:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* The following technique is slightly faster than copying *this first
 314:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * when x is large. */
 315:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q;
 316:../src/zxing_lib/bigint/BigUnsigned.hh **** 	divideWithRemainder(x, q);
 317:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// *this contains the remainder, but we overwrite it with the quotient.
 318:../src/zxing_lib/bigint/BigUnsigned.hh **** 	*this = q;
 319:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 320:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator %=(const BigUnsigned &x) {
 321:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator %=: division by zero";
 322:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q;
 323:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Mods *this by x.  Don't care about quotient left in q.
 324:../src/zxing_lib/bigint/BigUnsigned.hh **** 	divideWithRemainder(x, q);
 325:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 326:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator &=(const BigUnsigned &x) {
 327:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitAnd(*this, x);
 328:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 329:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator |=(const BigUnsigned &x) {
 330:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitOr(*this, x);
 331:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 332:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator ^=(const BigUnsigned &x) {
 333:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitXor(*this, x);
 334:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 335:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator <<=(int b) {
 336:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitShiftLeft(*this, b);
 337:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 338:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator >>=(int b) {
 339:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitShiftRight(*this, b);
 340:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 341:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 342:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Templates for conversions of BigUnsigned to and from primitive integers.
 343:../src/zxing_lib/bigint/BigUnsigned.hh ****  * BigInteger.cc needs to instantiate convertToPrimitive, and the uses in
 344:../src/zxing_lib/bigint/BigUnsigned.hh ****  * BigUnsigned.cc didn't do the trick; I think g++ inlined convertToPrimitive
 345:../src/zxing_lib/bigint/BigUnsigned.hh ****  * instead of generating linkable instantiations.  So for consistency, I put
 346:../src/zxing_lib/bigint/BigUnsigned.hh ****  * all the templates here. */
 347:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 348:../src/zxing_lib/bigint/BigUnsigned.hh **** // CONSTRUCTION FROM PRIMITIVE INTEGERS
 349:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 350:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Initialize this BigUnsigned from the given primitive integer.  The same
 351:../src/zxing_lib/bigint/BigUnsigned.hh ****  * pattern works for all primitive integer types, so I put it into a template to
 352:../src/zxing_lib/bigint/BigUnsigned.hh ****  * reduce code duplication.  (Don't worry: this is protected and we instantiate
 353:../src/zxing_lib/bigint/BigUnsigned.hh ****  * it only with primitive integer types.)  Type X could be signed, but x is
 354:../src/zxing_lib/bigint/BigUnsigned.hh ****  * known to be nonnegative. */
 355:../src/zxing_lib/bigint/BigUnsigned.hh **** template <class X>
 356:../src/zxing_lib/bigint/BigUnsigned.hh **** void BigUnsigned::initFromPrimitive(X x) {
 357:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x == 0)
 358:../src/zxing_lib/bigint/BigUnsigned.hh **** 		; // NumberlikeArray already initialized us to zero.
 359:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else {
 360:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Create a single block.  blk is NULL; no need to delete it.
 361:../src/zxing_lib/bigint/BigUnsigned.hh **** 		cap = 1;
 362:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk = new Blk[1];
 363:../src/zxing_lib/bigint/BigUnsigned.hh **** 		len = 1;
 364:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk[0] = Blk(x);
 365:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 366:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 367:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 368:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Ditto, but first check that x is nonnegative.  I could have put the check in
 369:../src/zxing_lib/bigint/BigUnsigned.hh ****  * initFromPrimitive and let the compiler optimize it out for unsigned-type
 370:../src/zxing_lib/bigint/BigUnsigned.hh ****  * instantiations, but I wanted to avoid the warning stupidly issued by g++ for
 371:../src/zxing_lib/bigint/BigUnsigned.hh ****  * a condition that is constant in *any* instantiation, even if not in all. */
 372:../src/zxing_lib/bigint/BigUnsigned.hh **** template <class X>
 373:../src/zxing_lib/bigint/BigUnsigned.hh **** void BigUnsigned::initFromSignedPrimitive(X x) {
 374:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x < 0)
 375:../src/zxing_lib/bigint/BigUnsigned.hh **** 		throw "BigUnsigned constructor: "
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Cannot construct a BigUnsigned from a negative number";
 377:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 378:../src/zxing_lib/bigint/BigUnsigned.hh **** 		initFromPrimitive(x);
 379:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 380:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 381:../src/zxing_lib/bigint/BigUnsigned.hh **** // CONVERSION TO PRIMITIVE INTEGERS
 382:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 383:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Template with the same idea as initFromPrimitive.  This might be slightly
 384:../src/zxing_lib/bigint/BigUnsigned.hh ****  * slower than the previous version with the masks, but it's much shorter and
 385:../src/zxing_lib/bigint/BigUnsigned.hh ****  * clearer, which is the library's stated goal. */
 386:../src/zxing_lib/bigint/BigUnsigned.hh **** template <class X>
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** X BigUnsigned::convertToPrimitive() const {
 3462              		.loc 3 387 0
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 0
 3465              		@ frame_needed = 0, uses_anonymous_args = 0
 3466              	.LVL357:
 3467              	.LBB581:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 3468              		.loc 3 388 0
 3469 0000 043090E5 		ldr	r3, [r0, #4]
 3470 0004 000053E3 		cmp	r3, #0
 3471 0008 0E00000A 		beq	.L275
 3472              	.LBB582:
 389:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return 0;
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 3473              		.loc 3 391 0
 3474 000c 010053E3 		cmp	r3, #1
 3475 0010 0200001A 		bne	.L274
 3476              	.LBB583:
 392:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		X x = X(blk[0]);
 3477              		.loc 3 393 0
 3478 0014 083090E5 		ldr	r3, [r0, #8]
 3479 0018 000093E5 		ldr	r0, [r3]
 3480              	.LVL358:
 3481              	.L272:
 3482              	.LBE583:
 3483              	.LBE582:
 3484              	.LBE581:
 394:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 395:../src/zxing_lib/bigint/BigUnsigned.hh **** 		if (Blk(x) == blk[0])
 396:../src/zxing_lib/bigint/BigUnsigned.hh **** 			// Successful conversion.
 397:../src/zxing_lib/bigint/BigUnsigned.hh **** 			return x;
 398:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Otherwise fall through.
 399:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 	throw "BigUnsigned::to<Primitive>: "
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 402:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 3485              		.loc 3 402 0
 3486 001c 1EFF2FE1 		bx	lr
 3487              	.LVL359:
 3488              	.L274:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 3489              		.loc 3 387 0
 3490 0020 10402DE9 		push	{r4, lr}
 3491              		.save {r4, lr}
 3492              		.cfi_def_cfa_offset 8
 3493              		.cfi_offset 4, -8
 3494              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 3495              		.loc 3 401 0
 3496 0024 0400A0E3 		mov	r0, #4
 3497              	.LVL360:
 3498 0028 FEFFFFEB 		bl	__cxa_allocate_exception
 3499              	.LVL361:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 3500              		.loc 3 400 0
 3501 002c 003000E3 		movw	r3, #:lower16:.LC7
 3502 0030 003040E3 		movt	r3, #:upper16:.LC7
 3503 0034 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 3504              		.loc 3 401 0
 3505 0038 0020A0E3 		mov	r2, #0
 3506 003c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3507 0040 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3508 0044 FEFFFFEB 		bl	__cxa_throw
 3509              	.LVL362:
 3510              	.L275:
 3511              		.cfi_def_cfa_offset 0
 3512              		.cfi_restore 4
 3513              		.cfi_restore 14
 3514              	.LBB584:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 3515              		.loc 3 390 0
 3516 0048 0000A0E3 		mov	r0, #0
 3517              	.LVL363:
 3518 004c F2FFFFEA 		b	.L272
 3519              	.LBE584:
 3520              		.cfi_endproc
 3521              	.LFE183:
 3522              		.fnend
 3524              		.section	.text._ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v,"axG",%progbits,_ZNK10BigIntege
 3525              		.align	2
 3526              		.weak	_ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v
 3527              		.syntax unified
 3528              		.arm
 3529              		.fpu neon
 3531              	_ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v:
 3532              		.fnstart
 3533              	.LFB173:
  93:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == negative)
 3534              		.loc 1 93 0
 3535              		.cfi_startproc
 3536              		@ args = 0, pretend = 0, frame = 0
 3537              		@ frame_needed = 0, uses_anonymous_args = 0
 3538              	.LVL364:
 3539 0000 10402DE9 		push	{r4, lr}
 3540              		.save {r4, lr}
 3541              		.cfi_def_cfa_offset 8
 3542              		.cfi_offset 4, -8
 3543              		.cfi_offset 14, -4
  94:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::to<Primitive>: "
 3544              		.loc 1 94 0
 3545 0004 D030D0E1 		ldrsb	r3, [r0]
 3546 0008 010073E3 		cmn	r3, #1
 3547 000c 0200000A 		beq	.L281
 3548              	.LVL365:
 3549              	.LBB585:
 3550              	.LBB586:
  89:../src/zxing_lib/bigint/BigInteger.cpp **** }
 3551              		.loc 1 89 0
 3552 0010 040080E2 		add	r0, r0, #4
 3553              	.LVL366:
 3554 0014 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveImEET_v
 3555              	.LVL367:
 3556              	.LBE586:
 3557              	.LBE585:
  99:../src/zxing_lib/bigint/BigInteger.cpp **** 
 3558              		.loc 1 99 0
 3559 0018 1080BDE8 		pop	{r4, pc}
 3560              	.LVL368:
 3561              	.L281:
  96:../src/zxing_lib/bigint/BigInteger.cpp **** 	else
 3562              		.loc 1 96 0
 3563 001c 0400A0E3 		mov	r0, #4
 3564              	.LVL369:
 3565 0020 FEFFFFEB 		bl	__cxa_allocate_exception
 3566              	.LVL370:
  95:../src/zxing_lib/bigint/BigInteger.cpp **** 			"Cannot convert a negative integer to an unsigned type";
 3567              		.loc 1 95 0
 3568 0024 003000E3 		movw	r3, #:lower16:.LC8
 3569 0028 003040E3 		movt	r3, #:upper16:.LC8
 3570 002c 003080E5 		str	r3, [r0]
  96:../src/zxing_lib/bigint/BigInteger.cpp **** 	else
 3571              		.loc 1 96 0
 3572 0030 0020A0E3 		mov	r2, #0
 3573 0034 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3574 0038 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3575 003c FEFFFFEB 		bl	__cxa_throw
 3576              	.LVL371:
 3577              		.cfi_endproc
 3578              	.LFE173:
 3579              		.fnend
 3581              		.section	.text._ZNK10BigInteger14toUnsignedLongEv,"ax",%progbits
 3582              		.align	2
 3583              		.global	_ZNK10BigInteger14toUnsignedLongEv
 3584              		.syntax unified
 3585              		.arm
 3586              		.fpu neon
 3588              	_ZNK10BigInteger14toUnsignedLongEv:
 3589              		.fnstart
 3590              	.LFB133:
 127:../src/zxing_lib/bigint/BigInteger.cpp **** unsigned int   BigInteger::toUnsignedInt  () const { return convertToUnsignedPrimitive<unsigned int
 3591              		.loc 1 127 0
 3592              		.cfi_startproc
 3593              		@ args = 0, pretend = 0, frame = 0
 3594              		@ frame_needed = 0, uses_anonymous_args = 0
 3595              	.LVL372:
 3596 0000 10402DE9 		push	{r4, lr}
 3597              		.save {r4, lr}
 3598              		.cfi_def_cfa_offset 8
 3599              		.cfi_offset 4, -8
 3600              		.cfi_offset 14, -4
 127:../src/zxing_lib/bigint/BigInteger.cpp **** unsigned int   BigInteger::toUnsignedInt  () const { return convertToUnsignedPrimitive<unsigned int
 3601              		.loc 1 127 0
 3602 0004 FEFFFFEB 		bl	_ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v
 3603              	.LVL373:
 3604 0008 1080BDE8 		pop	{r4, pc}
 3605              		.cfi_endproc
 3606              	.LFE133:
 3607              		.fnend
 3609              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 3610              		.align	2
 3611              		.weak	_ZNK11BigUnsigned18convertToPrimitiveIjEET_v
 3612              		.syntax unified
 3613              		.arm
 3614              		.fpu neon
 3616              	_ZNK11BigUnsigned18convertToPrimitiveIjEET_v:
 3617              		.fnstart
 3618              	.LFB184:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 3619              		.loc 3 387 0
 3620              		.cfi_startproc
 3621              		@ args = 0, pretend = 0, frame = 0
 3622              		@ frame_needed = 0, uses_anonymous_args = 0
 3623              	.LVL374:
 3624              	.LBB587:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 3625              		.loc 3 388 0
 3626 0000 043090E5 		ldr	r3, [r0, #4]
 3627 0004 000053E3 		cmp	r3, #0
 3628 0008 0E00000A 		beq	.L287
 3629              	.LBB588:
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 3630              		.loc 3 391 0
 3631 000c 010053E3 		cmp	r3, #1
 3632 0010 0200001A 		bne	.L286
 3633              	.LBB589:
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 3634              		.loc 3 393 0
 3635 0014 083090E5 		ldr	r3, [r0, #8]
 3636 0018 000093E5 		ldr	r0, [r3]
 3637              	.LVL375:
 3638              	.L284:
 3639              	.LBE589:
 3640              	.LBE588:
 3641              	.LBE587:
 3642              		.loc 3 402 0
 3643 001c 1EFF2FE1 		bx	lr
 3644              	.LVL376:
 3645              	.L286:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 3646              		.loc 3 387 0
 3647 0020 10402DE9 		push	{r4, lr}
 3648              		.save {r4, lr}
 3649              		.cfi_def_cfa_offset 8
 3650              		.cfi_offset 4, -8
 3651              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 3652              		.loc 3 401 0
 3653 0024 0400A0E3 		mov	r0, #4
 3654              	.LVL377:
 3655 0028 FEFFFFEB 		bl	__cxa_allocate_exception
 3656              	.LVL378:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 3657              		.loc 3 400 0
 3658 002c 003000E3 		movw	r3, #:lower16:.LC7
 3659 0030 003040E3 		movt	r3, #:upper16:.LC7
 3660 0034 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 3661              		.loc 3 401 0
 3662 0038 0020A0E3 		mov	r2, #0
 3663 003c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3664 0040 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3665 0044 FEFFFFEB 		bl	__cxa_throw
 3666              	.LVL379:
 3667              	.L287:
 3668              		.cfi_def_cfa_offset 0
 3669              		.cfi_restore 4
 3670              		.cfi_restore 14
 3671              	.LBB590:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 3672              		.loc 3 390 0
 3673 0048 0000A0E3 		mov	r0, #0
 3674              	.LVL380:
 3675 004c F2FFFFEA 		b	.L284
 3676              	.LBE590:
 3677              		.cfi_endproc
 3678              	.LFE184:
 3679              		.fnend
 3681              		.section	.text._ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v,"axG",%progbits,_ZNK10BigIntege
 3682              		.align	2
 3683              		.weak	_ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v
 3684              		.syntax unified
 3685              		.arm
 3686              		.fpu neon
 3688              	_ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v:
 3689              		.fnstart
 3690              	.LFB174:
  93:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == negative)
 3691              		.loc 1 93 0
 3692              		.cfi_startproc
 3693              		@ args = 0, pretend = 0, frame = 0
 3694              		@ frame_needed = 0, uses_anonymous_args = 0
 3695              	.LVL381:
 3696 0000 10402DE9 		push	{r4, lr}
 3697              		.save {r4, lr}
 3698              		.cfi_def_cfa_offset 8
 3699              		.cfi_offset 4, -8
 3700              		.cfi_offset 14, -4
  94:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::to<Primitive>: "
 3701              		.loc 1 94 0
 3702 0004 D030D0E1 		ldrsb	r3, [r0]
 3703 0008 010073E3 		cmn	r3, #1
 3704 000c 0200000A 		beq	.L293
 3705              	.LVL382:
 3706              	.LBB591:
 3707              	.LBB592:
  89:../src/zxing_lib/bigint/BigInteger.cpp **** }
 3708              		.loc 1 89 0
 3709 0010 040080E2 		add	r0, r0, #4
 3710              	.LVL383:
 3711 0014 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveIjEET_v
 3712              	.LVL384:
 3713              	.LBE592:
 3714              	.LBE591:
  99:../src/zxing_lib/bigint/BigInteger.cpp **** 
 3715              		.loc 1 99 0
 3716 0018 1080BDE8 		pop	{r4, pc}
 3717              	.LVL385:
 3718              	.L293:
  96:../src/zxing_lib/bigint/BigInteger.cpp **** 	else
 3719              		.loc 1 96 0
 3720 001c 0400A0E3 		mov	r0, #4
 3721              	.LVL386:
 3722 0020 FEFFFFEB 		bl	__cxa_allocate_exception
 3723              	.LVL387:
  95:../src/zxing_lib/bigint/BigInteger.cpp **** 			"Cannot convert a negative integer to an unsigned type";
 3724              		.loc 1 95 0
 3725 0024 003000E3 		movw	r3, #:lower16:.LC8
 3726 0028 003040E3 		movt	r3, #:upper16:.LC8
 3727 002c 003080E5 		str	r3, [r0]
  96:../src/zxing_lib/bigint/BigInteger.cpp **** 	else
 3728              		.loc 1 96 0
 3729 0030 0020A0E3 		mov	r2, #0
 3730 0034 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3731 0038 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3732 003c FEFFFFEB 		bl	__cxa_throw
 3733              	.LVL388:
 3734              		.cfi_endproc
 3735              	.LFE174:
 3736              		.fnend
 3738              		.section	.text._ZNK10BigInteger13toUnsignedIntEv,"ax",%progbits
 3739              		.align	2
 3740              		.global	_ZNK10BigInteger13toUnsignedIntEv
 3741              		.syntax unified
 3742              		.arm
 3743              		.fpu neon
 3745              	_ZNK10BigInteger13toUnsignedIntEv:
 3746              		.fnstart
 3747              	.LFB134:
 128:../src/zxing_lib/bigint/BigInteger.cpp **** unsigned short BigInteger::toUnsignedShort() const { return convertToUnsignedPrimitive<unsigned sho
 3748              		.loc 1 128 0
 3749              		.cfi_startproc
 3750              		@ args = 0, pretend = 0, frame = 0
 3751              		@ frame_needed = 0, uses_anonymous_args = 0
 3752              	.LVL389:
 3753 0000 10402DE9 		push	{r4, lr}
 3754              		.save {r4, lr}
 3755              		.cfi_def_cfa_offset 8
 3756              		.cfi_offset 4, -8
 3757              		.cfi_offset 14, -4
 128:../src/zxing_lib/bigint/BigInteger.cpp **** unsigned short BigInteger::toUnsignedShort() const { return convertToUnsignedPrimitive<unsigned sho
 3758              		.loc 1 128 0
 3759 0004 FEFFFFEB 		bl	_ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v
 3760              	.LVL390:
 3761 0008 1080BDE8 		pop	{r4, pc}
 3762              		.cfi_endproc
 3763              	.LFE134:
 3764              		.fnend
 3766              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveItEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 3767              		.align	2
 3768              		.weak	_ZNK11BigUnsigned18convertToPrimitiveItEET_v
 3769              		.syntax unified
 3770              		.arm
 3771              		.fpu neon
 3773              	_ZNK11BigUnsigned18convertToPrimitiveItEET_v:
 3774              		.fnstart
 3775              	.LFB185:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 3776              		.loc 3 387 0
 3777              		.cfi_startproc
 3778              		@ args = 0, pretend = 0, frame = 0
 3779              		@ frame_needed = 0, uses_anonymous_args = 0
 3780              	.LVL391:
 3781              	.LBB593:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 3782              		.loc 3 388 0
 3783 0000 043090E5 		ldr	r3, [r0, #4]
 3784 0004 000053E3 		cmp	r3, #0
 3785 0008 1100000A 		beq	.L299
 3786              	.LBB594:
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 3787              		.loc 3 391 0
 3788 000c 010053E3 		cmp	r3, #1
 3789 0010 0500001A 		bne	.L298
 3790              	.LBB595:
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 3791              		.loc 3 393 0
 3792 0014 083090E5 		ldr	r3, [r0, #8]
 3793 0018 003093E5 		ldr	r3, [r3]
 3794 001c 7300FFE6 		uxth	r0, r3
 3795              	.LVL392:
 395:../src/zxing_lib/bigint/BigUnsigned.hh **** 			// Successful conversion.
 3796              		.loc 3 395 0
 3797 0020 030050E1 		cmp	r0, r3
 3798 0024 0000001A 		bne	.L298
 3799              	.LVL393:
 3800              	.L297:
 3801              	.LBE595:
 3802              	.LBE594:
 3803              	.LBE593:
 3804              		.loc 3 402 0
 3805 0028 1EFF2FE1 		bx	lr
 3806              	.L298:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 3807              		.loc 3 387 0
 3808 002c 10402DE9 		push	{r4, lr}
 3809              		.save {r4, lr}
 3810              		.cfi_def_cfa_offset 8
 3811              		.cfi_offset 4, -8
 3812              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 3813              		.loc 3 401 0
 3814 0030 0400A0E3 		mov	r0, #4
 3815 0034 FEFFFFEB 		bl	__cxa_allocate_exception
 3816              	.LVL394:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 3817              		.loc 3 400 0
 3818 0038 003000E3 		movw	r3, #:lower16:.LC7
 3819 003c 003040E3 		movt	r3, #:upper16:.LC7
 3820 0040 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 3821              		.loc 3 401 0
 3822 0044 0020A0E3 		mov	r2, #0
 3823 0048 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3824 004c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3825 0050 FEFFFFEB 		bl	__cxa_throw
 3826              	.LVL395:
 3827              	.L299:
 3828              		.cfi_def_cfa_offset 0
 3829              		.cfi_restore 4
 3830              		.cfi_restore 14
 3831              	.LBB596:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 3832              		.loc 3 390 0
 3833 0054 0000A0E3 		mov	r0, #0
 3834              	.LVL396:
 3835 0058 F2FFFFEA 		b	.L297
 3836              	.LBE596:
 3837              		.cfi_endproc
 3838              	.LFE185:
 3839              		.fnend
 3841              		.section	.text._ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v,"axG",%progbits,_ZNK10BigIntege
 3842              		.align	2
 3843              		.weak	_ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v
 3844              		.syntax unified
 3845              		.arm
 3846              		.fpu neon
 3848              	_ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v:
 3849              		.fnstart
 3850              	.LFB175:
  93:../src/zxing_lib/bigint/BigInteger.cpp **** 	if (sign == negative)
 3851              		.loc 1 93 0
 3852              		.cfi_startproc
 3853              		@ args = 0, pretend = 0, frame = 0
 3854              		@ frame_needed = 0, uses_anonymous_args = 0
 3855              	.LVL397:
 3856 0000 10402DE9 		push	{r4, lr}
 3857              		.save {r4, lr}
 3858              		.cfi_def_cfa_offset 8
 3859              		.cfi_offset 4, -8
 3860              		.cfi_offset 14, -4
  94:../src/zxing_lib/bigint/BigInteger.cpp **** 		throw "BigInteger::to<Primitive>: "
 3861              		.loc 1 94 0
 3862 0004 D030D0E1 		ldrsb	r3, [r0]
 3863 0008 010073E3 		cmn	r3, #1
 3864 000c 0200000A 		beq	.L305
 3865              	.LVL398:
 3866              	.LBB597:
 3867              	.LBB598:
  89:../src/zxing_lib/bigint/BigInteger.cpp **** }
 3868              		.loc 1 89 0
 3869 0010 040080E2 		add	r0, r0, #4
 3870              	.LVL399:
 3871 0014 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveItEET_v
 3872              	.LVL400:
 3873              	.LBE598:
 3874              	.LBE597:
  99:../src/zxing_lib/bigint/BigInteger.cpp **** 
 3875              		.loc 1 99 0
 3876 0018 1080BDE8 		pop	{r4, pc}
 3877              	.LVL401:
 3878              	.L305:
  96:../src/zxing_lib/bigint/BigInteger.cpp **** 	else
 3879              		.loc 1 96 0
 3880 001c 0400A0E3 		mov	r0, #4
 3881              	.LVL402:
 3882 0020 FEFFFFEB 		bl	__cxa_allocate_exception
 3883              	.LVL403:
  95:../src/zxing_lib/bigint/BigInteger.cpp **** 			"Cannot convert a negative integer to an unsigned type";
 3884              		.loc 1 95 0
 3885 0024 003000E3 		movw	r3, #:lower16:.LC8
 3886 0028 003040E3 		movt	r3, #:upper16:.LC8
 3887 002c 003080E5 		str	r3, [r0]
  96:../src/zxing_lib/bigint/BigInteger.cpp **** 	else
 3888              		.loc 1 96 0
 3889 0030 0020A0E3 		mov	r2, #0
 3890 0034 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3891 0038 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3892 003c FEFFFFEB 		bl	__cxa_throw
 3893              	.LVL404:
 3894              		.cfi_endproc
 3895              	.LFE175:
 3896              		.fnend
 3898              		.section	.text._ZNK10BigInteger15toUnsignedShortEv,"ax",%progbits
 3899              		.align	2
 3900              		.global	_ZNK10BigInteger15toUnsignedShortEv
 3901              		.syntax unified
 3902              		.arm
 3903              		.fpu neon
 3905              	_ZNK10BigInteger15toUnsignedShortEv:
 3906              		.fnstart
 3907              	.LFB135:
 129:../src/zxing_lib/bigint/BigInteger.cpp **** long           BigInteger::toLong         () const { return convertToSignedPrimitive  <long , unsig
 3908              		.loc 1 129 0
 3909              		.cfi_startproc
 3910              		@ args = 0, pretend = 0, frame = 0
 3911              		@ frame_needed = 0, uses_anonymous_args = 0
 3912              	.LVL405:
 3913 0000 10402DE9 		push	{r4, lr}
 3914              		.save {r4, lr}
 3915              		.cfi_def_cfa_offset 8
 3916              		.cfi_offset 4, -8
 3917              		.cfi_offset 14, -4
 129:../src/zxing_lib/bigint/BigInteger.cpp **** long           BigInteger::toLong         () const { return convertToSignedPrimitive  <long , unsig
 3918              		.loc 1 129 0
 3919 0004 FEFFFFEB 		bl	_ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v
 3920              	.LVL406:
 3921 0008 1080BDE8 		pop	{r4, pc}
 3922              		.cfi_endproc
 3923              	.LFE135:
 3924              		.fnend
 3926              		.section	.rodata._ZN10BigInteger19divideWithRemainderERKS_RS_.str1.4,"aMS",%progbits,1
 3927              		.align	2
 3928              	.LC6:
 3929 0000 42696749 		.ascii	"BigInteger::divideWithRemainder: Cannot write quoti"
 3929      6E746567 
 3929      65723A3A 
 3929      64697669 
 3929      64655769 
 3930 0033 656E7420 		.ascii	"ent and remainder into the same variable\000"
 3930      616E6420 
 3930      72656D61 
 3930      696E6465 
 3930      7220696E 
 3931              		.section	.rodata._ZN10BigIntegerC2EPKmjNS_4SignE.str1.4,"aMS",%progbits,1
 3932              		.align	2
 3933              	.LC1:
 3934 0000 42696749 		.ascii	"BigInteger::BigInteger(const Blk *, Index, Sign): C"
 3934      6E746567 
 3934      65723A3A 
 3934      42696749 
 3934      6E746567 
 3935 0033 616E6E6F 		.ascii	"annot use a sign of zero with a nonzero magnitude\000"
 3935      74207573 
 3935      65206120 
 3935      7369676E 
 3935      206F6620 
 3936 0065 000000   		.space	3
 3937              	.LC2:
 3938 0068 42696749 		.ascii	"BigInteger::BigInteger(const Blk *, Index, Sign): I"
 3938      6E746567 
 3938      65723A3A 
 3938      42696749 
 3938      6E746567 
 3939 009b 6E76616C 		.ascii	"nvalid sign\000"
 3939      69642073 
 3939      69676E00 
 3940              		.section	.rodata._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE.str1.4,"aMS",%progbits,1
 3941              		.align	2
 3942              	.LC3:
 3943 0000 42696749 		.ascii	"BigInteger::BigInteger(const BigUnsigned &, Sign): "
 3943      6E746567 
 3943      65723A3A 
 3943      42696749 
 3943      6E746567 
 3944 0033 43616E6E 		.ascii	"Cannot use a sign of zero with a nonzero magnitude\000"
 3944      6F742075 
 3944      73652061 
 3944      20736967 
 3944      6E206F66 
 3945 0066 0000     		.space	2
 3946              	.LC4:
 3947 0068 42696749 		.ascii	"BigInteger::BigInteger(const BigUnsigned &, Sign): "
 3947      6E746567 
 3947      65723A3A 
 3947      42696749 
 3947      6E746567 
 3948 009b 496E7661 		.ascii	"Invalid sign\000"
 3948      6C696420 
 3948      7369676E 
 3948      00
 3949              		.section	.rodata._ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v.str1.4,"aMS",%progbits,1
 3950              		.align	2
 3951              	.LC5:
 3952 0000 42696749 		.ascii	"BigInteger::to<Primitive>: Value is too big to fit "
 3952      6E746567 
 3952      65723A3A 
 3952      746F3C50 
 3952      72696D69 
 3953 0033 696E2074 		.ascii	"in the requested type\000"
 3953      68652072 
 3953      65717565 
 3953      73746564 
 3953      20747970 
 3954              		.section	.rodata._ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v.str1.4,"aMS",%progbits,1
 3955              		.align	2
 3956              	.LC8:
 3957 0000 42696749 		.ascii	"BigInteger::to<Primitive>: Cannot convert a negativ"
 3957      6E746567 
 3957      65723A3A 
 3957      746F3C50 
 3957      72696D69 
 3958 0033 6520696E 		.ascii	"e integer to an unsigned type\000"
 3958      74656765 
 3958      7220746F 
 3958      20616E20 
 3958      756E7369 
 3959              		.section	.rodata._ZNK10BigInteger9compareToERKS_.str1.4,"aMS",%progbits,1
 3960              		.align	2
 3961              	.LC0:
 3962 0000 42696749 		.ascii	"BigInteger internal error\000"
 3962      6E746567 
 3962      65722069 
 3962      6E746572 
 3962      6E616C20 
 3963              		.section	.rodata._ZNK11BigUnsigned18convertToPrimitiveImEET_v.str1.4,"aMS",%progbits,1
 3964              		.align	2
 3965              	.LC7:
 3966 0000 42696755 		.ascii	"BigUnsigned::to<Primitive>: Value is too big to fit"
 3966      6E736967 
 3966      6E65643A 
 3966      3A746F3C 
 3966      5072696D 
 3967 0033 20696E20 		.ascii	" in the requested type\000"
 3967      74686520 
 3967      72657175 
 3967      65737465 
 3967      64207479 
 3968              		.text
 3969              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 BigInteger.cpp
     /tmp/ccTTdpnU.s:17     .text._ZN12_GLOBAL__N_16signOfIlEEN10BigInteger4SignET_:0000000000000000 $a
     /tmp/ccTTdpnU.s:22     .text._ZN12_GLOBAL__N_16signOfIlEEN10BigInteger4SignET_:0000000000000000 _ZN12_GLOBAL__N_16signOfIlEEN10BigInteger4SignET_
.ARM.exidx.text._ZN12_GLOBAL__N_16signOfIlEEN10BigInteger4SignET_:0000000000000000 $d
     /tmp/ccTTdpnU.s:59     .text._ZN12_GLOBAL__N_15magOfIlmEEmT_:0000000000000000 $a
     /tmp/ccTTdpnU.s:64     .text._ZN12_GLOBAL__N_15magOfIlmEEmT_:0000000000000000 _ZN12_GLOBAL__N_15magOfIlmEEmT_
.ARM.exidx.text._ZN12_GLOBAL__N_15magOfIlmEEmT_:0000000000000000 $d
     /tmp/ccTTdpnU.s:84     .text._ZN12_GLOBAL__N_16signOfIiEEN10BigInteger4SignET_:0000000000000000 $a
     /tmp/ccTTdpnU.s:89     .text._ZN12_GLOBAL__N_16signOfIiEEN10BigInteger4SignET_:0000000000000000 _ZN12_GLOBAL__N_16signOfIiEEN10BigInteger4SignET_
.ARM.exidx.text._ZN12_GLOBAL__N_16signOfIiEEN10BigInteger4SignET_:0000000000000000 $d
     /tmp/ccTTdpnU.s:125    .text._ZN12_GLOBAL__N_15magOfIijEEmT_:0000000000000000 $a
     /tmp/ccTTdpnU.s:130    .text._ZN12_GLOBAL__N_15magOfIijEEmT_:0000000000000000 _ZN12_GLOBAL__N_15magOfIijEEmT_
.ARM.exidx.text._ZN12_GLOBAL__N_15magOfIijEEmT_:0000000000000000 $d
     /tmp/ccTTdpnU.s:150    .text._ZN12_GLOBAL__N_16signOfIsEEN10BigInteger4SignET_:0000000000000000 $a
     /tmp/ccTTdpnU.s:155    .text._ZN12_GLOBAL__N_16signOfIsEEN10BigInteger4SignET_:0000000000000000 _ZN12_GLOBAL__N_16signOfIsEEN10BigInteger4SignET_
.ARM.exidx.text._ZN12_GLOBAL__N_16signOfIsEEN10BigInteger4SignET_:0000000000000000 $d
     /tmp/ccTTdpnU.s:187    .text._ZN12_GLOBAL__N_15magOfIstEEmT_:0000000000000000 $a
     /tmp/ccTTdpnU.s:192    .text._ZN12_GLOBAL__N_15magOfIstEEmT_:0000000000000000 _ZN12_GLOBAL__N_15magOfIstEEmT_
.ARM.exidx.text._ZN12_GLOBAL__N_15magOfIstEEmT_:0000000000000000 $d
     /tmp/ccTTdpnU.s:216    .text._ZN10BigIntegerC2Em:0000000000000000 $a
     /tmp/ccTTdpnU.s:222    .text._ZN10BigIntegerC2Em:0000000000000000 _ZN10BigIntegerC2Em
.ARM.exidx.text._ZN10BigIntegerC2Em:0000000000000000 $d
     /tmp/ccTTdpnU.s:222    .text._ZN10BigIntegerC2Em:0000000000000000 _ZN10BigIntegerC1Em
     /tmp/ccTTdpnU.s:268    .text._ZN10BigIntegerC2Ej:0000000000000000 $a
     /tmp/ccTTdpnU.s:274    .text._ZN10BigIntegerC2Ej:0000000000000000 _ZN10BigIntegerC2Ej
.ARM.exidx.text._ZN10BigIntegerC2Ej:0000000000000000 $d
     /tmp/ccTTdpnU.s:274    .text._ZN10BigIntegerC2Ej:0000000000000000 _ZN10BigIntegerC1Ej
     /tmp/ccTTdpnU.s:319    .text._ZN10BigIntegerC2Et:0000000000000000 $a
     /tmp/ccTTdpnU.s:325    .text._ZN10BigIntegerC2Et:0000000000000000 _ZN10BigIntegerC2Et
.ARM.exidx.text._ZN10BigIntegerC2Et:0000000000000000 $d
     /tmp/ccTTdpnU.s:325    .text._ZN10BigIntegerC2Et:0000000000000000 _ZN10BigIntegerC1Et
     /tmp/ccTTdpnU.s:370    .text._ZN10BigIntegerC2El:0000000000000000 $a
     /tmp/ccTTdpnU.s:376    .text._ZN10BigIntegerC2El:0000000000000000 _ZN10BigIntegerC2El
.ARM.exidx.text._ZN10BigIntegerC2El:0000000000000000 $d
     /tmp/ccTTdpnU.s:376    .text._ZN10BigIntegerC2El:0000000000000000 _ZN10BigIntegerC1El
     /tmp/ccTTdpnU.s:418    .text._ZN10BigIntegerC2Ei:0000000000000000 $a
     /tmp/ccTTdpnU.s:424    .text._ZN10BigIntegerC2Ei:0000000000000000 _ZN10BigIntegerC2Ei
.ARM.exidx.text._ZN10BigIntegerC2Ei:0000000000000000 $d
     /tmp/ccTTdpnU.s:424    .text._ZN10BigIntegerC2Ei:0000000000000000 _ZN10BigIntegerC1Ei
     /tmp/ccTTdpnU.s:466    .text._ZN10BigIntegerC2Es:0000000000000000 $a
     /tmp/ccTTdpnU.s:472    .text._ZN10BigIntegerC2Es:0000000000000000 _ZN10BigIntegerC2Es
.ARM.exidx.text._ZN10BigIntegerC2Es:0000000000000000 $d
     /tmp/ccTTdpnU.s:472    .text._ZN10BigIntegerC2Es:0000000000000000 _ZN10BigIntegerC1Es
     /tmp/ccTTdpnU.s:514    .text._ZNK10BigInteger9compareToERKS_:0000000000000000 $a
     /tmp/ccTTdpnU.s:520    .text._ZNK10BigInteger9compareToERKS_:0000000000000000 _ZNK10BigInteger9compareToERKS_
     /tmp/ccTTdpnU.s:3961   .rodata._ZNK10BigInteger9compareToERKS_.str1.4:0000000000000000 .LC0
.ARM.exidx.text._ZNK10BigInteger9compareToERKS_:0000000000000000 $d
     /tmp/ccTTdpnU.s:610    .text._ZN15NumberlikeArrayImEC2EPKmj:0000000000000000 $a
     /tmp/ccTTdpnU.s:616    .text._ZN15NumberlikeArrayImEC2EPKmj:0000000000000000 _ZN15NumberlikeArrayImEC2EPKmj
.ARM.exidx.text._ZN15NumberlikeArrayImEC2EPKmj:0000000000000000 $d
     /tmp/ccTTdpnU.s:616    .text._ZN15NumberlikeArrayImEC2EPKmj:0000000000000000 _ZN15NumberlikeArrayImEC1EPKmj
     /tmp/ccTTdpnU.s:682    .text._ZN10BigIntegerC2EPKmjNS_4SignE:0000000000000000 $a
     /tmp/ccTTdpnU.s:688    .text._ZN10BigIntegerC2EPKmjNS_4SignE:0000000000000000 _ZN10BigIntegerC2EPKmjNS_4SignE
     /tmp/ccTTdpnU.s:3937   .rodata._ZN10BigIntegerC2EPKmjNS_4SignE.str1.4:0000000000000068 .LC2
     /tmp/ccTTdpnU.s:3933   .rodata._ZN10BigIntegerC2EPKmjNS_4SignE.str1.4:0000000000000000 .LC1
.ARM.extab.text._ZN10BigIntegerC2EPKmjNS_4SignE:0000000000000000 $d
.ARM.exidx.text._ZN10BigIntegerC2EPKmjNS_4SignE:0000000000000000 $d
     /tmp/ccTTdpnU.s:688    .text._ZN10BigIntegerC2EPKmjNS_4SignE:0000000000000000 _ZN10BigIntegerC1EPKmjNS_4SignE
     /tmp/ccTTdpnU.s:877    .text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 $a
     /tmp/ccTTdpnU.s:883    .text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 _ZN15NumberlikeArrayImEC2ERKS0_
.ARM.exidx.text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 $d
     /tmp/ccTTdpnU.s:883    .text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 _ZN15NumberlikeArrayImEC1ERKS0_
     /tmp/ccTTdpnU.s:952    .text._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE:0000000000000000 $a
     /tmp/ccTTdpnU.s:958    .text._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE:0000000000000000 _ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE
     /tmp/ccTTdpnU.s:3946   .rodata._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE.str1.4:0000000000000068 .LC4
     /tmp/ccTTdpnU.s:3942   .rodata._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE.str1.4:0000000000000000 .LC3
.ARM.extab.text._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE:0000000000000000 $d
.ARM.exidx.text._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE:0000000000000000 $d
     /tmp/ccTTdpnU.s:958    .text._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE:0000000000000000 _ZN10BigIntegerC1ERK11BigUnsignedNS_4SignE
     /tmp/ccTTdpnU.s:1121   .text._ZNK15NumberlikeArrayImEeqERKS0_:0000000000000000 $a
     /tmp/ccTTdpnU.s:1127   .text._ZNK15NumberlikeArrayImEeqERKS0_:0000000000000000 _ZNK15NumberlikeArrayImEeqERKS0_
.ARM.exidx.text._ZNK15NumberlikeArrayImEeqERKS0_:0000000000000000 $d
     /tmp/ccTTdpnU.s:1188   .text._ZN10BigIntegerppEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:1194   .text._ZN10BigIntegerppEv:0000000000000000 _ZN10BigIntegerppEv
.ARM.exidx.text._ZN10BigIntegerppEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:1283   .text._ZN10BigIntegerppEi:0000000000000000 $a
     /tmp/ccTTdpnU.s:1289   .text._ZN10BigIntegerppEi:0000000000000000 _ZN10BigIntegerppEi
.ARM.exidx.text._ZN10BigIntegerppEi:0000000000000000 $d
     /tmp/ccTTdpnU.s:1311   .text._ZN10BigIntegermmEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:1317   .text._ZN10BigIntegermmEv:0000000000000000 _ZN10BigIntegermmEv
.ARM.exidx.text._ZN10BigIntegermmEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:1406   .text._ZN10BigIntegermmEi:0000000000000000 $a
     /tmp/ccTTdpnU.s:1412   .text._ZN10BigIntegermmEi:0000000000000000 _ZN10BigIntegermmEi
.ARM.exidx.text._ZN10BigIntegermmEi:0000000000000000 $d
     /tmp/ccTTdpnU.s:1434   .text._ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:1440   .text._ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v:0000000000000000 _ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v
     /tmp/ccTTdpnU.s:3951   .rodata._ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v.str1.4:0000000000000000 .LC5
.ARM.exidx.text._ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:1562   .text._ZNK10BigInteger6toLongEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:1568   .text._ZNK10BigInteger6toLongEv:0000000000000000 _ZNK10BigInteger6toLongEv
.ARM.exidx.text._ZNK10BigInteger6toLongEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:1590   .text._ZNK10BigInteger24convertToSignedPrimitiveIijEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:1596   .text._ZNK10BigInteger24convertToSignedPrimitiveIijEET_v:0000000000000000 _ZNK10BigInteger24convertToSignedPrimitiveIijEET_v
.ARM.exidx.text._ZNK10BigInteger24convertToSignedPrimitiveIijEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:1718   .text._ZNK10BigInteger5toIntEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:1724   .text._ZNK10BigInteger5toIntEv:0000000000000000 _ZNK10BigInteger5toIntEv
.ARM.exidx.text._ZNK10BigInteger5toIntEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:1746   .text._ZNK10BigInteger24convertToSignedPrimitiveIstEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:1752   .text._ZNK10BigInteger24convertToSignedPrimitiveIstEET_v:0000000000000000 _ZNK10BigInteger24convertToSignedPrimitiveIstEET_v
.ARM.exidx.text._ZNK10BigInteger24convertToSignedPrimitiveIstEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:1883   .text._ZNK10BigInteger7toShortEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:1889   .text._ZNK10BigInteger7toShortEv:0000000000000000 _ZNK10BigInteger7toShortEv
.ARM.exidx.text._ZNK10BigInteger7toShortEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:1911   .text._ZN15NumberlikeArrayImE8allocateEj:0000000000000000 $a
     /tmp/ccTTdpnU.s:1917   .text._ZN15NumberlikeArrayImE8allocateEj:0000000000000000 _ZN15NumberlikeArrayImE8allocateEj
.ARM.exidx.text._ZN15NumberlikeArrayImE8allocateEj:0000000000000000 $d
     /tmp/ccTTdpnU.s:1968   .text._ZN15NumberlikeArrayImEaSERKS0_:0000000000000000 $a
     /tmp/ccTTdpnU.s:1974   .text._ZN15NumberlikeArrayImEaSERKS0_:0000000000000000 _ZN15NumberlikeArrayImEaSERKS0_
.ARM.exidx.text._ZN15NumberlikeArrayImEaSERKS0_:0000000000000000 $d
     /tmp/ccTTdpnU.s:2024   .text._ZN10BigIntegeraSERKS_:0000000000000000 $a
     /tmp/ccTTdpnU.s:2030   .text._ZN10BigIntegeraSERKS_:0000000000000000 _ZN10BigIntegeraSERKS_
.ARM.exidx.text._ZN10BigIntegeraSERKS_:0000000000000000 $d
     /tmp/ccTTdpnU.s:2065   .text._ZN10BigInteger3addERKS_S1_:0000000000000000 $a
     /tmp/ccTTdpnU.s:2071   .text._ZN10BigInteger3addERKS_S1_:0000000000000000 _ZN10BigInteger3addERKS_S1_
.ARM.extab.text._ZN10BigInteger3addERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN10BigInteger3addERKS_S1_:0000000000000000 $d
     /tmp/ccTTdpnU.s:2359   .text._ZN10BigInteger8subtractERKS_S1_:0000000000000000 $a
     /tmp/ccTTdpnU.s:2365   .text._ZN10BigInteger8subtractERKS_S1_:0000000000000000 _ZN10BigInteger8subtractERKS_S1_
.ARM.extab.text._ZN10BigInteger8subtractERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN10BigInteger8subtractERKS_S1_:0000000000000000 $d
     /tmp/ccTTdpnU.s:2663   .text._ZN10BigInteger8multiplyERKS_S1_:0000000000000000 $a
     /tmp/ccTTdpnU.s:2669   .text._ZN10BigInteger8multiplyERKS_S1_:0000000000000000 _ZN10BigInteger8multiplyERKS_S1_
.ARM.extab.text._ZN10BigInteger8multiplyERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN10BigInteger8multiplyERKS_S1_:0000000000000000 $d
     /tmp/ccTTdpnU.s:2900   .text._ZN10BigInteger19divideWithRemainderERKS_RS_:0000000000000000 $a
     /tmp/ccTTdpnU.s:2906   .text._ZN10BigInteger19divideWithRemainderERKS_RS_:0000000000000000 _ZN10BigInteger19divideWithRemainderERKS_RS_
     /tmp/ccTTdpnU.s:3928   .rodata._ZN10BigInteger19divideWithRemainderERKS_RS_.str1.4:0000000000000000 .LC6
.ARM.extab.text._ZN10BigInteger19divideWithRemainderERKS_RS_:0000000000000000 $d
.ARM.exidx.text._ZN10BigInteger19divideWithRemainderERKS_RS_:0000000000000000 $d
     /tmp/ccTTdpnU.s:3291   .text._ZN10BigInteger6negateERKS_:0000000000000000 $a
     /tmp/ccTTdpnU.s:3297   .text._ZN10BigInteger6negateERKS_:0000000000000000 _ZN10BigInteger6negateERKS_
.ARM.extab.text._ZN10BigInteger6negateERKS_:0000000000000000 $d
.ARM.exidx.text._ZN10BigInteger6negateERKS_:0000000000000000 $d
     /tmp/ccTTdpnU.s:3453   .text._ZNK11BigUnsigned18convertToPrimitiveImEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:3459   .text._ZNK11BigUnsigned18convertToPrimitiveImEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveImEET_v
     /tmp/ccTTdpnU.s:3965   .rodata._ZNK11BigUnsigned18convertToPrimitiveImEET_v.str1.4:0000000000000000 .LC7
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveImEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:3525   .text._ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:3531   .text._ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v:0000000000000000 _ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v
     /tmp/ccTTdpnU.s:3956   .rodata._ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v.str1.4:0000000000000000 .LC8
.ARM.exidx.text._ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:3582   .text._ZNK10BigInteger14toUnsignedLongEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:3588   .text._ZNK10BigInteger14toUnsignedLongEv:0000000000000000 _ZNK10BigInteger14toUnsignedLongEv
.ARM.exidx.text._ZNK10BigInteger14toUnsignedLongEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:3610   .text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:3616   .text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveIjEET_v
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:3682   .text._ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:3688   .text._ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v:0000000000000000 _ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v
.ARM.exidx.text._ZNK10BigInteger26convertToUnsignedPrimitiveIjEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:3739   .text._ZNK10BigInteger13toUnsignedIntEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:3745   .text._ZNK10BigInteger13toUnsignedIntEv:0000000000000000 _ZNK10BigInteger13toUnsignedIntEv
.ARM.exidx.text._ZNK10BigInteger13toUnsignedIntEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:3767   .text._ZNK11BigUnsigned18convertToPrimitiveItEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:3773   .text._ZNK11BigUnsigned18convertToPrimitiveItEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveItEET_v
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveItEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:3842   .text._ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v:0000000000000000 $a
     /tmp/ccTTdpnU.s:3848   .text._ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v:0000000000000000 _ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v
.ARM.exidx.text._ZNK10BigInteger26convertToUnsignedPrimitiveItEET_v:0000000000000000 $d
     /tmp/ccTTdpnU.s:3899   .text._ZNK10BigInteger15toUnsignedShortEv:0000000000000000 $a
     /tmp/ccTTdpnU.s:3905   .text._ZNK10BigInteger15toUnsignedShortEv:0000000000000000 _ZNK10BigInteger15toUnsignedShortEv
.ARM.exidx.text._ZNK10BigInteger15toUnsignedShortEv:0000000000000000 $d
     /tmp/ccTTdpnU.s:3927   .rodata._ZN10BigInteger19divideWithRemainderERKS_RS_.str1.4:0000000000000000 $d
     /tmp/ccTTdpnU.s:3932   .rodata._ZN10BigIntegerC2EPKmjNS_4SignE.str1.4:0000000000000000 $d
     /tmp/ccTTdpnU.s:3941   .rodata._ZN10BigIntegerC2ERK11BigUnsignedNS_4SignE.str1.4:0000000000000000 $d
     /tmp/ccTTdpnU.s:3950   .rodata._ZNK10BigInteger24convertToSignedPrimitiveIlmEET_v.str1.4:0000000000000000 $d
     /tmp/ccTTdpnU.s:3955   .rodata._ZNK10BigInteger26convertToUnsignedPrimitiveImEET_v.str1.4:0000000000000000 $d
     /tmp/ccTTdpnU.s:3960   .rodata._ZNK10BigInteger9compareToERKS_.str1.4:0000000000000000 $d
     /tmp/ccTTdpnU.s:3964   .rodata._ZNK11BigUnsigned18convertToPrimitiveImEET_v.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 _ZN15NumberlikeArrayImEC5EPKmj
                           .group:0000000000000000 _ZN15NumberlikeArrayImEC5ERKS0_
                           .group:0000000000000000 wm4.0.cd1e96de8a8c4f34e746a820772853ad
                           .group:0000000000000000 wm4.NumberlikeArray.hh.2.7b7601590c187b821715f11913579205

UNDEFINED SYMBOLS
_ZN11BigUnsignedC1Em
__aeabi_unwind_cpp_pr0
_ZN11BigUnsignedC1Ej
_ZN11BigUnsignedC1Et
__cxa_allocate_exception
_ZTIPKc
__cxa_throw
_ZNK11BigUnsigned9compareToERKS_
_Znaj
__cxa_throw_bad_array_new_length
__gxx_personality_v0
_ZdaPv
__cxa_end_cleanup
_ZN11BigUnsignedppEi
_ZN11BigUnsignedmmEi
_ZN11BigUnsignedC1Ei
_ZN11BigUnsigned8subtractERKS_S1_
_ZN11BigUnsigned3addERKS_S1_
_ZN11BigUnsigned8multiplyERKS_S1_
_ZN11BigUnsigned19divideWithRemainderERKS_RS_
