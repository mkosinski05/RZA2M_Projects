   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"BigUnsigned.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZNK11BigUnsigned9bitLengthEv,"ax",%progbits
  17              		.align	2
  18              		.global	_ZNK11BigUnsigned9bitLengthEv
  19              		.syntax unified
  20              		.arm
  21              		.fpu neon
  23              	_ZNK11BigUnsigned9bitLengthEv:
  24              		.fnstart
  25              	.LFB89:
  26              		.file 1 "../src/zxing_lib/bigint/BigUnsigned.cpp"
   1:../src/zxing_lib/bigint/BigUnsigned.cpp **** #include "BigUnsigned.hh"
   2:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
   3:../src/zxing_lib/bigint/BigUnsigned.cpp **** // Memory management definitions have moved to the bottom of NumberlikeArray.hh.
   4:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
   5:../src/zxing_lib/bigint/BigUnsigned.cpp **** // The templates used by these constructors and converters are at the bottom of
   6:../src/zxing_lib/bigint/BigUnsigned.cpp **** // BigUnsigned.hh.
   7:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
   8:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned long  x) { initFromPrimitive      (x); }
   9:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned int   x) { initFromPrimitive      (x); }
  10:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned short x) { initFromPrimitive      (x); }
  11:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         long  x) { initFromSignedPrimitive(x); }
  12:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         int   x) { initFromSignedPrimitive(x); }
  13:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         short x) { initFromSignedPrimitive(x); }
  14:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  15:../src/zxing_lib/bigint/BigUnsigned.cpp **** unsigned long  BigUnsigned::toUnsignedLong () const { return convertToPrimitive      <unsigned long
  16:../src/zxing_lib/bigint/BigUnsigned.cpp **** unsigned int   BigUnsigned::toUnsignedInt  () const { return convertToPrimitive      <unsigned int 
  17:../src/zxing_lib/bigint/BigUnsigned.cpp **** unsigned short BigUnsigned::toUnsignedShort() const { return convertToPrimitive      <unsigned shor
  18:../src/zxing_lib/bigint/BigUnsigned.cpp **** long           BigUnsigned::toLong         () const { return convertToSignedPrimitive<         long
  19:../src/zxing_lib/bigint/BigUnsigned.cpp **** int            BigUnsigned::toInt          () const { return convertToSignedPrimitive<         int 
  20:../src/zxing_lib/bigint/BigUnsigned.cpp **** short          BigUnsigned::toShort        () const { return convertToSignedPrimitive<         shor
  21:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  22:../src/zxing_lib/bigint/BigUnsigned.cpp **** // BIT/BLOCK ACCESSORS
  23:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  24:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::setBlock(Index i, Blk newBlock) {
  25:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (newBlock == 0) {
  26:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (i < len) {
  27:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			blk[i] = 0;
  28:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			zapLeadingZeros();
  29:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
  30:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If i >= len, no effect.
  31:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else {
  32:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (i >= len) {
  33:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// The nonzero block extends the number.
  34:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			allocateAndCopy(i+1);
  35:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// Zero any added blocks that we aren't setting.
  36:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			for (Index j = len; j < i; j++)
  37:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[j] = 0;
  38:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			len = i+1;
  39:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
  40:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = newBlock;
  41:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
  42:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
  43:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  44:../src/zxing_lib/bigint/BigUnsigned.cpp **** /* Evidently the compiler wants BigUnsigned:: on the return type because, at
  45:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * that point, it hasn't yet parsed the BigUnsigned:: on the name to get the
  46:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * proper scope. */
  47:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::Index BigUnsigned::bitLength() const {
  27              		.loc 1 47 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.LBB252:
  34              	.LBB253:
  35              	.LBB254:
  36              	.LBB255:
  37              		.file 2 "../src/zxing_lib/bigint/NumberlikeArray.hh"
   1:../src/zxing_lib/bigint/NumberlikeArray.hh **** #ifndef NUMBERLIKEARRAY_H
   2:../src/zxing_lib/bigint/NumberlikeArray.hh **** #define NUMBERLIKEARRAY_H
   3:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
   4:../src/zxing_lib/bigint/NumberlikeArray.hh **** // Make sure we have NULL.
   5:../src/zxing_lib/bigint/NumberlikeArray.hh **** #ifndef NULL
   6:../src/zxing_lib/bigint/NumberlikeArray.hh **** #define NULL 0
   7:../src/zxing_lib/bigint/NumberlikeArray.hh **** #endif
   8:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
   9:../src/zxing_lib/bigint/NumberlikeArray.hh **** /* A NumberlikeArray<Blk> object holds a heap-allocated array of Blk with a
  10:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * length and a capacity and provides basic memory management features.
  11:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * BigUnsigned and BigUnsignedInABase both subclass it.
  12:../src/zxing_lib/bigint/NumberlikeArray.hh ****  *
  13:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * NumberlikeArray provides no information hiding.  Subclasses should use
  14:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * nonpublic inheritance and manually expose members as desired using
  15:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * declarations like this:
  16:../src/zxing_lib/bigint/NumberlikeArray.hh ****  *
  17:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * public:
  18:../src/zxing_lib/bigint/NumberlikeArray.hh ****  *     NumberlikeArray< the-type-argument >::getLength;
  19:../src/zxing_lib/bigint/NumberlikeArray.hh ****  */
  20:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
  21:../src/zxing_lib/bigint/NumberlikeArray.hh **** class NumberlikeArray {
  22:../src/zxing_lib/bigint/NumberlikeArray.hh **** public:
  23:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  24:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Type for the index of a block in the array
  25:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	typedef unsigned int Index;
  26:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// The number of bits in a block, defined below.
  27:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	static const unsigned int N;
  28:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  29:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// The current allocated capacity of this NumberlikeArray (in blocks)
  30:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index cap;
  31:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// The actual length of the value stored in this NumberlikeArray (in blocks)
  32:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index len;
  33:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Heap-allocated array of the blocks (can be NULL if len == 0)
  34:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Blk *blk;
  35:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  36:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Constructs a ``zero'' NumberlikeArray with the given capacity.
  37:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray(Index c) : cap(c), len(0) { 
  38:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = (cap > 0) ? (new Blk[cap]) : NULL;
  39:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  40:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  41:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Constructs a zero NumberlikeArray without allocating a backing array.
  42:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * A subclass that doesn't know the needed capacity at initialization
  43:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * time can use this constructor and then overwrite blk without first
  44:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * deleting it. */
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray() : cap(0), len(0) {
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
  47:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  48:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  49:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Destructor.  Note that `delete NULL' is a no-op.
  50:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	~NumberlikeArray() {
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		delete [] blk;
  52:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  53:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  54:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Ensures that the array has at least the requested capacity; may
  55:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * destroy the contents. */
  56:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	void allocate(Index c);
  57:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  58:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Ensures that the array has at least the requested capacity; does not
  59:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * destroy the contents. */
  60:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	void allocateAndCopy(Index c);
  61:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  62:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy constructor
  63:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray(const NumberlikeArray<Blk> &x);
  64:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  65:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Assignment operator
  66:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	void operator=(const NumberlikeArray<Blk> &x);
  67:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  68:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Constructor that copies from a given array of blocks
  69:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	NumberlikeArray(const Blk *b, Index blen);
  70:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  71:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// ACCESSORS
  72:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index getCapacity()     const { return cap;      }
  73:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index getLength()       const { return len;      }
  74:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Blk   getBlock(Index i) const { return blk[i];   }
  75:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	bool  isEmpty()         const { return len == 0; }
  38              		.loc 2 75 0
  39 0000 042090E5 		ldr	r2, [r0, #4]
  40              	.LVL1:
  41              	.LBE255:
  42              	.LBE254:
  43              	.LBE253:
  48:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (isZero())
  44              		.loc 1 48 0
  45 0004 000052E3 		cmp	r2, #0
  46 0008 0F00000A 		beq	.L6
  47              	.LBB256:
  49:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return 0;
  50:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else {
  51:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		Blk leftmostBlock = getBlock(len - 1);
  48              		.loc 1 51 0
  49 000c 013042E2 		sub	r3, r2, #1
  50              	.LVL2:
  51              	.LBB257:
  52              	.LBB258:
  53              		.file 3 "../src/zxing_lib/bigint/BigUnsigned.hh"
   1:../src/zxing_lib/bigint/BigUnsigned.hh **** #ifndef BIGUNSIGNED_H
   2:../src/zxing_lib/bigint/BigUnsigned.hh **** #define BIGUNSIGNED_H
   3:../src/zxing_lib/bigint/BigUnsigned.hh **** 
   4:../src/zxing_lib/bigint/BigUnsigned.hh **** #include "NumberlikeArray.hh"
   5:../src/zxing_lib/bigint/BigUnsigned.hh **** 
   6:../src/zxing_lib/bigint/BigUnsigned.hh **** /* A BigUnsigned object represents a nonnegative integer of size limited only by
   7:../src/zxing_lib/bigint/BigUnsigned.hh ****  * available memory.  BigUnsigneds support most mathematical operators and can
   8:../src/zxing_lib/bigint/BigUnsigned.hh ****  * be converted to and from most primitive integer types.
   9:../src/zxing_lib/bigint/BigUnsigned.hh ****  *
  10:../src/zxing_lib/bigint/BigUnsigned.hh ****  * The number is stored as a NumberlikeArray of unsigned longs as if it were
  11:../src/zxing_lib/bigint/BigUnsigned.hh ****  * written in base 256^sizeof(unsigned long).  The least significant block is
  12:../src/zxing_lib/bigint/BigUnsigned.hh ****  * first, and the length is such that the most significant block is nonzero. */
  13:../src/zxing_lib/bigint/BigUnsigned.hh **** class BigUnsigned : protected NumberlikeArray<unsigned long> {
  14:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  15:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  16:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Enumeration for the result of a comparison.
  17:../src/zxing_lib/bigint/BigUnsigned.hh **** 	enum CmpRes { less = -1, equal = 0, greater = 1 };
  18:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  19:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// BigUnsigneds are built with a Blk type of unsigned long.
  20:../src/zxing_lib/bigint/BigUnsigned.hh **** 	typedef unsigned long Blk;
  21:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  22:../src/zxing_lib/bigint/BigUnsigned.hh **** 	typedef NumberlikeArray<Blk>::Index Index;
  23:../src/zxing_lib/bigint/BigUnsigned.hh **** 	using NumberlikeArray<Blk>::N;
  24:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  25:../src/zxing_lib/bigint/BigUnsigned.hh **** protected:
  26:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Creates a BigUnsigned with a capacity; for internal use.
  27:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(int, Index c) : NumberlikeArray<Blk>(0, c) {}
  28:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  29:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Decreases len to eliminate any leading zero blocks.
  30:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void zapLeadingZeros() { 
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 		while (len > 0 && blk[len - 1] == 0)
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
  33:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
  34:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  35:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  36:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Constructs zero.
  37:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned() : NumberlikeArray<Blk>() {}
  38:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  39:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Copy constructor
  40:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(const BigUnsigned &x) : NumberlikeArray<Blk>(x) {}
  41:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  42:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Assignment operator
  43:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator=(const BigUnsigned &x) {
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 		NumberlikeArray<Blk>::operator =(x);
  45:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
  46:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  47:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Constructor that copies from a given array of blocks.
  48:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(const Blk *b, Index blen) : NumberlikeArray<Blk>(b, blen) {
  49:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Eliminate any leading zeros we may have been passed.
  50:../src/zxing_lib/bigint/BigUnsigned.hh **** 		zapLeadingZeros();
  51:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
  52:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  53:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Destructor.  NumberlikeArray does the delete for us.
  54:../src/zxing_lib/bigint/BigUnsigned.hh **** 	~BigUnsigned() {}
  55:../src/zxing_lib/bigint/BigUnsigned.hh **** 	
  56:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Constructors from primitive integer types
  57:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(unsigned long  x);
  58:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(         long  x);
  59:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(unsigned int   x);
  60:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(         int   x);
  61:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(unsigned short x);
  62:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned(         short x);
  63:../src/zxing_lib/bigint/BigUnsigned.hh **** protected:
  64:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Helpers
  65:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> void initFromPrimitive      (X x);
  66:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> void initFromSignedPrimitive(X x);
  67:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  68:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  69:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Converters to primitive integer types
  70:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * The implicit conversion operators caused trouble, so these are now
  71:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * named. */
  72:../src/zxing_lib/bigint/BigUnsigned.hh **** 	unsigned long  toUnsignedLong () const;
  73:../src/zxing_lib/bigint/BigUnsigned.hh **** 	long           toLong         () const;
  74:../src/zxing_lib/bigint/BigUnsigned.hh **** 	unsigned int   toUnsignedInt  () const;
  75:../src/zxing_lib/bigint/BigUnsigned.hh **** 	int            toInt          () const;
  76:../src/zxing_lib/bigint/BigUnsigned.hh **** 	unsigned short toUnsignedShort() const;
  77:../src/zxing_lib/bigint/BigUnsigned.hh **** 	short          toShort        () const;
  78:../src/zxing_lib/bigint/BigUnsigned.hh **** protected:
  79:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Helpers
  80:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> X convertToSignedPrimitive() const;
  81:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X> X convertToPrimitive      () const;
  82:../src/zxing_lib/bigint/BigUnsigned.hh **** public:
  83:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  84:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// BIT/BLOCK ACCESSORS
  85:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  86:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Expose these from NumberlikeArray directly.
  87:../src/zxing_lib/bigint/BigUnsigned.hh **** 	using NumberlikeArray<Blk>::getCapacity;
  88:../src/zxing_lib/bigint/BigUnsigned.hh **** 	using NumberlikeArray<Blk>::getLength;
  89:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  90:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Returns the requested block, or 0 if it is beyond the length (as if
  91:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * the number had 0s infinitely to the left). */
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	Blk getBlock(Index i) const { return i >= len ? 0 : blk[i]; }
  54              		.loc 3 92 0
  55 0010 020053E1 		cmp	r3, r2
  56 0014 0700002A 		bcs	.L7
  57 0018 081090E5 		ldr	r1, [r0, #8]
  58 001c 033191E7 		ldr	r3, [r1, r3, lsl #2]
  59              	.LVL3:
  60              	.L3:
  61 0020 0000A0E3 		mov	r0, #0
  62              	.LVL4:
  63              	.L5:
  64              	.LBE258:
  65              	.LBE257:
  52:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		Index leftmostBlockLen = 0;
  53:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		while (leftmostBlock != 0) {
  66              		.loc 1 53 0
  67 0024 000053E3 		cmp	r3, #0
  68 0028 0400000A 		beq	.L4
  54:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			leftmostBlock >>= 1;
  69              		.loc 1 54 0
  70 002c A330A0E1 		lsr	r3, r3, #1
  71              	.LVL5:
  55:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			leftmostBlockLen++;
  72              		.loc 1 55 0
  73 0030 010080E2 		add	r0, r0, #1
  74              	.LVL6:
  53:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			leftmostBlock >>= 1;
  75              		.loc 1 53 0
  76 0034 FAFFFFEA 		b	.L5
  77              	.LVL7:
  78              	.L7:
  79              	.LBB260:
  80              	.LBB259:
  81              		.loc 3 92 0
  82 0038 0030A0E3 		mov	r3, #0
  83              	.LVL8:
  84 003c F7FFFFEA 		b	.L3
  85              	.LVL9:
  86              	.L4:
  87              	.LBE259:
  88              	.LBE260:
  56:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
  57:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return leftmostBlockLen + (len - 1) * N;
  89              		.loc 1 57 0
  90 0040 7E2342E2 		sub	r2, r2, #-134217727
  91              	.LVL10:
  92 0044 820280E0 		add	r0, r0, r2, lsl #5
  93              	.LVL11:
  94 0048 1EFF2FE1 		bx	lr
  95              	.LVL12:
  96              	.L6:
  97              	.LBE256:
  49:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else {
  98              		.loc 1 49 0
  99 004c 0000A0E3 		mov	r0, #0
 100              	.LVL13:
 101              	.LBE252:
  58:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
  59:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 102              		.loc 1 59 0
 103 0050 1EFF2FE1 		bx	lr
 104              		.cfi_endproc
 105              	.LFE89:
 106              		.cantunwind
 107              		.fnend
 109              		.section	.text._ZNK11BigUnsigned9compareToERKS_,"ax",%progbits
 110              		.align	2
 111              		.global	_ZNK11BigUnsigned9compareToERKS_
 112              		.syntax unified
 113              		.arm
 114              		.fpu neon
 116              	_ZNK11BigUnsigned9compareToERKS_:
 117              		.fnstart
 118              	.LFB91:
  60:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  61:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::setBit(Index bi, bool newBit) {
  62:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index blockI = bi / N;
  63:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Blk block = getBlock(blockI), mask = Blk(1) << (bi % N);
  64:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	block = newBit ? (block | mask) : (block & ~mask);
  65:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	setBlock(blockI, block);
  66:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
  67:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  68:../src/zxing_lib/bigint/BigUnsigned.cpp **** // COMPARISON
  69:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::CmpRes BigUnsigned::compareTo(const BigUnsigned &x) const {
 119              		.loc 1 69 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.LVL14:
 125              	.LBB261:
  70:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// A bigger length implies a bigger number.
  71:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (len < x.len)
 126              		.loc 1 71 0
 127 0000 043090E5 		ldr	r3, [r0, #4]
 128 0004 042091E5 		ldr	r2, [r1, #4]
 129 0008 020053E1 		cmp	r3, r2
 130 000c 0C00003A 		bcc	.L11
 131              	.LBB262:
  72:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return less;
  73:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else if (len > x.len)
 132              		.loc 1 73 0
 133 0010 0D00008A 		bhi	.L12
 134              	.L10:
 135              	.LVL15:
 136              	.LBB263:
  74:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return greater;
  75:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else {
  76:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Compare blocks one by one from left to right.
  77:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		Index i = len;
  78:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		while (i > 0) {
 137              		.loc 1 78 0
 138 0014 000053E3 		cmp	r3, #0
 139 0018 0D00000A 		beq	.L13
  79:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			i--;
 140              		.loc 1 79 0
 141 001c 013043E2 		sub	r3, r3, #1
 142              	.LVL16:
  80:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			if (blk[i] == x.blk[i])
 143              		.loc 1 80 0
 144 0020 082090E5 		ldr	r2, [r0, #8]
 145 0024 03C192E7 		ldr	ip, [r2, r3, lsl #2]
 146 0028 082091E5 		ldr	r2, [r1, #8]
 147 002c 032192E7 		ldr	r2, [r2, r3, lsl #2]
 148 0030 02005CE1 		cmp	ip, r2
 149 0034 F6FFFF0A 		beq	.L10
  81:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				continue;
  82:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			else if (blk[i] > x.blk[i])
 150              		.loc 1 82 0
 151 0038 0700009A 		bls	.L14
  83:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				return greater;
 152              		.loc 1 83 0
 153 003c 0100A0E3 		mov	r0, #1
 154              	.LVL17:
 155 0040 1EFF2FE1 		bx	lr
 156              	.LVL18:
 157              	.L11:
 158              	.LBE263:
 159              	.LBE262:
  72:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else if (len > x.len)
 160              		.loc 1 72 0
 161 0044 0000E0E3 		mvn	r0, #0
 162              	.LVL19:
 163 0048 1EFF2FE1 		bx	lr
 164              	.LVL20:
 165              	.L12:
 166              	.LBB265:
  74:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else {
 167              		.loc 1 74 0
 168 004c 0100A0E3 		mov	r0, #1
 169              	.LVL21:
 170 0050 1EFF2FE1 		bx	lr
 171              	.LVL22:
 172              	.L13:
 173              	.LBB264:
  84:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			else
  85:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				return less;
  86:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
  87:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If no blocks differed, the numbers are equal.
  88:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return equal;
 174              		.loc 1 88 0
 175 0054 0000A0E3 		mov	r0, #0
 176              	.LVL23:
 177 0058 1EFF2FE1 		bx	lr
 178              	.LVL24:
 179              	.L14:
  85:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 180              		.loc 1 85 0
 181 005c 0000E0E3 		mvn	r0, #0
 182              	.LVL25:
 183              	.LBE264:
 184              	.LBE265:
 185              	.LBE261:
  89:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
  90:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 186              		.loc 1 90 0
 187 0060 1EFF2FE1 		bx	lr
 188              		.cfi_endproc
 189              	.LFE91:
 190              		.cantunwind
 191              		.fnend
 193              		.section	.text._ZN11BigUnsignedmmEv,"ax",%progbits
 194              		.align	2
 195              		.global	_ZN11BigUnsignedmmEv
 196              		.syntax unified
 197              		.arm
 198              		.fpu neon
 200              	_ZN11BigUnsignedmmEv:
 201              		.fnstart
 202              	.LFB104:
  91:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  92:../src/zxing_lib/bigint/BigUnsigned.cpp **** // COPY-LESS OPERATIONS
  93:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
  94:../src/zxing_lib/bigint/BigUnsigned.cpp **** /*
  95:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * On most calls to copy-less operations, it's safe to read the inputs little by
  96:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * little and write the outputs little by little.  However, if one of the
  97:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * inputs is coming from the same variable into which the output is to be
  98:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * stored (an "aliased" call), we risk overwriting the input before we read it.
  99:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * In this case, we first compute the result into a temporary BigUnsigned
 100:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * variable and then copy it into the requested output variable *this.
 101:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * Each put-here operation uses the DTRT_ALIASED macro (Do The Right Thing on
 102:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * aliased calls) to generate code for this check.
 103:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * 
 104:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * I adopted this approach on 2007.02.13 (see Assignment Operators in
 105:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * BigUnsigned.hh).  Before then, put-here operations rejected aliased calls
 106:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * with an exception.  I think doing the right thing is better.
 107:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * 
 108:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * Some of the put-here operations can probably handle aliased calls safely
 109:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * without the extra copy because (for example) they process blocks strictly
 110:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * right-to-left.  At some point I might determine which ones don't need the
 111:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * copy, but my reasoning would need to be verified very carefully.  For now
 112:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * I'll leave in the copy.
 113:../src/zxing_lib/bigint/BigUnsigned.cpp ****  */
 114:../src/zxing_lib/bigint/BigUnsigned.cpp **** #define DTRT_ALIASED(cond, op) \
 115:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (cond) { \
 116:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		BigUnsigned tmpThis; \
 117:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		tmpThis.op; \
 118:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		*this = tmpThis; \
 119:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return; \
 120:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 121:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 122:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 123:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 124:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::add(const BigUnsigned &a, const BigUnsigned &b) {
 125:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, add(a, b));
 126:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If one argument is zero, copy the other.
 127:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (a.len == 0) {
 128:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		operator =(b);
 129:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 130:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else if (b.len == 0) {
 131:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		operator =(a);
 132:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 133:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 134:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Some variables...
 135:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Carries in and out of an addition stage
 136:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	bool carryIn, carryOut;
 137:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Blk temp;
 138:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 139:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// a2 points to the longer input, b2 points to the shorter
 140:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	const BigUnsigned *a2, *b2;
 141:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (a.len >= b.len) {
 142:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &a;
 143:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &b;
 144:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else {
 145:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &b;
 146:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &a;
 147:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 148:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Set prelimiary length and make room in this BigUnsigned
 149:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a2->len + 1;
 150:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 151:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// For each block index that is present in both inputs...
 152:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0, carryIn = false; i < b2->len; i++) {
 153:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Add input blocks
 154:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a2->blk[i] + b2->blk[i];
 155:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a rollover occurred, the result is less than either input.
 156:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// This test is used many times in the BigUnsigned code.
 157:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		carryOut = (temp < a2->blk[i]);
 158:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a carry was input, handle it
 159:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (carryIn) {
 160:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			temp++;
 161:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			carryOut |= (temp == 0);
 162:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 163:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = temp; // Save the addition result
 164:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		carryIn = carryOut; // Pass the carry along
 165:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 166:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If there is a carry left over, increase blocks until
 167:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// one does not roll over.
 168:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (; i < a2->len && carryIn; i++) {
 169:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a2->blk[i] + 1;
 170:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		carryIn = (temp == 0);
 171:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = temp;
 172:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 173:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If the carry was resolved but the larger number
 174:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// still has blocks, copy them over.
 175:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (; i < a2->len; i++)
 176:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 177:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Set the extra block if there's still a carry, decrease length otherwise
 178:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (carryIn)
 179:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 1;
 180:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else
 181:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 182:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 183:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 184:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::subtract(const BigUnsigned &a, const BigUnsigned &b) {
 185:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, subtract(a, b));
 186:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b.len == 0) {
 187:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If b is zero, copy a.
 188:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		operator =(a);
 189:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 190:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else if (a.len < b.len)
 191:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a is shorter than b, the result is negative.
 192:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		throw "BigUnsigned::subtract: "
 193:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			"Negative result in unsigned calculation";
 194:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Some variables...
 195:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	bool borrowIn, borrowOut;
 196:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Blk temp;
 197:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 198:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Set preliminary length and make room
 199:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a.len;
 200:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 201:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// For each block index that is present in both inputs...
 202:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0, borrowIn = false; i < b.len; i++) {
 203:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a.blk[i] - b.blk[i];
 204:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a reverse rollover occurred,
 205:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// the result is greater than the block from a.
 206:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrowOut = (temp > a.blk[i]);
 207:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Handle an incoming borrow
 208:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (borrowIn) {
 209:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			borrowOut |= (temp == 0);
 210:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			temp--;
 211:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 212:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = temp; // Save the subtraction result
 213:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrowIn = borrowOut; // Pass the borrow along
 214:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 215:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If there is a borrow left over, decrease blocks until
 216:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// one does not reverse rollover.
 217:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (; i < a.len && borrowIn; i++) {
 218:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrowIn = (a.blk[i] == 0);
 219:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a.blk[i] - 1;
 220:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 221:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/* If there's still a borrow, the result is negative.
 222:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * Throw an exception, but zero out this object so as to leave it in a
 223:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * predictable state. */
 224:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (borrowIn) {
 225:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len = 0;
 226:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		throw "BigUnsigned::subtract: Negative result in unsigned calculation";
 227:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else
 228:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Copy over the rest of the blocks
 229:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		for (; i < a.len; i++)
 230:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			blk[i] = a.blk[i];
 231:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap leading zeros
 232:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	zapLeadingZeros();
 233:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 234:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 235:../src/zxing_lib/bigint/BigUnsigned.cpp **** /*
 236:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * About the multiplication and division algorithms:
 237:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 238:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * I searched unsucessfully for fast C++ built-in operations like the `b_0'
 239:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * and `c_0' Knuth describes in Section 4.3.1 of ``The Art of Computer
 240:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * Programming'' (replace `place' by `Blk'):
 241:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 242:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *    ``b_0[:] multiplication of a one-place integer by another one-place
 243:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *      integer, giving a two-place answer;
 244:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 245:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *    ``c_0[:] division of a two-place integer by a one-place integer,
 246:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *      provided that the quotient is a one-place integer, and yielding
 247:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *      also a one-place remainder.''
 248:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 249:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * I also missed his note that ``[b]y adjusting the word size, if
 250:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * necessary, nearly all computers will have these three operations
 251:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * available'', so I gave up on trying to use algorithms similar to his.
 252:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * A future version of the library might include such algorithms; I
 253:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * would welcome contributions from others for this.
 254:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 255:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * I eventually decided to use bit-shifting algorithms.  To multiply `a'
 256:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * and `b', we zero out the result.  Then, for each `1' bit in `a', we
 257:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * shift `b' left the appropriate amount and add it to the result.
 258:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * Similarly, to divide `a' by `b', we shift `b' left varying amounts,
 259:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * repeatedly trying to subtract it from `a'.  When we succeed, we note
 260:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * the fact by setting a bit in the quotient.  While these algorithms
 261:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * have the same O(n^2) time complexity as Knuth's, the ``constant factor''
 262:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * is likely to be larger.
 263:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 264:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * Because I used these algorithms, which require single-block addition
 265:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * and subtraction rather than single-block multiplication and division,
 266:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * the innermost loops of all four routines are very similar.  Study one
 267:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * of them and all will become clear.
 268:../src/zxing_lib/bigint/BigUnsigned.cpp ****  */
 269:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 270:../src/zxing_lib/bigint/BigUnsigned.cpp **** /*
 271:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * This is a little inline function used by both the multiplication
 272:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * routine and the division routine.
 273:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 274:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * `getShiftedBlock' returns the `x'th block of `num << y'.
 275:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * `y' may be anything from 0 to N - 1, and `x' may be anything from
 276:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * 0 to `num.len'.
 277:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 278:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * Two things contribute to this block:
 279:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 280:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * (1) The `N - y' low bits of `num.blk[x]', shifted `y' bits left.
 281:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 282:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * (2) The `y' high bits of `num.blk[x-1]', shifted `N - y' bits right.
 283:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 284:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * But we must be careful if `x == 0' or `x == num.len', in
 285:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * which case we should use 0 instead of (2) or (1), respectively.
 286:../src/zxing_lib/bigint/BigUnsigned.cpp ****  *
 287:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * If `y == 0', then (2) contributes 0, as it should.  However,
 288:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * in some computer environments, for a reason I cannot understand,
 289:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * `a >> b' means `a >> (b % N)'.  This means `num.blk[x-1] >> (N - y)'
 290:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * will return `num.blk[x-1]' instead of the desired 0 when `y == 0';
 291:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * the test `y == 0' handles this case specially.
 292:../src/zxing_lib/bigint/BigUnsigned.cpp ****  */
 293:../src/zxing_lib/bigint/BigUnsigned.cpp **** inline BigUnsigned::Blk getShiftedBlock(const BigUnsigned &num,
 294:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Index x, unsigned int y) {
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part1 = (x == 0 || y == 0) ? 0 : (num.blk[x - 1] >> (BigUnsigned::N - y));
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 297:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 298:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 299:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 300:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::multiply(const BigUnsigned &a, const BigUnsigned &b) {
 301:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, multiply(a, b));
 302:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If either a or b is zero, set to zero.
 303:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (a.len == 0 || b.len == 0) {
 304:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len = 0;
 305:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 306:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 307:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/*
 308:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * Overall method:
 309:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *
 310:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * Set this = 0.
 311:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * For each 1-bit of `a' (say the `i2'th bit of block `i'):
 312:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *    Add `b << (i blocks and i2 bits)' to *this.
 313:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 */
 314:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Variables for the calculation
 315:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i, j, k;
 316:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	unsigned int i2;
 317:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Blk temp;
 318:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	bool carryIn, carryOut;
 319:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Set preliminary length and make room
 320:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a.len + b.len;
 321:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 322:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zero out this object
 323:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < len; i++)
 324:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 325:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// For each block of the first number...
 326:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < a.len; i++) {
 327:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// For each 1-bit of that block...
 328:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		for (i2 = 0; i2 < N; i2++) {
 329:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			if ((a.blk[i] & (Blk(1) << i2)) == 0)
 330:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				continue;
 331:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			/*
 332:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * Add b to this, shifted left i blocks and i2 bits.
 333:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * j is the index in b, and k = i + j is the index in this.
 334:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 *
 335:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * `getShiftedBlock', a short inline function defined above,
 336:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * is now used for the bit handling.  It replaces the more
 337:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * complex `bHigh' code, in which each run of the loop dealt
 338:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * immediately with the low bits and saved the high bits to
 339:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * be picked up next time.  The last run of the loop used to
 340:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * leave leftover high bits, which were handled separately.
 341:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * Instead, this loop runs an additional time with j == b.len.
 342:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * These changes were made on 2005.01.11.
 343:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 */
 344:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			for (j = 0, k = i, carryIn = false; j <= b.len; j++, k++) {
 345:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				/*
 346:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				 * The body of this loop is very similar to the body of the first loop
 347:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				 * in `add', except that this loop does a `+=' instead of a `+'.
 348:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				 */
 349:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				temp = blk[k] + getShiftedBlock(b, j, i2);
 350:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				carryOut = (temp < blk[k]);
 351:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				if (carryIn) {
 352:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					temp++;
 353:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					carryOut |= (temp == 0);
 354:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				}
 355:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[k] = temp;
 356:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				carryIn = carryOut;
 357:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 358:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// No more extra iteration to deal with `bHigh'.
 359:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// Roll-over a carry as necessary.
 360:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			for (; carryIn; k++) {
 361:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[k]++;
 362:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				carryIn = (blk[k] == 0);
 363:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 364:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 365:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 366:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero
 367:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (blk[len - 1] == 0)
 368:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 369:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 370:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 371:../src/zxing_lib/bigint/BigUnsigned.cpp **** /*
 372:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * DIVISION WITH REMAINDER
 373:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * This monstrous function mods *this by the given divisor b while storing the
 374:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * quotient in the given object q; at the end, *this contains the remainder.
 375:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * The seemingly bizarre pattern of inputs and outputs was chosen so that the
 376:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * function copies as little as possible (since it is implemented by repeated
 377:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * subtraction of multiples of b from *this).
 378:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * 
 379:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * "modWithQuotient" might be a better name for this function, but I would
 380:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * rather not change the name now.
 381:../src/zxing_lib/bigint/BigUnsigned.cpp ****  */
 382:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::divideWithRemainder(const BigUnsigned &b, BigUnsigned &q) {
 383:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/* Defending against aliased calls is more complex than usual because we
 384:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * are writing to both *this and q.
 385:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * 
 386:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * It would be silly to try to write quotient and remainder to the
 387:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * same variable.  Rule that out right away. */
 388:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (this == &q)
 389:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		throw "BigUnsigned::divideWithRemainder: Cannot write quotient and remainder into the same variab
 390:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/* Now *this and q are separate, so the only concern is that b might be
 391:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * aliased to one of them.  If so, use a temporary copy of b. */
 392:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (this == &b || &q == &b) {
 393:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		BigUnsigned tmpB(b);
 394:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		divideWithRemainder(tmpB, q);
 395:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 396:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 397:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 398:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/*
 399:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * Knuth's definition of mod (which this function uses) is somewhat
 400:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * different from the C++ definition of % in case of division by 0.
 401:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *
 402:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * We let a / 0 == 0 (it doesn't matter much) and a % 0 == a, no
 403:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * exceptions thrown.  This allows us to preserve both Knuth's demand
 404:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * that a mod 0 == a and the useful property that
 405:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * (a / b) * b + (a % b) == a.
 406:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 */
 407:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b.len == 0) {
 408:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.len = 0;
 409:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 410:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 411:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 412:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/*
 413:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * If *this.len < b.len, then *this < b, and we can be sure that b doesn't go into
 414:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * *this at all.  The quotient is 0 and *this is already the remainder (so leave it alone).
 415:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 */
 416:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (len < b.len) {
 417:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.len = 0;
 418:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 419:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 420:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 421:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// At this point we know (*this).len >= b.len > 0.  (Whew!)
 422:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 423:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/*
 424:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * Overall method:
 425:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *
 426:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * For each appropriate i and i2, decreasing:
 427:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *    Subtract (b << (i blocks and i2 bits)) from *this, storing the
 428:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *      result in subtractBuf.
 429:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *    If the subtraction succeeds with a nonnegative result:
 430:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *        Turn on bit i2 of block i of the quotient q.
 431:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *        Copy subtractBuf back into *this.
 432:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *    Otherwise bit i2 of block i remains off, and *this is unchanged.
 433:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * 
 434:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * Eventually q will contain the entire quotient, and *this will
 435:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * be left with the remainder.
 436:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *
 437:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * subtractBuf[x] corresponds to blk[x], not blk[x+i], since 2005.01.11.
 438:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * But on a single iteration, we don't touch the i lowest blocks of blk
 439:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * (and don't use those of subtractBuf) because these blocks are
 440:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * unaffected by the subtraction: we are subtracting
 441:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * (b << (i blocks and i2 bits)), which ends in at least `i' zero
 442:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * blocks. */
 443:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Variables for the calculation
 444:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i, j, k;
 445:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	unsigned int i2;
 446:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Blk temp;
 447:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	bool borrowIn, borrowOut;
 448:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 449:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/*
 450:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * Make sure we have an extra zero block just past the value.
 451:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 *
 452:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * When we attempt a subtraction, we might shift `b' so
 453:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * its first block begins a few bits left of the dividend,
 454:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * and then we'll try to compare these extra bits with
 455:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * a nonexistent block to the left of the dividend.  The
 456:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * extra zero block ensures sensible behavior; we need
 457:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * an extra block in `subtractBuf' for exactly the same reason.
 458:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 */
 459:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index origLen = len; // Save real length.
 460:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/* To avoid an out-of-bounds access in case of reallocation, allocate
 461:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	 * first and then increment the logical length. */
 462:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocateAndCopy(len + 1);
 463:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len++;
 464:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	blk[origLen] = 0; // Zero the added block.
 465:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 466:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// subtractBuf holds part of the result of a subtraction; see above.
 467:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Blk *subtractBuf = new Blk[len];
 468:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 469:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Set preliminary length for quotient and make room
 470:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	q.len = origLen - b.len + 1;
 471:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	q.allocate(q.len);
 472:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zero out the quotient
 473:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < q.len; i++)
 474:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.blk[i] = 0;
 475:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 476:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// For each possible left-shift of b in blocks...
 477:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	i = q.len;
 478:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	while (i > 0) {
 479:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		i--;
 480:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// For each possible left-shift of b in bits...
 481:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// (Remember, N is the number of bits in a Blk.)
 482:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.blk[i] = 0;
 483:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		i2 = N;
 484:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		while (i2 > 0) {
 485:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			i2--;
 486:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			/*
 487:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * Subtract b, shifted left i blocks and i2 bits, from *this,
 488:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * and store the answer in subtractBuf.  In the for loop, `k == i + j'.
 489:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 *
 490:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * Compare this to the middle section of `multiply'.  They
 491:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * are in many ways analogous.  See especially the discussion
 492:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * of `getShiftedBlock'.
 493:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 */
 494:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			for (j = 0, k = i, borrowIn = false; j <= b.len; j++, k++) {
 495:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				temp = blk[k] - getShiftedBlock(b, j, i2);
 496:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowOut = (temp > blk[k]);
 497:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				if (borrowIn) {
 498:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					borrowOut |= (temp == 0);
 499:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					temp--;
 500:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				}
 501:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				// Since 2005.01.11, indices of `subtractBuf' directly match those of `blk', so use `k'.
 502:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				subtractBuf[k] = temp; 
 503:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowIn = borrowOut;
 504:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 505:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// No more extra iteration to deal with `bHigh'.
 506:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// Roll-over a borrow as necessary.
 507:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			for (; k < origLen && borrowIn; k++) {
 508:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowIn = (blk[k] == 0);
 509:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				subtractBuf[k] = blk[k] - 1;
 510:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 511:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			/*
 512:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * If the subtraction was performed successfully (!borrowIn),
 513:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * set bit i2 in block i of the quotient.
 514:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 *
 515:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * Then, copy the portion of subtractBuf filled by the subtraction
 516:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * back to *this.  This portion starts with block i and ends--
 517:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * where?  Not necessarily at block `i + b.len'!  Well, we
 518:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * increased k every time we saved a block into subtractBuf, so
 519:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 * the region of subtractBuf we copy is just [i, k).
 520:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			 */
 521:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			if (!borrowIn) {
 522:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				q.blk[i] |= (Blk(1) << i2);
 523:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				while (k > i) {
 524:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					k--;
 525:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					blk[k] = subtractBuf[k];
 526:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				}
 527:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			} 
 528:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 529:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 530:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero in quotient
 531:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (q.blk[q.len - 1] == 0)
 532:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.len--;
 533:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap any/all leading zeros in remainder
 534:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	zapLeadingZeros();
 535:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Deallocate subtractBuf.
 536:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// (Thanks to Brad Spencer for noticing my accidental omission of this!)
 537:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	delete [] subtractBuf;
 538:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 539:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 540:../src/zxing_lib/bigint/BigUnsigned.cpp **** /* BITWISE OPERATORS
 541:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * These are straightforward blockwise operations except that they differ in
 542:../src/zxing_lib/bigint/BigUnsigned.cpp ****  * the output length and the necessity of zapLeadingZeros. */
 543:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 544:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::bitAnd(const BigUnsigned &a, const BigUnsigned &b) {
 545:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, bitAnd(a, b));
 546:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// The bitwise & can't be longer than either operand.
 547:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = (a.len >= b.len) ? b.len : a.len;
 548:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 549:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 550:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < len; i++)
 551:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a.blk[i] & b.blk[i];
 552:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	zapLeadingZeros();
 553:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 554:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 555:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::bitOr(const BigUnsigned &a, const BigUnsigned &b) {
 556:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, bitOr(a, b));
 557:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 558:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	const BigUnsigned *a2, *b2;
 559:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (a.len >= b.len) {
 560:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &a;
 561:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &b;
 562:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else {
 563:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &b;
 564:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &a;
 565:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 566:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(a2->len);
 567:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < b2->len; i++)
 568:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] | b2->blk[i];
 569:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (; i < a2->len; i++)
 570:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 571:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a2->len;
 572:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Doesn't need zapLeadingZeros.
 573:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 574:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 575:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::bitXor(const BigUnsigned &a, const BigUnsigned &b) {
 576:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, bitXor(a, b));
 577:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 578:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	const BigUnsigned *a2, *b2;
 579:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (a.len >= b.len) {
 580:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &a;
 581:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &b;
 582:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else {
 583:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &b;
 584:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &a;
 585:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 586:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(a2->len);
 587:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < b2->len; i++)
 588:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] ^ b2->blk[i];
 589:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (; i < a2->len; i++)
 590:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 591:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a2->len;
 592:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	zapLeadingZeros();
 593:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 594:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 595:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::bitShiftLeft(const BigUnsigned &a, int b) {
 596:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a, bitShiftLeft(a, b));
 597:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b < 0) {
 598:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (b << 1 == 0)
 599:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			throw "BigUnsigned::bitShiftLeft: "
 600:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				"Pathological shift amount not implemented";
 601:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		else {
 602:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			bitShiftRight(a, -b);
 603:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			return;
 604:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 605:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 606:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index shiftBlocks = b / N;
 607:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	unsigned int shiftBits = b % N;
 608:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// + 1: room for high bits nudged left into another block
 609:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a.len + shiftBlocks + 1;
 610:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 611:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i, j;
 612:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < shiftBlocks; i++)
 613:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 614:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (j = 0, i = shiftBlocks; j <= a.len; j++, i++)
 615:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = getShiftedBlock(a, j, shiftBits);
 616:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero
 617:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (blk[len - 1] == 0)
 618:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 619:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 620:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 621:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::bitShiftRight(const BigUnsigned &a, int b) {
 622:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a, bitShiftRight(a, b));
 623:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b < 0) {
 624:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (b << 1 == 0)
 625:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			throw "BigUnsigned::bitShiftRight: "
 626:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				"Pathological shift amount not implemented";
 627:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		else {
 628:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			bitShiftLeft(a, -b);
 629:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			return;
 630:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 631:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 632:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// This calculation is wacky, but expressing the shift as a left bit shift
 633:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// within each block lets us use getShiftedBlock.
 634:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index rightShiftBlocks = (b + N - 1) / N;
 635:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	unsigned int leftShiftBits = N * rightShiftBlocks - b;
 636:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Now (N * rightShiftBlocks - leftShiftBits) == b
 637:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// and 0 <= leftShiftBits < N.
 638:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (rightShiftBlocks >= a.len + 1) {
 639:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// All of a is guaranteed to be shifted off, even considering the left
 640:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// bit shift.
 641:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len = 0;
 642:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 643:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 644:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Now we're allocating a positive amount.
 645:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// + 1: room for high bits nudged left into another block
 646:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a.len + 1 - rightShiftBlocks;
 647:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 648:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i, j;
 649:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (j = rightShiftBlocks, i = 0; j <= a.len; j++, i++)
 650:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = getShiftedBlock(a, j, leftShiftBits);
 651:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero
 652:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (blk[len - 1] == 0)
 653:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 654:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 655:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 656:../src/zxing_lib/bigint/BigUnsigned.cpp **** // INCREMENT/DECREMENT OPERATORS
 657:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 658:../src/zxing_lib/bigint/BigUnsigned.cpp **** // Prefix increment
 659:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::operator ++() {
 660:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 661:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	bool carry = true;
 662:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < len && carry; i++) {
 663:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i]++;
 664:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		carry = (blk[i] == 0);
 665:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 666:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (carry) {
 667:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Allocate and then increase length, as in divideWithRemainder
 668:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		allocateAndCopy(len + 1);
 669:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len++;
 670:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 1;
 671:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 672:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 673:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 674:../src/zxing_lib/bigint/BigUnsigned.cpp **** // Postfix increment: same as prefix
 675:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::operator ++(int) {
 676:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	operator ++();
 677:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 678:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 679:../src/zxing_lib/bigint/BigUnsigned.cpp **** // Prefix decrement
 680:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::operator --() {
 203              		.loc 1 680 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL26:
 681:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (len == 0)
 208              		.loc 1 681 0
 209 0000 043090E5 		ldr	r3, [r0, #4]
 210 0004 000053E3 		cmp	r3, #0
 211 0008 0B00000A 		beq	.L23
 212 000c 0120A0E3 		mov	r2, #1
 213 0010 0010A0E3 		mov	r1, #0
 214              	.L16:
 215              	.LVL27:
 682:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		throw "BigUnsigned::operator --(): Cannot decrement an unsigned zero";
 683:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 684:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	bool borrow = true;
 685:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; borrow; i++) {
 216              		.loc 1 685 0 discriminator 3
 217 0014 000052E3 		cmp	r2, #0
 218 0018 1100000A 		beq	.L17
 686:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrow = (blk[i] == 0);
 219              		.loc 1 686 0 discriminator 2
 220 001c 08C090E5 		ldr	ip, [r0, #8]
 221 0020 01319CE7 		ldr	r3, [ip, r1, lsl #2]
 222 0024 132F6FE1 		clz	r2, r3
 223              	.LVL28:
 224 0028 A222A0E1 		lsr	r2, r2, #5
 225              	.LVL29:
 687:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i]--;
 226              		.loc 1 687 0 discriminator 2
 227 002c 013043E2 		sub	r3, r3, #1
 228 0030 01318CE7 		str	r3, [ip, r1, lsl #2]
 685:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrow = (blk[i] == 0);
 229              		.loc 1 685 0 discriminator 2
 230 0034 011081E2 		add	r1, r1, #1
 231              	.LVL30:
 232 0038 F5FFFFEA 		b	.L16
 233              	.LVL31:
 234              	.L23:
 680:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (len == 0)
 235              		.loc 1 680 0
 236 003c 10402DE9 		push	{r4, lr}
 237              		.save {r4, lr}
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 4, -8
 240              		.cfi_offset 14, -4
 682:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 241              		.loc 1 682 0
 242 0040 0400A0E3 		mov	r0, #4
 243              	.LVL32:
 244 0044 FEFFFFEB 		bl	__cxa_allocate_exception
 245              	.LVL33:
 246 0048 003000E3 		movw	r3, #:lower16:.LC0
 247 004c 003040E3 		movt	r3, #:upper16:.LC0
 248 0050 003080E5 		str	r3, [r0]
 249 0054 0020A0E3 		mov	r2, #0
 250 0058 001000E3 		movw	r1, #:lower16:_ZTIPKc
 251 005c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 252 0060 FEFFFFEB 		bl	__cxa_throw
 253              	.LVL34:
 254              	.L17:
 255              		.cfi_def_cfa_offset 0
 256              		.cfi_restore 4
 257              		.cfi_restore 14
 688:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 689:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero (there can only be one)
 690:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (blk[len - 1] == 0)
 258              		.loc 1 690 0
 259 0064 082090E5 		ldr	r2, [r0, #8]
 260              	.LVL35:
 261 0068 043090E5 		ldr	r3, [r0, #4]
 262 006c 071143E2 		sub	r1, r3, #-1073741823
 263              	.LVL36:
 264 0070 012192E7 		ldr	r2, [r2, r1, lsl #2]
 265 0074 000052E3 		cmp	r2, #0
 691:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 266              		.loc 1 691 0
 267 0078 01304302 		subeq	r3, r3, #1
 268 007c 04308005 		streq	r3, [r0, #4]
 269              	.L15:
 270 0080 1EFF2FE1 		bx	lr
 271              		.cfi_endproc
 272              	.LFE104:
 273              		.fnend
 275              		.section	.text._ZN11BigUnsignedmmEi,"ax",%progbits
 276              		.align	2
 277              		.global	_ZN11BigUnsignedmmEi
 278              		.syntax unified
 279              		.arm
 280              		.fpu neon
 282              	_ZN11BigUnsignedmmEi:
 283              		.fnstart
 284              	.LFB105:
 692:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 693:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 694:../src/zxing_lib/bigint/BigUnsigned.cpp **** // Postfix decrement: same as prefix
 695:../src/zxing_lib/bigint/BigUnsigned.cpp **** void BigUnsigned::operator --(int) {
 285              		.loc 1 695 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              	.LVL37:
 290 0000 10402DE9 		push	{r4, lr}
 291              		.save {r4, lr}
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 4, -8
 294              		.cfi_offset 14, -4
 696:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	operator --();
 295              		.loc 1 696 0
 296 0004 FEFFFFEB 		bl	_ZN11BigUnsignedmmEv
 297              	.LVL38:
 298 0008 1080BDE8 		pop	{r4, pc}
 299              		.cfi_endproc
 300              	.LFE105:
 301              		.fnend
 303              		.section	.text._ZN15NumberlikeArrayImEC2ERKS0_,"axG",%progbits,_ZN15NumberlikeArrayImEC5ERKS0_,com
 304              		.align	2
 305              		.weak	_ZN15NumberlikeArrayImEC2ERKS0_
 306              		.syntax unified
 307              		.arm
 308              		.fpu neon
 310              	_ZN15NumberlikeArrayImEC2ERKS0_:
 311              		.fnstart
 312              	.LFB116:
  76:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  77:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Equality comparison: checks if both objects have the same length and
  78:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * equal (==) array elements to that length.  Subclasses may wish to
  79:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * override. */
  80:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	bool operator ==(const NumberlikeArray<Blk> &x) const;
  81:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  82:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	bool operator !=(const NumberlikeArray<Blk> &x) const {
  83:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		return !operator ==(x);
  84:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
  85:../src/zxing_lib/bigint/NumberlikeArray.hh **** };
  86:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  87:../src/zxing_lib/bigint/NumberlikeArray.hh **** /* BEGIN TEMPLATE DEFINITIONS.  They are present here so that source files that
  88:../src/zxing_lib/bigint/NumberlikeArray.hh ****  * include this header file can generate the necessary real definitions. */
  89:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  90:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
  91:../src/zxing_lib/bigint/NumberlikeArray.hh **** const unsigned int NumberlikeArray<Blk>::N = 8 * sizeof(Blk);
  92:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
  93:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
  94:../src/zxing_lib/bigint/NumberlikeArray.hh **** void NumberlikeArray<Blk>::allocate(Index c) {
  95:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
  96:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	if (c > cap) {
  97:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Delete the old number array
  98:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		delete [] blk;
  99:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new array
 100:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		cap = c;
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = new Blk[cap];
 102:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 103:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 104:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 105:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 106:../src/zxing_lib/bigint/NumberlikeArray.hh **** void NumberlikeArray<Blk>::allocateAndCopy(Index c) {
 107:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 108:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	if (c > cap) {
 109:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		Blk *oldBlk = blk;
 110:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new number array
 111:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		cap = c;
 112:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = new Blk[cap];
 113:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Copy number blocks
 114:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		Index i;
 115:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		for (i = 0; i < len; i++)
 116:../src/zxing_lib/bigint/NumberlikeArray.hh **** 			blk[i] = oldBlk[i];
 117:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Delete the old array
 118:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		delete [] oldBlk;
 119:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 120:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 121:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 122:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 123:../src/zxing_lib/bigint/NumberlikeArray.hh **** NumberlikeArray<Blk>::NumberlikeArray(const NumberlikeArray<Blk> &x)
 313              		.loc 2 123 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              	.LVL39:
 318 0000 70402DE9 		push	{r4, r5, r6, lr}
 319              		.save {r4, r5, r6, lr}
 320              		.cfi_def_cfa_offset 16
 321              		.cfi_offset 4, -16
 322              		.cfi_offset 5, -12
 323              		.cfi_offset 6, -8
 324              		.cfi_offset 14, -4
 325 0004 0040A0E1 		mov	r4, r0
 326              	.LBB266:
 124:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		: len(x.len) {
 327              		.loc 2 124 0
 328 0008 040091E5 		ldr	r0, [r1, #4]
 329              	.LVL40:
 330 000c 040084E5 		str	r0, [r4, #4]
 331              	.LBB267:
 125:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Create array
 126:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	cap = len;
 332              		.loc 2 126 0
 333 0010 000084E5 		str	r0, [r4]
 127:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	blk = new Blk[cap];
 334              		.loc 2 127 0
 335 0014 2E0270E3 		cmn	r0, #-536870910
 336 0018 0D00008A 		bhi	.L27
 337 001c 0150A0E1 		mov	r5, r1
 338              		.loc 2 127 0 is_stmt 0 discriminator 1
 339 0020 0001A0E1 		lsl	r0, r0, #2
 340 0024 FEFFFFEB 		bl	_Znaj
 341              	.LVL41:
 342 0028 080084E5 		str	r0, [r4, #8]
 343              	.LVL42:
 128:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 129:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index i;
 130:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	for (i = 0; i < len; i++)
 344              		.loc 2 130 0 is_stmt 1 discriminator 1
 345 002c 0030A0E3 		mov	r3, #0
 346              	.LVL43:
 347              	.L28:
 348              		.loc 2 130 0 is_stmt 0 discriminator 3
 349 0030 042094E5 		ldr	r2, [r4, #4]
 350 0034 020053E1 		cmp	r3, r2
 351 0038 0600002A 		bcs	.L29
 131:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 352              		.loc 2 131 0 is_stmt 1 discriminator 2
 353 003c 082094E5 		ldr	r2, [r4, #8]
 354 0040 081095E5 		ldr	r1, [r5, #8]
 355 0044 031191E7 		ldr	r1, [r1, r3, lsl #2]
 356 0048 031182E7 		str	r1, [r2, r3, lsl #2]
 130:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 357              		.loc 2 130 0 discriminator 2
 358 004c 013083E2 		add	r3, r3, #1
 359              	.LVL44:
 360 0050 F6FFFFEA 		b	.L28
 361              	.LVL45:
 362              	.L27:
 127:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy blocks
 363              		.loc 2 127 0 discriminator 2
 364 0054 FEFFFFEB 		bl	__cxa_throw_bad_array_new_length
 365              	.LVL46:
 366              	.L29:
 367              	.LBE267:
 368              	.LBE266:
 132:../src/zxing_lib/bigint/NumberlikeArray.hh **** }
 369              		.loc 2 132 0
 370 0058 0400A0E1 		mov	r0, r4
 371 005c 7080BDE8 		pop	{r4, r5, r6, pc}
 372              		.cfi_endproc
 373              	.LFE116:
 374              		.fnend
 376              		.weak	_ZN15NumberlikeArrayImEC1ERKS0_
 377              		.set	_ZN15NumberlikeArrayImEC1ERKS0_,_ZN15NumberlikeArrayImEC2ERKS0_
 378              		.section	.text._ZN11BigUnsigned17initFromPrimitiveImEEvT_,"axG",%progbits,_ZN11BigUnsigned17initFr
 379              		.align	2
 380              		.weak	_ZN11BigUnsigned17initFromPrimitiveImEEvT_
 381              		.syntax unified
 382              		.arm
 383              		.fpu neon
 385              	_ZN11BigUnsigned17initFromPrimitiveImEEvT_:
 386              		.fnstart
 387              	.LFB122:
  93:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
  94:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void setBlock(Index i, Blk newBlock);
  95:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  96:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// The number is zero if and only if the canonical length is zero.
  97:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool isZero() const { return NumberlikeArray<Blk>::isEmpty(); }
  98:../src/zxing_lib/bigint/BigUnsigned.hh **** 
  99:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Returns the length of the number in bits, i.e., zero if the number
 100:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * is zero and otherwise one more than the largest value of bi for
 101:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * which getBit(bi) returns true. */
 102:../src/zxing_lib/bigint/BigUnsigned.hh **** 	Index bitLength() const;
 103:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Get the state of bit bi, which has value 2^bi.  Bits beyond the
 104:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * number's length are considered to be 0. */
 105:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool getBit(Index bi) const {
 106:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return (getBlock(bi / N) & (Blk(1) << (bi % N))) != 0;
 107:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 108:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the state of bit bi to newBit.  The number grows or shrinks as
 109:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * necessary. */
 110:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void setBit(Index bi, bool newBit);
 111:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 112:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// COMPARISONS
 113:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 114:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Compares this to x like Perl's <=>
 115:../src/zxing_lib/bigint/BigUnsigned.hh **** 	CmpRes compareTo(const BigUnsigned &x) const;
 116:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 117:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Ordinary comparison operators
 118:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator ==(const BigUnsigned &x) const {
 119:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return NumberlikeArray<Blk>::operator ==(x);
 120:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 121:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator !=(const BigUnsigned &x) const {
 122:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return NumberlikeArray<Blk>::operator !=(x);
 123:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 124:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator < (const BigUnsigned &x) const { return compareTo(x) == less   ; }
 125:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator <=(const BigUnsigned &x) const { return compareTo(x) != greater; }
 126:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator >=(const BigUnsigned &x) const { return compareTo(x) != less   ; }
 127:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bool operator > (const BigUnsigned &x) const { return compareTo(x) == greater; }
 128:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 129:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/*
 130:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * BigUnsigned and BigInteger both provide three kinds of operators.
 131:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Here ``big-integer'' refers to BigInteger or BigUnsigned.
 132:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 133:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * (1) Overloaded ``return-by-value'' operators:
 134:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     +, -, *, /, %, unary -, &, |, ^, <<, >>.
 135:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Big-integer code using these operators looks identical to code using
 136:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * the primitive integer types.  These operators take one or two
 137:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * big-integer inputs and return a big-integer result, which can then
 138:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * be assigned to a BigInteger variable or used in an expression.
 139:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Example:
 140:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger a(1), b = 1;
 141:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger c = a + b;
 142:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 143:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * (2) Overloaded assignment operators:
 144:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     +=, -=, *=, /=, %=, flipSign, &=, |=, ^=, <<=, >>=, ++, --.
 145:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Again, these are used on big integers just like on ints.  They take
 146:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * one writable big integer that both provides an operand and receives a
 147:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * result.  Most also take a second read-only operand.
 148:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Example:
 149:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger a(1), b(1);
 150:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     a += b;
 151:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 152:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * (3) Copy-less operations: `add', `subtract', etc.
 153:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * These named methods take operands as arguments and store the result
 154:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * in the receiver (*this), avoiding unnecessary copies and allocations.
 155:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * `divideWithRemainder' is special: it both takes the dividend from and
 156:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * stores the remainder into the receiver, and it takes a separate
 157:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * object in which to store the quotient.  NOTE: If you are wondering
 158:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * why these don't return a value, you probably mean to use the
 159:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * overloaded return-by-value operators instead.
 160:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * 
 161:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * Examples:
 162:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     BigInteger a(43), b(7), c, d;
 163:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 164:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     c = a + b;   // Now c == 50.
 165:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     c.add(a, b); // Same effect but without the two copies.
 166:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 167:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     c.divideWithRemainder(b, d);
 168:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     // 50 / 7; now d == 7 (quotient) and c == 1 (remainder).
 169:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *
 170:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     // ``Aliased'' calls now do the right thing using a temporary
 171:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     // copy, but see note on `divideWithRemainder'.
 172:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 *     a.add(a, b); 
 173:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 */
 174:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 175:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// COPY-LESS OPERATIONS
 176:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 177:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// These 8: Arguments are read-only operands, result is saved in *this.
 178:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void add(const BigUnsigned &a, const BigUnsigned &b);
 179:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void subtract(const BigUnsigned &a, const BigUnsigned &b);
 180:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void multiply(const BigUnsigned &a, const BigUnsigned &b);
 181:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitAnd(const BigUnsigned &a, const BigUnsigned &b);
 182:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitOr(const BigUnsigned &a, const BigUnsigned &b);
 183:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitXor(const BigUnsigned &a, const BigUnsigned &b);
 184:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Negative shift amounts translate to opposite-direction shifts,
 185:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * except for -2^(8*sizeof(int)-1) which is unimplemented. */
 186:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitShiftLeft(const BigUnsigned &a, int b);
 187:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void bitShiftRight(const BigUnsigned &a, int b);
 188:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 189:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* `a.divideWithRemainder(b, q)' is like `q = a / b, a %= b'.
 190:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * / and % use semantics similar to Knuth's, which differ from the
 191:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * primitive integer semantics under division by zero.  See the
 192:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * implementation in BigUnsigned.cc for details.
 193:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * `a.divideWithRemainder(b, a)' throws an exception: it doesn't make
 194:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * sense to write quotient and remainder into the same variable. */
 195:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void divideWithRemainder(const BigUnsigned &b, BigUnsigned &q);
 196:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 197:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* `divide' and `modulo' are no longer offered.  Use
 198:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * `divideWithRemainder' instead. */
 199:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 200:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// OVERLOADED RETURN-BY-VALUE OPERATORS
 201:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator +(const BigUnsigned &x) const;
 202:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator -(const BigUnsigned &x) const;
 203:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator *(const BigUnsigned &x) const;
 204:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator /(const BigUnsigned &x) const;
 205:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator %(const BigUnsigned &x) const;
 206:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* OK, maybe unary minus could succeed in one case, but it really
 207:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * shouldn't be used, so it isn't provided. */
 208:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator &(const BigUnsigned &x) const;
 209:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator |(const BigUnsigned &x) const;
 210:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator ^(const BigUnsigned &x) const;
 211:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator <<(int b) const;
 212:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned operator >>(int b) const;
 213:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 214:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// OVERLOADED ASSIGNMENT OPERATORS
 215:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator +=(const BigUnsigned &x);
 216:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator -=(const BigUnsigned &x);
 217:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator *=(const BigUnsigned &x);
 218:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator /=(const BigUnsigned &x);
 219:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator %=(const BigUnsigned &x);
 220:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator &=(const BigUnsigned &x);
 221:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator |=(const BigUnsigned &x);
 222:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator ^=(const BigUnsigned &x);
 223:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator <<=(int b);
 224:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator >>=(int b);
 225:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 226:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* INCREMENT/DECREMENT OPERATORS
 227:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * To discourage messy coding, these do not return *this, so prefix
 228:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * and postfix behave the same. */
 229:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator ++(   );
 230:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator ++(int);
 231:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator --(   );
 232:../src/zxing_lib/bigint/BigUnsigned.hh **** 	void operator --(int);
 233:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 234:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Helper function that needs access to BigUnsigned internals
 235:../src/zxing_lib/bigint/BigUnsigned.hh **** 	friend Blk getShiftedBlock(const BigUnsigned &num, Index x,
 236:../src/zxing_lib/bigint/BigUnsigned.hh **** 			unsigned int y);
 237:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 238:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// See BigInteger.cc.
 239:../src/zxing_lib/bigint/BigUnsigned.hh **** 	template <class X>
 240:../src/zxing_lib/bigint/BigUnsigned.hh **** 	friend X convertBigUnsignedToPrimitiveAccess(const BigUnsigned &a);
 241:../src/zxing_lib/bigint/BigUnsigned.hh **** };
 242:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 243:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Implementing the return-by-value and assignment operators in terms of the
 244:../src/zxing_lib/bigint/BigUnsigned.hh ****  * copy-less operations.  The copy-less operations are responsible for making
 245:../src/zxing_lib/bigint/BigUnsigned.hh ****  * any necessary temporary copies to work around aliasing. */
 246:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 247:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator +(const BigUnsigned &x) const {
 248:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 249:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.add(*this, x);
 250:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 251:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 252:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator -(const BigUnsigned &x) const {
 253:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 254:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.subtract(*this, x);
 255:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 256:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 257:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator *(const BigUnsigned &x) const {
 258:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 259:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.multiply(*this, x);
 260:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 261:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 262:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator /(const BigUnsigned &x) const {
 263:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator /: division by zero";
 264:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q, r;
 265:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r = *this;
 266:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r.divideWithRemainder(x, q);
 267:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return q;
 268:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 269:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator %(const BigUnsigned &x) const {
 270:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator %: division by zero";
 271:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q, r;
 272:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r = *this;
 273:../src/zxing_lib/bigint/BigUnsigned.hh **** 	r.divideWithRemainder(x, q);
 274:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return r;
 275:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 276:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator &(const BigUnsigned &x) const {
 277:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 278:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitAnd(*this, x);
 279:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 280:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 281:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator |(const BigUnsigned &x) const {
 282:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 283:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitOr(*this, x);
 284:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 285:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 286:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator ^(const BigUnsigned &x) const {
 287:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 288:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitXor(*this, x);
 289:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 290:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 291:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator <<(int b) const {
 292:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 293:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitShiftLeft(*this, b);
 294:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 295:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 296:../src/zxing_lib/bigint/BigUnsigned.hh **** inline BigUnsigned BigUnsigned::operator >>(int b) const {
 297:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned ans;
 298:../src/zxing_lib/bigint/BigUnsigned.hh **** 	ans.bitShiftRight(*this, b);
 299:../src/zxing_lib/bigint/BigUnsigned.hh **** 	return ans;
 300:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 301:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 302:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator +=(const BigUnsigned &x) {
 303:../src/zxing_lib/bigint/BigUnsigned.hh **** 	add(*this, x);
 304:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 305:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator -=(const BigUnsigned &x) {
 306:../src/zxing_lib/bigint/BigUnsigned.hh **** 	subtract(*this, x);
 307:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 308:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator *=(const BigUnsigned &x) {
 309:../src/zxing_lib/bigint/BigUnsigned.hh **** 	multiply(*this, x);
 310:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 311:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator /=(const BigUnsigned &x) {
 312:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator /=: division by zero";
 313:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* The following technique is slightly faster than copying *this first
 314:../src/zxing_lib/bigint/BigUnsigned.hh **** 	 * when x is large. */
 315:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q;
 316:../src/zxing_lib/bigint/BigUnsigned.hh **** 	divideWithRemainder(x, q);
 317:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// *this contains the remainder, but we overwrite it with the quotient.
 318:../src/zxing_lib/bigint/BigUnsigned.hh **** 	*this = q;
 319:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 320:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator %=(const BigUnsigned &x) {
 321:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x.isZero()) throw "BigUnsigned::operator %=: division by zero";
 322:../src/zxing_lib/bigint/BigUnsigned.hh **** 	BigUnsigned q;
 323:../src/zxing_lib/bigint/BigUnsigned.hh **** 	// Mods *this by x.  Don't care about quotient left in q.
 324:../src/zxing_lib/bigint/BigUnsigned.hh **** 	divideWithRemainder(x, q);
 325:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 326:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator &=(const BigUnsigned &x) {
 327:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitAnd(*this, x);
 328:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 329:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator |=(const BigUnsigned &x) {
 330:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitOr(*this, x);
 331:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 332:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator ^=(const BigUnsigned &x) {
 333:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitXor(*this, x);
 334:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 335:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator <<=(int b) {
 336:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitShiftLeft(*this, b);
 337:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 338:../src/zxing_lib/bigint/BigUnsigned.hh **** inline void BigUnsigned::operator >>=(int b) {
 339:../src/zxing_lib/bigint/BigUnsigned.hh **** 	bitShiftRight(*this, b);
 340:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 341:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 342:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Templates for conversions of BigUnsigned to and from primitive integers.
 343:../src/zxing_lib/bigint/BigUnsigned.hh ****  * BigInteger.cc needs to instantiate convertToPrimitive, and the uses in
 344:../src/zxing_lib/bigint/BigUnsigned.hh ****  * BigUnsigned.cc didn't do the trick; I think g++ inlined convertToPrimitive
 345:../src/zxing_lib/bigint/BigUnsigned.hh ****  * instead of generating linkable instantiations.  So for consistency, I put
 346:../src/zxing_lib/bigint/BigUnsigned.hh ****  * all the templates here. */
 347:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 348:../src/zxing_lib/bigint/BigUnsigned.hh **** // CONSTRUCTION FROM PRIMITIVE INTEGERS
 349:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 350:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Initialize this BigUnsigned from the given primitive integer.  The same
 351:../src/zxing_lib/bigint/BigUnsigned.hh ****  * pattern works for all primitive integer types, so I put it into a template to
 352:../src/zxing_lib/bigint/BigUnsigned.hh ****  * reduce code duplication.  (Don't worry: this is protected and we instantiate
 353:../src/zxing_lib/bigint/BigUnsigned.hh ****  * it only with primitive integer types.)  Type X could be signed, but x is
 354:../src/zxing_lib/bigint/BigUnsigned.hh ****  * known to be nonnegative. */
 355:../src/zxing_lib/bigint/BigUnsigned.hh **** template <class X>
 356:../src/zxing_lib/bigint/BigUnsigned.hh **** void BigUnsigned::initFromPrimitive(X x) {
 388              		.loc 3 356 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              	.LVL47:
 393 0000 70402DE9 		push	{r4, r5, r6, lr}
 394              		.save {r4, r5, r6, lr}
 395              		.cfi_def_cfa_offset 16
 396              		.cfi_offset 4, -16
 397              		.cfi_offset 5, -12
 398              		.cfi_offset 6, -8
 399              		.cfi_offset 14, -4
 357:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x == 0)
 400              		.loc 3 357 0
 401 0004 005051E2 		subs	r5, r1, #0
 402 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 403 000c 0040A0E1 		mov	r4, r0
 358:../src/zxing_lib/bigint/BigUnsigned.hh **** 		; // NumberlikeArray already initialized us to zero.
 359:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else {
 360:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Create a single block.  blk is NULL; no need to delete it.
 361:../src/zxing_lib/bigint/BigUnsigned.hh **** 		cap = 1;
 404              		.loc 3 361 0
 405 0010 0160A0E3 		mov	r6, #1
 406 0014 006080E5 		str	r6, [r0]
 362:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk = new Blk[1];
 407              		.loc 3 362 0
 408 0018 0400A0E3 		mov	r0, #4
 409              	.LVL48:
 410 001c FEFFFFEB 		bl	_Znaj
 411              	.LVL49:
 412 0020 080084E5 		str	r0, [r4, #8]
 363:../src/zxing_lib/bigint/BigUnsigned.hh **** 		len = 1;
 413              		.loc 3 363 0
 414 0024 046084E5 		str	r6, [r4, #4]
 364:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk[0] = Blk(x);
 415              		.loc 3 364 0
 416 0028 005080E5 		str	r5, [r0]
 417 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 418              		.cfi_endproc
 419              	.LFE122:
 420              		.fnend
 422              		.section	.text._ZN11BigUnsignedC2Em,"ax",%progbits
 423              		.align	2
 424              		.global	_ZN11BigUnsignedC2Em
 425              		.syntax unified
 426              		.arm
 427              		.fpu neon
 429              	_ZN11BigUnsignedC2Em:
 430              		.fnstart
 431              	.LFB65:
   8:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned int   x) { initFromPrimitive      (x); }
 432              		.loc 1 8 0
 433              		.cfi_startproc
 434              		.cfi_personality 0,__gxx_personality_v0
 435              		.cfi_lsda 0,.LLSDA65
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL50:
 439 0000 10402DE9 		push	{r4, lr}
 440              		.save {r4, lr}
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 4, -8
 443              		.cfi_offset 14, -4
 444 0004 0040A0E1 		mov	r4, r0
 445              	.LVL51:
 446              	.LBB268:
 447              	.LBB269:
 448              	.LBB270:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 449              		.loc 2 45 0
 450 0008 0030A0E3 		mov	r3, #0
 451 000c 003080E5 		str	r3, [r0]
 452 0010 043080E5 		str	r3, [r0, #4]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 453              		.loc 2 46 0
 454 0014 083080E5 		str	r3, [r0, #8]
 455              	.LVL52:
 456              	.LEHB0:
 457              	.LBE270:
 458              	.LBE269:
   8:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned int   x) { initFromPrimitive      (x); }
 459              		.loc 1 8 0
 460 0018 FEFFFFEB 		bl	_ZN11BigUnsigned17initFromPrimitiveImEEvT_
 461              	.LVL53:
 462              	.LEHE0:
 463 001c 040000EA 		b	.L40
 464              	.L37:
 465              	.LVL54:
 466              	.LBB271:
 467              	.LBB272:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 468              		.loc 2 51 0
 469 0020 080094E5 		ldr	r0, [r4, #8]
 470 0024 000050E3 		cmp	r0, #0
 471 0028 0000000A 		beq	.L36
 472 002c FEFFFFEB 		bl	_ZdaPv
 473              	.LVL55:
 474              	.L36:
 475              	.LEHB1:
 476 0030 FEFFFFEB 		bl	__cxa_end_cleanup
 477              	.LVL56:
 478              	.LEHE1:
 479              	.L40:
 480              	.LBE272:
 481              	.LBE271:
 482              	.LBE268:
   8:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned int   x) { initFromPrimitive      (x); }
 483              		.loc 1 8 0
 484 0034 0400A0E1 		mov	r0, r4
 485 0038 1080BDE8 		pop	{r4, pc}
 486              		.cfi_endproc
 487              	.LFE65:
 488              		.global	__gxx_personality_v0
 489              		.personality	__gxx_personality_v0
 490              		.handlerdata
 491              	.LLSDA65:
 492 0008 FF       		.byte	0xff
 493 0009 FF       		.byte	0xff
 494 000a 01       		.byte	0x1
 495 000b 08       		.uleb128 .LLSDACSE65-.LLSDACSB65
 496              	.LLSDACSB65:
 497 000c 18       		.uleb128 .LEHB0-.LFB65
 498 000d 04       		.uleb128 .LEHE0-.LEHB0
 499 000e 20       		.uleb128 .L37-.LFB65
 500 000f 00       		.uleb128 0
 501 0010 30       		.uleb128 .LEHB1-.LFB65
 502 0011 04       		.uleb128 .LEHE1-.LEHB1
 503 0012 00       		.uleb128 0
 504 0013 00       		.uleb128 0
 505              	.LLSDACSE65:
 506              		.section	.text._ZN11BigUnsignedC2Em
 507              		.fnend
 509              		.global	_ZN11BigUnsignedC1Em
 510              		.set	_ZN11BigUnsignedC1Em,_ZN11BigUnsignedC2Em
 511              		.section	.text._ZN11BigUnsigned17initFromPrimitiveIjEEvT_,"axG",%progbits,_ZN11BigUnsigned17initFr
 512              		.align	2
 513              		.weak	_ZN11BigUnsigned17initFromPrimitiveIjEEvT_
 514              		.syntax unified
 515              		.arm
 516              		.fpu neon
 518              	_ZN11BigUnsigned17initFromPrimitiveIjEEvT_:
 519              		.fnstart
 520              	.LFB123:
 356:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x == 0)
 521              		.loc 3 356 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              	.LVL57:
 526 0000 70402DE9 		push	{r4, r5, r6, lr}
 527              		.save {r4, r5, r6, lr}
 528              		.cfi_def_cfa_offset 16
 529              		.cfi_offset 4, -16
 530              		.cfi_offset 5, -12
 531              		.cfi_offset 6, -8
 532              		.cfi_offset 14, -4
 357:../src/zxing_lib/bigint/BigUnsigned.hh **** 		; // NumberlikeArray already initialized us to zero.
 533              		.loc 3 357 0
 534 0004 005051E2 		subs	r5, r1, #0
 535 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 536 000c 0040A0E1 		mov	r4, r0
 361:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk = new Blk[1];
 537              		.loc 3 361 0
 538 0010 0160A0E3 		mov	r6, #1
 539 0014 006080E5 		str	r6, [r0]
 362:../src/zxing_lib/bigint/BigUnsigned.hh **** 		len = 1;
 540              		.loc 3 362 0
 541 0018 0400A0E3 		mov	r0, #4
 542              	.LVL58:
 543 001c FEFFFFEB 		bl	_Znaj
 544              	.LVL59:
 545 0020 080084E5 		str	r0, [r4, #8]
 363:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk[0] = Blk(x);
 546              		.loc 3 363 0
 547 0024 046084E5 		str	r6, [r4, #4]
 548              		.loc 3 364 0
 549 0028 005080E5 		str	r5, [r0]
 550 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 551              		.cfi_endproc
 552              	.LFE123:
 553              		.fnend
 555              		.section	.text._ZN11BigUnsignedC2Ej,"ax",%progbits
 556              		.align	2
 557              		.global	_ZN11BigUnsignedC2Ej
 558              		.syntax unified
 559              		.arm
 560              		.fpu neon
 562              	_ZN11BigUnsignedC2Ej:
 563              		.fnstart
 564              	.LFB68:
   9:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned short x) { initFromPrimitive      (x); }
 565              		.loc 1 9 0
 566              		.cfi_startproc
 567              		.cfi_personality 0,__gxx_personality_v0
 568              		.cfi_lsda 0,.LLSDA68
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              	.LVL60:
 572 0000 10402DE9 		push	{r4, lr}
 573              		.save {r4, lr}
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 4, -8
 576              		.cfi_offset 14, -4
 577 0004 0040A0E1 		mov	r4, r0
 578              	.LVL61:
 579              	.LBB273:
 580              	.LBB274:
 581              	.LBB275:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 582              		.loc 2 45 0
 583 0008 0030A0E3 		mov	r3, #0
 584 000c 003080E5 		str	r3, [r0]
 585 0010 043080E5 		str	r3, [r0, #4]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 586              		.loc 2 46 0
 587 0014 083080E5 		str	r3, [r0, #8]
 588              	.LVL62:
 589              	.LEHB2:
 590              	.LBE275:
 591              	.LBE274:
   9:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned short x) { initFromPrimitive      (x); }
 592              		.loc 1 9 0
 593 0018 FEFFFFEB 		bl	_ZN11BigUnsigned17initFromPrimitiveIjEEvT_
 594              	.LVL63:
 595              	.LEHE2:
 596 001c 040000EA 		b	.L50
 597              	.L47:
 598              	.LVL64:
 599              	.LBB276:
 600              	.LBB277:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 601              		.loc 2 51 0
 602 0020 080094E5 		ldr	r0, [r4, #8]
 603 0024 000050E3 		cmp	r0, #0
 604 0028 0000000A 		beq	.L46
 605 002c FEFFFFEB 		bl	_ZdaPv
 606              	.LVL65:
 607              	.L46:
 608              	.LEHB3:
 609 0030 FEFFFFEB 		bl	__cxa_end_cleanup
 610              	.LVL66:
 611              	.LEHE3:
 612              	.L50:
 613              	.LBE277:
 614              	.LBE276:
 615              	.LBE273:
   9:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(unsigned short x) { initFromPrimitive      (x); }
 616              		.loc 1 9 0
 617 0034 0400A0E1 		mov	r0, r4
 618 0038 1080BDE8 		pop	{r4, pc}
 619              		.cfi_endproc
 620              	.LFE68:
 621              		.personality	__gxx_personality_v0
 622              		.handlerdata
 623              	.LLSDA68:
 624 0008 FF       		.byte	0xff
 625 0009 FF       		.byte	0xff
 626 000a 01       		.byte	0x1
 627 000b 08       		.uleb128 .LLSDACSE68-.LLSDACSB68
 628              	.LLSDACSB68:
 629 000c 18       		.uleb128 .LEHB2-.LFB68
 630 000d 04       		.uleb128 .LEHE2-.LEHB2
 631 000e 20       		.uleb128 .L47-.LFB68
 632 000f 00       		.uleb128 0
 633 0010 30       		.uleb128 .LEHB3-.LFB68
 634 0011 04       		.uleb128 .LEHE3-.LEHB3
 635 0012 00       		.uleb128 0
 636 0013 00       		.uleb128 0
 637              	.LLSDACSE68:
 638              		.section	.text._ZN11BigUnsignedC2Ej
 639              		.fnend
 641              		.global	_ZN11BigUnsignedC1Ej
 642              		.set	_ZN11BigUnsignedC1Ej,_ZN11BigUnsignedC2Ej
 643              		.section	.text._ZN11BigUnsigned17initFromPrimitiveItEEvT_,"axG",%progbits,_ZN11BigUnsigned17initFr
 644              		.align	2
 645              		.weak	_ZN11BigUnsigned17initFromPrimitiveItEEvT_
 646              		.syntax unified
 647              		.arm
 648              		.fpu neon
 650              	_ZN11BigUnsigned17initFromPrimitiveItEEvT_:
 651              		.fnstart
 652              	.LFB124:
 356:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x == 0)
 653              		.loc 3 356 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              	.LVL67:
 658 0000 70402DE9 		push	{r4, r5, r6, lr}
 659              		.save {r4, r5, r6, lr}
 660              		.cfi_def_cfa_offset 16
 661              		.cfi_offset 4, -16
 662              		.cfi_offset 5, -12
 663              		.cfi_offset 6, -8
 664              		.cfi_offset 14, -4
 357:../src/zxing_lib/bigint/BigUnsigned.hh **** 		; // NumberlikeArray already initialized us to zero.
 665              		.loc 3 357 0
 666 0004 005051E2 		subs	r5, r1, #0
 667 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 668 000c 0040A0E1 		mov	r4, r0
 361:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk = new Blk[1];
 669              		.loc 3 361 0
 670 0010 0160A0E3 		mov	r6, #1
 671 0014 006080E5 		str	r6, [r0]
 362:../src/zxing_lib/bigint/BigUnsigned.hh **** 		len = 1;
 672              		.loc 3 362 0
 673 0018 0400A0E3 		mov	r0, #4
 674              	.LVL68:
 675 001c FEFFFFEB 		bl	_Znaj
 676              	.LVL69:
 677 0020 080084E5 		str	r0, [r4, #8]
 363:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk[0] = Blk(x);
 678              		.loc 3 363 0
 679 0024 046084E5 		str	r6, [r4, #4]
 680              		.loc 3 364 0
 681 0028 005080E5 		str	r5, [r0]
 682 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 683              		.cfi_endproc
 684              	.LFE124:
 685              		.fnend
 687              		.section	.text._ZN11BigUnsignedC2Et,"ax",%progbits
 688              		.align	2
 689              		.global	_ZN11BigUnsignedC2Et
 690              		.syntax unified
 691              		.arm
 692              		.fpu neon
 694              	_ZN11BigUnsignedC2Et:
 695              		.fnstart
 696              	.LFB71:
  10:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         long  x) { initFromSignedPrimitive(x); }
 697              		.loc 1 10 0
 698              		.cfi_startproc
 699              		.cfi_personality 0,__gxx_personality_v0
 700              		.cfi_lsda 0,.LLSDA71
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              	.LVL70:
 704 0000 10402DE9 		push	{r4, lr}
 705              		.save {r4, lr}
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 4, -8
 708              		.cfi_offset 14, -4
 709 0004 0040A0E1 		mov	r4, r0
 710              	.LVL71:
 711              	.LBB278:
 712              	.LBB279:
 713              	.LBB280:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 714              		.loc 2 45 0
 715 0008 0030A0E3 		mov	r3, #0
 716 000c 003080E5 		str	r3, [r0]
 717 0010 043080E5 		str	r3, [r0, #4]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 718              		.loc 2 46 0
 719 0014 083080E5 		str	r3, [r0, #8]
 720              	.LVL72:
 721              	.LEHB4:
 722              	.LBE280:
 723              	.LBE279:
  10:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         long  x) { initFromSignedPrimitive(x); }
 724              		.loc 1 10 0
 725 0018 FEFFFFEB 		bl	_ZN11BigUnsigned17initFromPrimitiveItEEvT_
 726              	.LVL73:
 727              	.LEHE4:
 728 001c 040000EA 		b	.L60
 729              	.L57:
 730              	.LVL74:
 731              	.LBB281:
 732              	.LBB282:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 733              		.loc 2 51 0
 734 0020 080094E5 		ldr	r0, [r4, #8]
 735 0024 000050E3 		cmp	r0, #0
 736 0028 0000000A 		beq	.L56
 737 002c FEFFFFEB 		bl	_ZdaPv
 738              	.LVL75:
 739              	.L56:
 740              	.LEHB5:
 741 0030 FEFFFFEB 		bl	__cxa_end_cleanup
 742              	.LVL76:
 743              	.LEHE5:
 744              	.L60:
 745              	.LBE282:
 746              	.LBE281:
 747              	.LBE278:
  10:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         long  x) { initFromSignedPrimitive(x); }
 748              		.loc 1 10 0
 749 0034 0400A0E1 		mov	r0, r4
 750 0038 1080BDE8 		pop	{r4, pc}
 751              		.cfi_endproc
 752              	.LFE71:
 753              		.personality	__gxx_personality_v0
 754              		.handlerdata
 755              	.LLSDA71:
 756 0008 FF       		.byte	0xff
 757 0009 FF       		.byte	0xff
 758 000a 01       		.byte	0x1
 759 000b 08       		.uleb128 .LLSDACSE71-.LLSDACSB71
 760              	.LLSDACSB71:
 761 000c 18       		.uleb128 .LEHB4-.LFB71
 762 000d 04       		.uleb128 .LEHE4-.LEHB4
 763 000e 20       		.uleb128 .L57-.LFB71
 764 000f 00       		.uleb128 0
 765 0010 30       		.uleb128 .LEHB5-.LFB71
 766 0011 04       		.uleb128 .LEHE5-.LEHB5
 767 0012 00       		.uleb128 0
 768 0013 00       		.uleb128 0
 769              	.LLSDACSE71:
 770              		.section	.text._ZN11BigUnsignedC2Et
 771              		.fnend
 773              		.global	_ZN11BigUnsignedC1Et
 774              		.set	_ZN11BigUnsignedC1Et,_ZN11BigUnsignedC2Et
 775              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveImEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 776              		.align	2
 777              		.weak	_ZNK11BigUnsigned18convertToPrimitiveImEET_v
 778              		.syntax unified
 779              		.arm
 780              		.fpu neon
 782              	_ZNK11BigUnsigned18convertToPrimitiveImEET_v:
 783              		.fnstart
 784              	.LFB128:
 365:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 366:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 367:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 368:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Ditto, but first check that x is nonnegative.  I could have put the check in
 369:../src/zxing_lib/bigint/BigUnsigned.hh ****  * initFromPrimitive and let the compiler optimize it out for unsigned-type
 370:../src/zxing_lib/bigint/BigUnsigned.hh ****  * instantiations, but I wanted to avoid the warning stupidly issued by g++ for
 371:../src/zxing_lib/bigint/BigUnsigned.hh ****  * a condition that is constant in *any* instantiation, even if not in all. */
 372:../src/zxing_lib/bigint/BigUnsigned.hh **** template <class X>
 373:../src/zxing_lib/bigint/BigUnsigned.hh **** void BigUnsigned::initFromSignedPrimitive(X x) {
 374:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x < 0)
 375:../src/zxing_lib/bigint/BigUnsigned.hh **** 		throw "BigUnsigned constructor: "
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Cannot construct a BigUnsigned from a negative number";
 377:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 378:../src/zxing_lib/bigint/BigUnsigned.hh **** 		initFromPrimitive(x);
 379:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 380:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 381:../src/zxing_lib/bigint/BigUnsigned.hh **** // CONVERSION TO PRIMITIVE INTEGERS
 382:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 383:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Template with the same idea as initFromPrimitive.  This might be slightly
 384:../src/zxing_lib/bigint/BigUnsigned.hh ****  * slower than the previous version with the masks, but it's much shorter and
 385:../src/zxing_lib/bigint/BigUnsigned.hh ****  * clearer, which is the library's stated goal. */
 386:../src/zxing_lib/bigint/BigUnsigned.hh **** template <class X>
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** X BigUnsigned::convertToPrimitive() const {
 785              		.loc 3 387 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              	.LVL77:
 790              	.LBB283:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 791              		.loc 3 388 0
 792 0000 043090E5 		ldr	r3, [r0, #4]
 793 0004 000053E3 		cmp	r3, #0
 794 0008 0E00000A 		beq	.L64
 795              	.LBB284:
 389:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return 0;
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 796              		.loc 3 391 0
 797 000c 010053E3 		cmp	r3, #1
 798 0010 0200001A 		bne	.L63
 799              	.LBB285:
 392:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		X x = X(blk[0]);
 800              		.loc 3 393 0
 801 0014 083090E5 		ldr	r3, [r0, #8]
 802 0018 000093E5 		ldr	r0, [r3]
 803              	.LVL78:
 804              	.L61:
 805              	.LBE285:
 806              	.LBE284:
 807              	.LBE283:
 394:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 395:../src/zxing_lib/bigint/BigUnsigned.hh **** 		if (Blk(x) == blk[0])
 396:../src/zxing_lib/bigint/BigUnsigned.hh **** 			// Successful conversion.
 397:../src/zxing_lib/bigint/BigUnsigned.hh **** 			return x;
 398:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Otherwise fall through.
 399:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 	throw "BigUnsigned::to<Primitive>: "
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 402:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 808              		.loc 3 402 0
 809 001c 1EFF2FE1 		bx	lr
 810              	.LVL79:
 811              	.L63:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 812              		.loc 3 387 0
 813 0020 10402DE9 		push	{r4, lr}
 814              		.save {r4, lr}
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 4, -8
 817              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 818              		.loc 3 401 0
 819 0024 0400A0E3 		mov	r0, #4
 820              	.LVL80:
 821 0028 FEFFFFEB 		bl	__cxa_allocate_exception
 822              	.LVL81:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 823              		.loc 3 400 0
 824 002c 003000E3 		movw	r3, #:lower16:.LC1
 825 0030 003040E3 		movt	r3, #:upper16:.LC1
 826 0034 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 827              		.loc 3 401 0
 828 0038 0020A0E3 		mov	r2, #0
 829 003c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 830 0040 001040E3 		movt	r1, #:upper16:_ZTIPKc
 831 0044 FEFFFFEB 		bl	__cxa_throw
 832              	.LVL82:
 833              	.L64:
 834              		.cfi_def_cfa_offset 0
 835              		.cfi_restore 4
 836              		.cfi_restore 14
 837              	.LBB286:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 838              		.loc 3 390 0
 839 0048 0000A0E3 		mov	r0, #0
 840              	.LVL83:
 841 004c F2FFFFEA 		b	.L61
 842              	.LBE286:
 843              		.cfi_endproc
 844              	.LFE128:
 845              		.fnend
 847              		.section	.text._ZNK11BigUnsigned14toUnsignedLongEv,"ax",%progbits
 848              		.align	2
 849              		.global	_ZNK11BigUnsigned14toUnsignedLongEv
 850              		.syntax unified
 851              		.arm
 852              		.fpu neon
 854              	_ZNK11BigUnsigned14toUnsignedLongEv:
 855              		.fnstart
 856              	.LFB82:
  15:../src/zxing_lib/bigint/BigUnsigned.cpp **** unsigned int   BigUnsigned::toUnsignedInt  () const { return convertToPrimitive      <unsigned int 
 857              		.loc 1 15 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              	.LVL84:
 862 0000 10402DE9 		push	{r4, lr}
 863              		.save {r4, lr}
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 4, -8
 866              		.cfi_offset 14, -4
  15:../src/zxing_lib/bigint/BigUnsigned.cpp **** unsigned int   BigUnsigned::toUnsignedInt  () const { return convertToPrimitive      <unsigned int 
 867              		.loc 1 15 0
 868 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveImEET_v
 869              	.LVL85:
 870 0008 1080BDE8 		pop	{r4, pc}
 871              		.cfi_endproc
 872              	.LFE82:
 873              		.fnend
 875              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 876              		.align	2
 877              		.weak	_ZNK11BigUnsigned18convertToPrimitiveIjEET_v
 878              		.syntax unified
 879              		.arm
 880              		.fpu neon
 882              	_ZNK11BigUnsigned18convertToPrimitiveIjEET_v:
 883              		.fnstart
 884              	.LFB129:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 885              		.loc 3 387 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              	.LVL86:
 890              	.LBB287:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 891              		.loc 3 388 0
 892 0000 043090E5 		ldr	r3, [r0, #4]
 893 0004 000053E3 		cmp	r3, #0
 894 0008 0E00000A 		beq	.L72
 895              	.LBB288:
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 896              		.loc 3 391 0
 897 000c 010053E3 		cmp	r3, #1
 898 0010 0200001A 		bne	.L71
 899              	.LBB289:
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 900              		.loc 3 393 0
 901 0014 083090E5 		ldr	r3, [r0, #8]
 902 0018 000093E5 		ldr	r0, [r3]
 903              	.LVL87:
 904              	.L69:
 905              	.LBE289:
 906              	.LBE288:
 907              	.LBE287:
 908              		.loc 3 402 0
 909 001c 1EFF2FE1 		bx	lr
 910              	.LVL88:
 911              	.L71:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 912              		.loc 3 387 0
 913 0020 10402DE9 		push	{r4, lr}
 914              		.save {r4, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 918              		.loc 3 401 0
 919 0024 0400A0E3 		mov	r0, #4
 920              	.LVL89:
 921 0028 FEFFFFEB 		bl	__cxa_allocate_exception
 922              	.LVL90:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 923              		.loc 3 400 0
 924 002c 003000E3 		movw	r3, #:lower16:.LC1
 925 0030 003040E3 		movt	r3, #:upper16:.LC1
 926 0034 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 927              		.loc 3 401 0
 928 0038 0020A0E3 		mov	r2, #0
 929 003c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 930 0040 001040E3 		movt	r1, #:upper16:_ZTIPKc
 931 0044 FEFFFFEB 		bl	__cxa_throw
 932              	.LVL91:
 933              	.L72:
 934              		.cfi_def_cfa_offset 0
 935              		.cfi_restore 4
 936              		.cfi_restore 14
 937              	.LBB290:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 938              		.loc 3 390 0
 939 0048 0000A0E3 		mov	r0, #0
 940              	.LVL92:
 941 004c F2FFFFEA 		b	.L69
 942              	.LBE290:
 943              		.cfi_endproc
 944              	.LFE129:
 945              		.fnend
 947              		.section	.text._ZNK11BigUnsigned13toUnsignedIntEv,"ax",%progbits
 948              		.align	2
 949              		.global	_ZNK11BigUnsigned13toUnsignedIntEv
 950              		.syntax unified
 951              		.arm
 952              		.fpu neon
 954              	_ZNK11BigUnsigned13toUnsignedIntEv:
 955              		.fnstart
 956              	.LFB83:
  16:../src/zxing_lib/bigint/BigUnsigned.cpp **** unsigned short BigUnsigned::toUnsignedShort() const { return convertToPrimitive      <unsigned shor
 957              		.loc 1 16 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961              	.LVL93:
 962 0000 10402DE9 		push	{r4, lr}
 963              		.save {r4, lr}
 964              		.cfi_def_cfa_offset 8
 965              		.cfi_offset 4, -8
 966              		.cfi_offset 14, -4
  16:../src/zxing_lib/bigint/BigUnsigned.cpp **** unsigned short BigUnsigned::toUnsignedShort() const { return convertToPrimitive      <unsigned shor
 967              		.loc 1 16 0
 968 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveIjEET_v
 969              	.LVL94:
 970 0008 1080BDE8 		pop	{r4, pc}
 971              		.cfi_endproc
 972              	.LFE83:
 973              		.fnend
 975              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveItEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 976              		.align	2
 977              		.weak	_ZNK11BigUnsigned18convertToPrimitiveItEET_v
 978              		.syntax unified
 979              		.arm
 980              		.fpu neon
 982              	_ZNK11BigUnsigned18convertToPrimitiveItEET_v:
 983              		.fnstart
 984              	.LFB130:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 985              		.loc 3 387 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              	.LVL95:
 990              	.LBB291:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 991              		.loc 3 388 0
 992 0000 043090E5 		ldr	r3, [r0, #4]
 993 0004 000053E3 		cmp	r3, #0
 994 0008 1100000A 		beq	.L80
 995              	.LBB292:
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 996              		.loc 3 391 0
 997 000c 010053E3 		cmp	r3, #1
 998 0010 0500001A 		bne	.L79
 999              	.LBB293:
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 1000              		.loc 3 393 0
 1001 0014 083090E5 		ldr	r3, [r0, #8]
 1002 0018 003093E5 		ldr	r3, [r3]
 1003 001c 7300FFE6 		uxth	r0, r3
 1004              	.LVL96:
 395:../src/zxing_lib/bigint/BigUnsigned.hh **** 			// Successful conversion.
 1005              		.loc 3 395 0
 1006 0020 030050E1 		cmp	r0, r3
 1007 0024 0000001A 		bne	.L79
 1008              	.LVL97:
 1009              	.L78:
 1010              	.LBE293:
 1011              	.LBE292:
 1012              	.LBE291:
 1013              		.loc 3 402 0
 1014 0028 1EFF2FE1 		bx	lr
 1015              	.L79:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 1016              		.loc 3 387 0
 1017 002c 10402DE9 		push	{r4, lr}
 1018              		.save {r4, lr}
 1019              		.cfi_def_cfa_offset 8
 1020              		.cfi_offset 4, -8
 1021              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 1022              		.loc 3 401 0
 1023 0030 0400A0E3 		mov	r0, #4
 1024 0034 FEFFFFEB 		bl	__cxa_allocate_exception
 1025              	.LVL98:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 1026              		.loc 3 400 0
 1027 0038 003000E3 		movw	r3, #:lower16:.LC1
 1028 003c 003040E3 		movt	r3, #:upper16:.LC1
 1029 0040 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 1030              		.loc 3 401 0
 1031 0044 0020A0E3 		mov	r2, #0
 1032 0048 001000E3 		movw	r1, #:lower16:_ZTIPKc
 1033 004c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 1034 0050 FEFFFFEB 		bl	__cxa_throw
 1035              	.LVL99:
 1036              	.L80:
 1037              		.cfi_def_cfa_offset 0
 1038              		.cfi_restore 4
 1039              		.cfi_restore 14
 1040              	.LBB294:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 1041              		.loc 3 390 0
 1042 0054 0000A0E3 		mov	r0, #0
 1043              	.LVL100:
 1044 0058 F2FFFFEA 		b	.L78
 1045              	.LBE294:
 1046              		.cfi_endproc
 1047              	.LFE130:
 1048              		.fnend
 1050              		.section	.text._ZNK11BigUnsigned15toUnsignedShortEv,"ax",%progbits
 1051              		.align	2
 1052              		.global	_ZNK11BigUnsigned15toUnsignedShortEv
 1053              		.syntax unified
 1054              		.arm
 1055              		.fpu neon
 1057              	_ZNK11BigUnsigned15toUnsignedShortEv:
 1058              		.fnstart
 1059              	.LFB84:
  17:../src/zxing_lib/bigint/BigUnsigned.cpp **** long           BigUnsigned::toLong         () const { return convertToSignedPrimitive<         long
 1060              		.loc 1 17 0
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
 1064              	.LVL101:
 1065 0000 10402DE9 		push	{r4, lr}
 1066              		.save {r4, lr}
 1067              		.cfi_def_cfa_offset 8
 1068              		.cfi_offset 4, -8
 1069              		.cfi_offset 14, -4
  17:../src/zxing_lib/bigint/BigUnsigned.cpp **** long           BigUnsigned::toLong         () const { return convertToSignedPrimitive<         long
 1070              		.loc 1 17 0
 1071 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveItEET_v
 1072              	.LVL102:
 1073 0008 1080BDE8 		pop	{r4, pc}
 1074              		.cfi_endproc
 1075              	.LFE84:
 1076              		.fnend
 1078              		.section	.text._ZN15NumberlikeArrayImE15allocateAndCopyEj,"axG",%progbits,_ZN15NumberlikeArrayImE1
 1079              		.align	2
 1080              		.weak	_ZN15NumberlikeArrayImE15allocateAndCopyEj
 1081              		.syntax unified
 1082              		.arm
 1083              		.fpu neon
 1085              	_ZN15NumberlikeArrayImE15allocateAndCopyEj:
 1086              		.fnstart
 1087              	.LFB134:
 106:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 1088              		.loc 2 106 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              	.LVL103:
 1093              	.LBB295:
 108:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		Blk *oldBlk = blk;
 1094              		.loc 2 108 0
 1095 0000 003090E5 		ldr	r3, [r0]
 1096 0004 010053E1 		cmp	r3, r1
 1097 0008 1EFF2F21 		bxcs	lr
 1098              	.LBE295:
 106:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 1099              		.loc 2 106 0
 1100 000c 70402DE9 		push	{r4, r5, r6, lr}
 1101              		.save {r4, r5, r6, lr}
 1102              		.cfi_def_cfa_offset 16
 1103              		.cfi_offset 4, -16
 1104              		.cfi_offset 5, -12
 1105              		.cfi_offset 6, -8
 1106              		.cfi_offset 14, -4
 1107 0010 0040A0E1 		mov	r4, r0
 1108              	.LBB297:
 1109              	.LBB296:
 109:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new number array
 1110              		.loc 2 109 0
 1111 0014 085090E5 		ldr	r5, [r0, #8]
 1112              	.LVL104:
 111:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = new Blk[cap];
 1113              		.loc 2 111 0
 1114 0018 001080E5 		str	r1, [r0]
 112:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Copy number blocks
 1115              		.loc 2 112 0
 1116 001c 2E0271E3 		cmn	r1, #-536870910
 1117 0020 0B00008A 		bhi	.L87
 112:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Copy number blocks
 1118              		.loc 2 112 0 is_stmt 0 discriminator 1
 1119 0024 0101A0E1 		lsl	r0, r1, #2
 1120              	.LVL105:
 1121 0028 FEFFFFEB 		bl	_Znaj
 1122              	.LVL106:
 1123 002c 080084E5 		str	r0, [r4, #8]
 1124              	.LVL107:
 115:../src/zxing_lib/bigint/NumberlikeArray.hh **** 			blk[i] = oldBlk[i];
 1125              		.loc 2 115 0 is_stmt 1 discriminator 1
 1126 0030 0030A0E3 		mov	r3, #0
 1127              	.LVL108:
 1128              	.L88:
 115:../src/zxing_lib/bigint/NumberlikeArray.hh **** 			blk[i] = oldBlk[i];
 1129              		.loc 2 115 0 is_stmt 0 discriminator 3
 1130 0034 042094E5 		ldr	r2, [r4, #4]
 1131 0038 020053E1 		cmp	r3, r2
 1132 003c 0500002A 		bcs	.L89
 116:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Delete the old array
 1133              		.loc 2 116 0 is_stmt 1 discriminator 2
 1134 0040 082094E5 		ldr	r2, [r4, #8]
 1135 0044 031195E7 		ldr	r1, [r5, r3, lsl #2]
 1136 0048 031182E7 		str	r1, [r2, r3, lsl #2]
 115:../src/zxing_lib/bigint/NumberlikeArray.hh **** 			blk[i] = oldBlk[i];
 1137              		.loc 2 115 0 discriminator 2
 1138 004c 013083E2 		add	r3, r3, #1
 1139              	.LVL109:
 1140 0050 F7FFFFEA 		b	.L88
 1141              	.LVL110:
 1142              	.L87:
 112:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Copy number blocks
 1143              		.loc 2 112 0 discriminator 2
 1144 0054 FEFFFFEB 		bl	__cxa_throw_bad_array_new_length
 1145              	.LVL111:
 1146              	.L89:
 118:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1147              		.loc 2 118 0
 1148 0058 000055E3 		cmp	r5, #0
 1149 005c 7080BD08 		popeq	{r4, r5, r6, pc}
 118:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1150              		.loc 2 118 0 is_stmt 0 discriminator 1
 1151 0060 0500A0E1 		mov	r0, r5
 1152 0064 FEFFFFEB 		bl	_ZdaPv
 1153              	.LVL112:
 1154 0068 7080BDE8 		pop	{r4, r5, r6, pc}
 1155              	.LBE296:
 1156              	.LBE297:
 1157              		.cfi_endproc
 1158              	.LFE134:
 1159              		.fnend
 1161              		.section	.text._ZN11BigUnsigned8setBlockEjm,"ax",%progbits
 1162              		.align	2
 1163              		.global	_ZN11BigUnsigned8setBlockEjm
 1164              		.syntax unified
 1165              		.arm
 1166              		.fpu neon
 1168              	_ZN11BigUnsigned8setBlockEjm:
 1169              		.fnstart
 1170              	.LFB88:
  24:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (newBlock == 0) {
 1171              		.loc 1 24 0 is_stmt 1
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 1175              	.LVL113:
 1176 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1177              		.save {r4, r5, r6, r7, r8, lr}
 1178              		.cfi_def_cfa_offset 24
 1179              		.cfi_offset 4, -24
 1180              		.cfi_offset 5, -20
 1181              		.cfi_offset 6, -16
 1182              		.cfi_offset 7, -12
 1183              		.cfi_offset 8, -8
 1184              		.cfi_offset 14, -4
 1185              	.LBB298:
  25:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (i < len) {
 1186              		.loc 1 25 0
 1187 0004 006052E2 		subs	r6, r2, #0
 1188 0008 0F00001A 		bne	.L95
  26:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			blk[i] = 0;
 1189              		.loc 1 26 0
 1190 000c 043090E5 		ldr	r3, [r0, #4]
 1191 0010 010053E1 		cmp	r3, r1
 1192 0014 F081BD98 		popls	{r4, r5, r6, r7, r8, pc}
  27:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			zapLeadingZeros();
 1193              		.loc 1 27 0
 1194 0018 083090E5 		ldr	r3, [r0, #8]
 1195 001c 012183E7 		str	r2, [r3, r1, lsl #2]
 1196              	.LVL114:
 1197              	.L97:
 1198              	.LBB299:
 1199              	.LBB300:
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
 1200              		.loc 3 31 0
 1201 0020 043090E5 		ldr	r3, [r0, #4]
 1202 0024 000053E3 		cmp	r3, #0
 1203 0028 F081BD08 		popeq	{r4, r5, r6, r7, r8, pc}
 1204 002c 082090E5 		ldr	r2, [r0, #8]
 1205 0030 071143E2 		sub	r1, r3, #-1073741823
 1206 0034 012192E7 		ldr	r2, [r2, r1, lsl #2]
 1207 0038 000052E3 		cmp	r2, #0
 1208 003c F081BD18 		popne	{r4, r5, r6, r7, r8, pc}
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 1209              		.loc 3 32 0
 1210 0040 013043E2 		sub	r3, r3, #1
 1211 0044 043080E5 		str	r3, [r0, #4]
 1212 0048 F4FFFFEA 		b	.L97
 1213              	.LVL115:
 1214              	.L95:
 1215 004c 0150A0E1 		mov	r5, r1
 1216 0050 0040A0E1 		mov	r4, r0
 1217              	.LBE300:
 1218              	.LBE299:
 1219              	.LBB301:
 1220              	.LBB302:
  32:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// The nonzero block extends the number.
 1221              		.loc 1 32 0
 1222 0054 043090E5 		ldr	r3, [r0, #4]
 1223 0058 030051E1 		cmp	r1, r3
 1224 005c 0200002A 		bcs	.L102
 1225              	.LVL116:
 1226              	.L98:
 1227              	.LBE302:
  40:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 1228              		.loc 1 40 0
 1229 0060 083094E5 		ldr	r3, [r4, #8]
 1230 0064 056183E7 		str	r6, [r3, r5, lsl #2]
 1231 0068 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1232              	.LVL117:
 1233              	.L102:
 1234              	.LBB305:
 1235              	.LBB303:
  34:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			// Zero any added blocks that we aren't setting.
 1236              		.loc 1 34 0
 1237 006c 017081E2 		add	r7, r1, #1
 1238 0070 0710A0E1 		mov	r1, r7
 1239              	.LVL118:
 1240 0074 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE15allocateAndCopyEj
 1241              	.LVL119:
 1242              	.LBB304:
  36:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[j] = 0;
 1243              		.loc 1 36 0
 1244 0078 043094E5 		ldr	r3, [r4, #4]
 1245              	.LVL120:
 1246              	.L100:
  36:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[j] = 0;
 1247              		.loc 1 36 0 is_stmt 0 discriminator 3
 1248 007c 050053E1 		cmp	r3, r5
 1249 0080 0400002A 		bcs	.L99
  37:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			len = i+1;
 1250              		.loc 1 37 0 is_stmt 1 discriminator 2
 1251 0084 081094E5 		ldr	r1, [r4, #8]
 1252 0088 0000A0E3 		mov	r0, #0
 1253 008c 030181E7 		str	r0, [r1, r3, lsl #2]
  36:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[j] = 0;
 1254              		.loc 1 36 0 discriminator 2
 1255 0090 013083E2 		add	r3, r3, #1
 1256              	.LVL121:
 1257 0094 F8FFFFEA 		b	.L100
 1258              	.L99:
 1259              	.LBE304:
  38:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 1260              		.loc 1 38 0
 1261 0098 047084E5 		str	r7, [r4, #4]
 1262              	.LBE303:
 1263 009c EFFFFFEA 		b	.L98
 1264              	.LBE305:
 1265              	.LBE301:
 1266              	.LBE298:
 1267              		.cfi_endproc
 1268              	.LFE88:
 1269              		.fnend
 1271              		.section	.text._ZN11BigUnsigned6setBitEjb,"ax",%progbits
 1272              		.align	2
 1273              		.global	_ZN11BigUnsigned6setBitEjb
 1274              		.syntax unified
 1275              		.arm
 1276              		.fpu neon
 1278              	_ZN11BigUnsigned6setBitEjb:
 1279              		.fnstart
 1280              	.LFB90:
  61:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index blockI = bi / N;
 1281              		.loc 1 61 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              	.LVL122:
 1286 0000 10402DE9 		push	{r4, lr}
 1287              		.save {r4, lr}
 1288              		.cfi_def_cfa_offset 8
 1289              		.cfi_offset 4, -8
 1290              		.cfi_offset 14, -4
 1291 0004 0130A0E1 		mov	r3, r1
  62:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Blk block = getBlock(blockI), mask = Blk(1) << (bi % N);
 1292              		.loc 1 62 0
 1293 0008 A112A0E1 		lsr	r1, r1, #5
 1294              	.LVL123:
 1295              	.LBB306:
 1296              	.LBB307:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1297              		.loc 3 92 0
 1298 000c 04C090E5 		ldr	ip, [r0, #4]
 1299 0010 0C0051E1 		cmp	r1, ip
 1300 0014 0900002A 		bcs	.L107
 1301 0018 08C090E5 		ldr	ip, [r0, #8]
 1302 001c 01C19CE7 		ldr	ip, [ip, r1, lsl #2]
 1303              	.L104:
 1304              	.LVL124:
 1305              	.LBE307:
 1306              	.LBE306:
  63:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	block = newBit ? (block | mask) : (block & ~mask);
 1307              		.loc 1 63 0
 1308 0020 1F3003E2 		and	r3, r3, #31
 1309              	.LVL125:
 1310 0024 01E0A0E3 		mov	lr, #1
 1311 0028 1E33A0E1 		lsl	r3, lr, r3
 1312              	.LVL126:
  64:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	setBlock(blockI, block);
 1313              		.loc 1 64 0
 1314 002c 000052E3 		cmp	r2, #0
 1315 0030 0400001A 		bne	.L109
  64:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	setBlock(blockI, block);
 1316              		.loc 1 64 0 is_stmt 0 discriminator 2
 1317 0034 0320CCE1 		bic	r2, ip, r3
 1318              	.LVL127:
 1319              	.L106:
  65:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 1320              		.loc 1 65 0 is_stmt 1 discriminator 4
 1321 0038 FEFFFFEB 		bl	_ZN11BigUnsigned8setBlockEjm
 1322              	.LVL128:
 1323 003c 1080BDE8 		pop	{r4, pc}
 1324              	.LVL129:
 1325              	.L107:
 1326              	.LBB309:
 1327              	.LBB308:
  92:../src/zxing_lib/bigint/BigUnsigned.hh **** 	/* Sets the requested block.  The number grows or shrinks as necessary. */
 1328              		.loc 3 92 0
 1329 0040 00C0A0E3 		mov	ip, #0
 1330 0044 F5FFFFEA 		b	.L104
 1331              	.LVL130:
 1332              	.L109:
 1333              	.LBE308:
 1334              	.LBE309:
  64:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	setBlock(blockI, block);
 1335              		.loc 1 64 0 discriminator 1
 1336 0048 0C2083E1 		orr	r2, r3, ip
 1337              	.LVL131:
 1338 004c F9FFFFEA 		b	.L106
 1339              		.cfi_endproc
 1340              	.LFE90:
 1341              		.fnend
 1343              		.section	.text._ZN11BigUnsignedppEv,"ax",%progbits
 1344              		.align	2
 1345              		.global	_ZN11BigUnsignedppEv
 1346              		.syntax unified
 1347              		.arm
 1348              		.fpu neon
 1350              	_ZN11BigUnsignedppEv:
 1351              		.fnstart
 1352              	.LFB102:
 659:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 1353              		.loc 1 659 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357              	.LVL132:
 1358 0000 70402DE9 		push	{r4, r5, r6, lr}
 1359              		.save {r4, r5, r6, lr}
 1360              		.cfi_def_cfa_offset 16
 1361              		.cfi_offset 4, -16
 1362              		.cfi_offset 5, -12
 1363              		.cfi_offset 6, -8
 1364              		.cfi_offset 14, -4
 1365              	.LVL133:
 661:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < len && carry; i++) {
 1366              		.loc 1 661 0
 1367 0004 0130A0E3 		mov	r3, #1
 662:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i]++;
 1368              		.loc 1 662 0
 1369 0008 0040A0E3 		mov	r4, #0
 1370              	.LVL134:
 1371              	.L112:
 662:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i]++;
 1372              		.loc 1 662 0 is_stmt 0 discriminator 4
 1373 000c 041090E5 		ldr	r1, [r0, #4]
 1374 0010 010054E1 		cmp	r4, r1
 1375 0014 0B00002A 		bcs	.L111
 662:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i]++;
 1376              		.loc 1 662 0 discriminator 2
 1377 0018 000053E3 		cmp	r3, #0
 1378 001c 0900000A 		beq	.L111
 663:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		carry = (blk[i] == 0);
 1379              		.loc 1 663 0 is_stmt 1 discriminator 3
 1380 0020 082090E5 		ldr	r2, [r0, #8]
 1381 0024 043192E7 		ldr	r3, [r2, r4, lsl #2]
 1382              	.LVL135:
 1383 0028 013083E2 		add	r3, r3, #1
 1384 002c 043182E7 		str	r3, [r2, r4, lsl #2]
 664:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 1385              		.loc 1 664 0 discriminator 3
 1386 0030 083090E5 		ldr	r3, [r0, #8]
 1387 0034 043193E7 		ldr	r3, [r3, r4, lsl #2]
 1388 0038 133F6FE1 		clz	r3, r3
 1389 003c A332A0E1 		lsr	r3, r3, #5
 1390              	.LVL136:
 662:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i]++;
 1391              		.loc 1 662 0 discriminator 3
 1392 0040 014084E2 		add	r4, r4, #1
 1393              	.LVL137:
 1394 0044 F0FFFFEA 		b	.L112
 1395              	.L111:
 666:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Allocate and then increase length, as in divideWithRemainder
 1396              		.loc 1 666 0
 1397 0048 000053E3 		cmp	r3, #0
 1398 004c 7080BD08 		popeq	{r4, r5, r6, pc}
 1399 0050 0050A0E1 		mov	r5, r0
 668:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len++;
 1400              		.loc 1 668 0
 1401 0054 011081E2 		add	r1, r1, #1
 1402 0058 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE15allocateAndCopyEj
 1403              	.LVL138:
 669:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 1;
 1404              		.loc 1 669 0
 1405 005c 043095E5 		ldr	r3, [r5, #4]
 1406 0060 013083E2 		add	r3, r3, #1
 1407 0064 043085E5 		str	r3, [r5, #4]
 670:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 1408              		.loc 1 670 0
 1409 0068 083095E5 		ldr	r3, [r5, #8]
 1410 006c 0120A0E3 		mov	r2, #1
 1411 0070 042183E7 		str	r2, [r3, r4, lsl #2]
 1412 0074 7080BDE8 		pop	{r4, r5, r6, pc}
 1413              		.cfi_endproc
 1414              	.LFE102:
 1415              		.fnend
 1417              		.section	.text._ZN11BigUnsignedppEi,"ax",%progbits
 1418              		.align	2
 1419              		.global	_ZN11BigUnsignedppEi
 1420              		.syntax unified
 1421              		.arm
 1422              		.fpu neon
 1424              	_ZN11BigUnsignedppEi:
 1425              		.fnstart
 1426              	.LFB103:
 675:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	operator ++();
 1427              		.loc 1 675 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              	.LVL139:
 1432 0000 10402DE9 		push	{r4, lr}
 1433              		.save {r4, lr}
 1434              		.cfi_def_cfa_offset 8
 1435              		.cfi_offset 4, -8
 1436              		.cfi_offset 14, -4
 676:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 1437              		.loc 1 676 0
 1438 0004 FEFFFFEB 		bl	_ZN11BigUnsignedppEv
 1439              	.LVL140:
 1440 0008 1080BDE8 		pop	{r4, pc}
 1441              		.cfi_endproc
 1442              	.LFE103:
 1443              		.fnend
 1445              		.section	.text._ZN15NumberlikeArrayImE8allocateEj,"axG",%progbits,_ZN15NumberlikeArrayImE8allocate
 1446              		.align	2
 1447              		.weak	_ZN15NumberlikeArrayImE8allocateEj
 1448              		.syntax unified
 1449              		.arm
 1450              		.fpu neon
 1452              	_ZN15NumberlikeArrayImE8allocateEj:
 1453              		.fnstart
 1454              	.LFB135:
  94:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 1455              		.loc 2 94 0
 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 0
 1458              		@ frame_needed = 0, uses_anonymous_args = 0
 1459              	.LVL141:
  96:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Delete the old number array
 1460              		.loc 2 96 0
 1461 0000 003090E5 		ldr	r3, [r0]
 1462 0004 010053E1 		cmp	r3, r1
 1463 0008 1EFF2F21 		bxcs	lr
  94:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// If the requested capacity is more than the current capacity...
 1464              		.loc 2 94 0
 1465 000c 70402DE9 		push	{r4, r5, r6, lr}
 1466              		.save {r4, r5, r6, lr}
 1467              		.cfi_def_cfa_offset 16
 1468              		.cfi_offset 4, -16
 1469              		.cfi_offset 5, -12
 1470              		.cfi_offset 6, -8
 1471              		.cfi_offset 14, -4
 1472 0010 0150A0E1 		mov	r5, r1
 1473 0014 0040A0E1 		mov	r4, r0
  98:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new array
 1474              		.loc 2 98 0
 1475 0018 080090E5 		ldr	r0, [r0, #8]
 1476              	.LVL142:
 1477 001c 000050E3 		cmp	r0, #0
 1478 0020 0000000A 		beq	.L119
  98:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		// Allocate the new array
 1479              		.loc 2 98 0 is_stmt 0 discriminator 1
 1480 0024 FEFFFFEB 		bl	_ZdaPv
 1481              	.LVL143:
 1482              	.L119:
 100:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = new Blk[cap];
 1483              		.loc 2 100 0 is_stmt 1
 1484 0028 005084E5 		str	r5, [r4]
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1485              		.loc 2 101 0
 1486 002c 2E0275E3 		cmn	r5, #-536870910
 1487 0030 0300008A 		bhi	.L120
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1488              		.loc 2 101 0 is_stmt 0 discriminator 1
 1489 0034 0501A0E1 		lsl	r0, r5, #2
 1490 0038 FEFFFFEB 		bl	_Znaj
 1491              	.LVL144:
 1492 003c 080084E5 		str	r0, [r4, #8]
 1493 0040 7080BDE8 		pop	{r4, r5, r6, pc}
 1494              	.L120:
 101:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1495              		.loc 2 101 0 discriminator 2
 1496 0044 FEFFFFEB 		bl	__cxa_throw_bad_array_new_length
 1497              	.LVL145:
 1498              		.cfi_endproc
 1499              	.LFE135:
 1500              		.fnend
 1502              		.section	.text._ZN15NumberlikeArrayImEaSERKS0_,"axG",%progbits,_ZN15NumberlikeArrayImEaSERKS0_,com
 1503              		.align	2
 1504              		.weak	_ZN15NumberlikeArrayImEaSERKS0_
 1505              		.syntax unified
 1506              		.arm
 1507              		.fpu neon
 1509              	_ZN15NumberlikeArrayImEaSERKS0_:
 1510              		.fnstart
 1511              	.LFB118:
 133:../src/zxing_lib/bigint/NumberlikeArray.hh **** 
 134:../src/zxing_lib/bigint/NumberlikeArray.hh **** template <class Blk>
 135:../src/zxing_lib/bigint/NumberlikeArray.hh **** void NumberlikeArray<Blk>::operator=(const NumberlikeArray<Blk> &x) {
 1512              		.loc 2 135 0 is_stmt 1
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516              	.LVL146:
 136:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Calls like a = a have no effect; catch them before the aliasing
 137:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	 * causes a problem */
 138:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	if (this == &x)
 1517              		.loc 2 138 0
 1518 0000 010050E1 		cmp	r0, r1
 1519 0004 1EFF2F01 		bxeq	lr
 135:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	/* Calls like a = a have no effect; catch them before the aliasing
 1520              		.loc 2 135 0
 1521 0008 70402DE9 		push	{r4, r5, r6, lr}
 1522              		.save {r4, r5, r6, lr}
 1523              		.cfi_def_cfa_offset 16
 1524              		.cfi_offset 4, -16
 1525              		.cfi_offset 5, -12
 1526              		.cfi_offset 6, -8
 1527              		.cfi_offset 14, -4
 1528 000c 0150A0E1 		mov	r5, r1
 1529 0010 0040A0E1 		mov	r4, r0
 139:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		return;
 140:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy length
 141:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	len = x.len;
 1530              		.loc 2 141 0
 1531 0014 041091E5 		ldr	r1, [r1, #4]
 1532              	.LVL147:
 1533 0018 041080E5 		str	r1, [r0, #4]
 142:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Expand array if necessary
 143:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	allocate(len);
 1534              		.loc 2 143 0
 1535 001c FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 1536              	.LVL148:
 144:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	// Copy number blocks
 145:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	Index i;
 146:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	for (i = 0; i < len; i++)
 1537              		.loc 2 146 0
 1538 0020 0030A0E3 		mov	r3, #0
 1539              	.LVL149:
 1540              	.L127:
 1541              		.loc 2 146 0 is_stmt 0 discriminator 3
 1542 0024 042094E5 		ldr	r2, [r4, #4]
 1543 0028 020053E1 		cmp	r3, r2
 1544 002c 7080BD28 		popcs	{r4, r5, r6, pc}
 147:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 1545              		.loc 2 147 0 is_stmt 1 discriminator 2
 1546 0030 082094E5 		ldr	r2, [r4, #8]
 1547 0034 080095E5 		ldr	r0, [r5, #8]
 1548 0038 030190E7 		ldr	r0, [r0, r3, lsl #2]
 1549 003c 030182E7 		str	r0, [r2, r3, lsl #2]
 146:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk[i] = x.blk[i];
 1550              		.loc 2 146 0 discriminator 2
 1551 0040 013083E2 		add	r3, r3, #1
 1552              	.LVL150:
 1553 0044 F6FFFFEA 		b	.L127
 1554              		.cfi_endproc
 1555              	.LFE118:
 1556              		.fnend
 1558              		.section	.text._ZN11BigUnsigned3addERKS_S1_,"ax",%progbits
 1559              		.align	2
 1560              		.global	_ZN11BigUnsigned3addERKS_S1_
 1561              		.syntax unified
 1562              		.arm
 1563              		.fpu neon
 1565              	_ZN11BigUnsigned3addERKS_S1_:
 1566              		.fnstart
 1567              	.LFB92:
 124:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, add(a, b));
 1568              		.loc 1 124 0
 1569              		.cfi_startproc
 1570              		.cfi_personality 0,__gxx_personality_v0
 1571              		.cfi_lsda 0,.LLSDA92
 1572              		@ args = 0, pretend = 0, frame = 16
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 1574              	.LVL151:
 1575 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 1576              		.save {r4, r5, r6, r7, lr}
 1577              		.cfi_def_cfa_offset 20
 1578              		.cfi_offset 4, -20
 1579              		.cfi_offset 5, -16
 1580              		.cfi_offset 6, -12
 1581              		.cfi_offset 7, -8
 1582              		.cfi_offset 14, -4
 1583              		.pad #20
 1584 0004 14D04DE2 		sub	sp, sp, #20
 1585              		.cfi_def_cfa_offset 40
 1586 0008 0060A0E1 		mov	r6, r0
 1587              	.LBB310:
 125:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If one argument is zero, copy the other.
 1588              		.loc 1 125 0
 1589 000c 020050E1 		cmp	r0, r2
 1590 0010 01005011 		cmpne	r0, r1
 1591 0014 0140A003 		moveq	r4, #1
 1592 0018 0040A013 		movne	r4, #0
 1593 001c 1000000A 		beq	.L150
 1594              	.LBE310:
 127:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		operator =(b);
 1595              		.loc 1 127 0
 1596 0020 043091E5 		ldr	r3, [r1, #4]
 1597 0024 000053E3 		cmp	r3, #0
 1598 0028 1B00000A 		beq	.L151
 130:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		operator =(a);
 1599              		.loc 1 130 0
 1600 002c 040092E5 		ldr	r0, [r2, #4]
 1601              	.LVL152:
 1602 0030 000050E3 		cmp	r0, #0
 1603 0034 1B00000A 		beq	.L152
 141:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &a;
 1604              		.loc 1 141 0
 1605 0038 000053E1 		cmp	r3, r0
 1606 003c 1C00003A 		bcc	.L147
 143:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else {
 1607              		.loc 1 143 0
 1608 0040 0270A0E1 		mov	r7, r2
 142:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &b;
 1609              		.loc 1 142 0
 1610 0044 0150A0E1 		mov	r5, r1
 1611              	.L138:
 1612              	.LVL153:
 149:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 1613              		.loc 1 149 0
 1614 0048 041095E5 		ldr	r1, [r5, #4]
 1615              	.LVL154:
 1616 004c 011081E2 		add	r1, r1, #1
 1617 0050 041086E5 		str	r1, [r6, #4]
 150:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// For each block index that is present in both inputs...
 1618              		.loc 1 150 0
 1619 0054 0600A0E1 		mov	r0, r6
 1620              	.LEHB6:
 1621 0058 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 1622              	.LVL155:
 1623              	.LEHE6:
 152:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Add input blocks
 1624              		.loc 1 152 0
 1625 005c 0030A0E3 		mov	r3, #0
 1626 0060 1A0000EA 		b	.L141
 1627              	.LVL156:
 1628              	.L150:
 1629              	.LBB325:
 1630              	.LBB311:
 1631              	.LBB312:
 1632              	.LBB313:
 1633              	.LBB314:
 1634              	.LBB315:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 1635              		.loc 2 45 0
 1636 0064 0030A0E3 		mov	r3, #0
 1637 0068 04308DE5 		str	r3, [sp, #4]
 1638 006c 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1639              		.loc 2 46 0
 1640 0070 0C308DE5 		str	r3, [sp, #12]
 1641              	.LVL157:
 1642              	.LBE315:
 1643              	.LBE314:
 1644              	.LBE313:
 1645              	.LBE312:
 125:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If one argument is zero, copy the other.
 1646              		.loc 1 125 0
 1647 0074 04008DE2 		add	r0, sp, #4
 1648              	.LVL158:
 1649              	.LEHB7:
 1650 0078 FEFFFFEB 		bl	_ZN11BigUnsigned3addERKS_S1_
 1651              	.LVL159:
 1652              	.LBB316:
 1653              	.LBB317:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 1654              		.loc 3 44 0
 1655 007c 04108DE2 		add	r1, sp, #4
 1656              	.LVL160:
 1657 0080 0600A0E1 		mov	r0, r6
 1658 0084 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 1659              	.LVL161:
 1660              	.LEHE7:
 1661              	.LBE317:
 1662              	.LBE316:
 1663              	.LBB318:
 1664              	.LBB319:
 1665              	.LBB320:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1666              		.loc 2 51 0
 1667 0088 0C009DE5 		ldr	r0, [sp, #12]
 1668 008c 000050E3 		cmp	r0, #0
 1669 0090 3B00000A 		beq	.L132
 1670 0094 FEFFFFEB 		bl	_ZdaPv
 1671              	.LVL162:
 1672 0098 390000EA 		b	.L132
 1673              	.LVL163:
 1674              	.L151:
 1675              	.LBE320:
 1676              	.LBE319:
 1677              	.LBE318:
 1678              	.LBE311:
 1679              	.LBE325:
 1680              	.LBB326:
 1681              	.LBB327:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 1682              		.loc 3 44 0
 1683 009c 0210A0E1 		mov	r1, r2
 1684              	.LVL164:
 1685              	.LEHB8:
 1686 00a0 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 1687              	.LVL165:
 1688 00a4 360000EA 		b	.L132
 1689              	.LVL166:
 1690              	.L152:
 1691              	.LBE327:
 1692              	.LBE326:
 1693              	.LBB328:
 1694              	.LBB329:
 1695 00a8 0600A0E1 		mov	r0, r6
 1696 00ac FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 1697              	.LVL167:
 1698 00b0 330000EA 		b	.L132
 1699              	.LVL168:
 1700              	.L147:
 1701              	.LBE329:
 1702              	.LBE328:
 146:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 1703              		.loc 1 146 0
 1704 00b4 0170A0E1 		mov	r7, r1
 145:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &a;
 1705              		.loc 1 145 0
 1706 00b8 0250A0E1 		mov	r5, r2
 1707 00bc E1FFFFEA 		b	.L138
 1708              	.LVL169:
 1709              	.L140:
 163:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		carryIn = carryOut; // Pass the carry along
 1710              		.loc 1 163 0 discriminator 2
 1711 00c0 08C096E5 		ldr	ip, [r6, #8]
 1712 00c4 01008CE7 		str	r0, [ip, r1]
 1713              	.LVL170:
 152:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Add input blocks
 1714              		.loc 1 152 0 discriminator 2
 1715 00c8 013083E2 		add	r3, r3, #1
 1716              	.LVL171:
 164:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 1717              		.loc 1 164 0 discriminator 2
 1718 00cc 0240A0E1 		mov	r4, r2
 1719              	.LVL172:
 1720              	.L141:
 152:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Add input blocks
 1721              		.loc 1 152 0 discriminator 1
 1722 00d0 042097E5 		ldr	r2, [r7, #4]
 1723 00d4 020053E1 		cmp	r3, r2
 1724 00d8 0C00002A 		bcs	.L139
 154:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a rollover occurred, the result is less than either input.
 1725              		.loc 1 154 0
 1726 00dc 082095E5 		ldr	r2, [r5, #8]
 1727 00e0 0311A0E1 		lsl	r1, r3, #2
 1728 00e4 030192E7 		ldr	r0, [r2, r3, lsl #2]
 1729 00e8 082097E5 		ldr	r2, [r7, #8]
 1730 00ec 032192E7 		ldr	r2, [r2, r3, lsl #2]
 1731              	.LVL173:
 157:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a carry was input, handle it
 1732              		.loc 1 157 0
 1733 00f0 020090E0 		adds	r0, r0, r2
 1734              	.LVL174:
 1735 00f4 0120A023 		movcs	r2, #1
 1736 00f8 0020A033 		movcc	r2, #0
 1737              	.LVL175:
 159:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			temp++;
 1738              		.loc 1 159 0
 1739 00fc 000054E3 		cmp	r4, #0
 1740 0100 EEFFFF0A 		beq	.L140
 1741              	.LVL176:
 161:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 1742              		.loc 1 161 0
 1743 0104 010090E2 		adds	r0, r0, #1
 1744              	.LVL177:
 1745 0108 01208203 		orreq	r2, r2, #1
 1746              	.LVL178:
 1747 010c EBFFFFEA 		b	.L140
 1748              	.LVL179:
 1749              	.L139:
 168:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a2->blk[i] + 1;
 1750              		.loc 1 168 0 discriminator 3
 1751 0110 042095E5 		ldr	r2, [r5, #4]
 1752 0114 020053E1 		cmp	r3, r2
 1753 0118 0B00002A 		bcs	.L142
 168:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a2->blk[i] + 1;
 1754              		.loc 1 168 0 is_stmt 0 discriminator 1
 1755 011c 000054E3 		cmp	r4, #0
 1756 0120 0900000A 		beq	.L142
 169:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		carryIn = (temp == 0);
 1757              		.loc 1 169 0 is_stmt 1 discriminator 2
 1758 0124 082095E5 		ldr	r2, [r5, #8]
 1759 0128 034192E7 		ldr	r4, [r2, r3, lsl #2]
 1760              	.LVL180:
 170:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = temp;
 1761              		.loc 1 170 0 discriminator 2
 1762 012c 011084E2 		add	r1, r4, #1
 1763              	.LVL181:
 1764 0130 010074E3 		cmn	r4, #1
 1765 0134 0040A013 		movne	r4, #0
 1766 0138 0140A003 		moveq	r4, #1
 1767              	.LVL182:
 171:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 1768              		.loc 1 171 0 discriminator 2
 1769 013c 082096E5 		ldr	r2, [r6, #8]
 1770 0140 031182E7 		str	r1, [r2, r3, lsl #2]
 168:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a2->blk[i] + 1;
 1771              		.loc 1 168 0 discriminator 2
 1772 0144 013083E2 		add	r3, r3, #1
 1773              	.LVL183:
 1774 0148 F0FFFFEA 		b	.L139
 1775              	.LVL184:
 1776              	.L142:
 175:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 1777              		.loc 1 175 0 discriminator 2
 1778 014c 042095E5 		ldr	r2, [r5, #4]
 1779 0150 020053E1 		cmp	r3, r2
 1780 0154 0500002A 		bcs	.L143
 176:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Set the extra block if there's still a carry, decrease length otherwise
 1781              		.loc 1 176 0 discriminator 1
 1782 0158 082096E5 		ldr	r2, [r6, #8]
 1783 015c 081095E5 		ldr	r1, [r5, #8]
 1784 0160 031191E7 		ldr	r1, [r1, r3, lsl #2]
 1785 0164 031182E7 		str	r1, [r2, r3, lsl #2]
 175:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 1786              		.loc 1 175 0 discriminator 1
 1787 0168 013083E2 		add	r3, r3, #1
 1788              	.LVL185:
 1789 016c F6FFFFEA 		b	.L142
 1790              	.L143:
 178:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 1;
 1791              		.loc 1 178 0
 1792 0170 000054E3 		cmp	r4, #0
 1793 0174 0400001A 		bne	.L153
 181:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 1794              		.loc 1 181 0
 1795 0178 043096E5 		ldr	r3, [r6, #4]
 1796              	.LVL186:
 1797 017c 013043E2 		sub	r3, r3, #1
 1798 0180 043086E5 		str	r3, [r6, #4]
 1799              	.LVL187:
 1800              	.L132:
 182:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 1801              		.loc 1 182 0
 1802 0184 14D08DE2 		add	sp, sp, #20
 1803              		.cfi_remember_state
 1804              		.cfi_def_cfa_offset 20
 1805              		@ sp needed
 1806 0188 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 1807              	.LVL188:
 1808              	.L153:
 1809              		.cfi_restore_state
 179:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	else
 1810              		.loc 1 179 0
 1811 018c 082096E5 		ldr	r2, [r6, #8]
 1812 0190 0110A0E3 		mov	r1, #1
 1813 0194 031182E7 		str	r1, [r2, r3, lsl #2]
 1814 0198 F9FFFFEA 		b	.L132
 1815              	.LVL189:
 1816              	.L148:
 1817              	.LBB330:
 1818              	.LBB324:
 1819              	.LBB321:
 1820              	.LBB322:
 1821              	.LBB323:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1822              		.loc 2 51 0
 1823 019c 0C009DE5 		ldr	r0, [sp, #12]
 1824 01a0 000050E3 		cmp	r0, #0
 1825 01a4 0000000A 		beq	.L146
 1826 01a8 FEFFFFEB 		bl	_ZdaPv
 1827              	.LVL190:
 1828              	.L146:
 1829 01ac FEFFFFEB 		bl	__cxa_end_cleanup
 1830              	.LVL191:
 1831              	.LEHE8:
 1832              	.LBE323:
 1833              	.LBE322:
 1834              	.LBE321:
 1835              	.LBE324:
 1836              	.LBE330:
 1837              		.cfi_endproc
 1838              	.LFE92:
 1839              		.personality	__gxx_personality_v0
 1840              		.handlerdata
 1841              	.LLSDA92:
 1842 0008 FF       		.byte	0xff
 1843 0009 FF       		.byte	0xff
 1844 000a 01       		.byte	0x1
 1845 000b 0F       		.uleb128 .LLSDACSE92-.LLSDACSB92
 1846              	.LLSDACSB92:
 1847 000c 58       		.uleb128 .LEHB6-.LFB92
 1848 000d 04       		.uleb128 .LEHE6-.LEHB6
 1849 000e 00       		.uleb128 0
 1850 000f 00       		.uleb128 0
 1851 0010 78       		.uleb128 .LEHB7-.LFB92
 1852 0011 10       		.uleb128 .LEHE7-.LEHB7
 1853 0012 9C03     		.uleb128 .L148-.LFB92
 1854 0014 00       		.uleb128 0
 1855 0015 A001     		.uleb128 .LEHB8-.LFB92
 1856 0017 9002     		.uleb128 .LEHE8-.LEHB8
 1857 0019 00       		.uleb128 0
 1858 001a 00       		.uleb128 0
 1859              	.LLSDACSE92:
 1860              		.section	.text._ZN11BigUnsigned3addERKS_S1_
 1861              		.fnend
 1863              		.section	.text._ZN11BigUnsigned8subtractERKS_S1_,"ax",%progbits
 1864              		.align	2
 1865              		.global	_ZN11BigUnsigned8subtractERKS_S1_
 1866              		.syntax unified
 1867              		.arm
 1868              		.fpu neon
 1870              	_ZN11BigUnsigned8subtractERKS_S1_:
 1871              		.fnstart
 1872              	.LFB93:
 184:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, subtract(a, b));
 1873              		.loc 1 184 0
 1874              		.cfi_startproc
 1875              		.cfi_personality 0,__gxx_personality_v0
 1876              		.cfi_lsda 0,.LLSDA93
 1877              		@ args = 0, pretend = 0, frame = 16
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
 1879              	.LVL192:
 1880 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 1881              		.save {r4, r5, r6, r7, lr}
 1882              		.cfi_def_cfa_offset 20
 1883              		.cfi_offset 4, -20
 1884              		.cfi_offset 5, -16
 1885              		.cfi_offset 6, -12
 1886              		.cfi_offset 7, -8
 1887              		.cfi_offset 14, -4
 1888              		.pad #20
 1889 0004 14D04DE2 		sub	sp, sp, #20
 1890              		.cfi_def_cfa_offset 40
 1891 0008 0040A0E1 		mov	r4, r0
 1892 000c 0160A0E1 		mov	r6, r1
 1893 0010 0270A0E1 		mov	r7, r2
 1894              	.LBB331:
 185:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b.len == 0) {
 1895              		.loc 1 185 0
 1896 0014 020050E1 		cmp	r0, r2
 1897 0018 01005011 		cmpne	r0, r1
 1898 001c 0150A003 		moveq	r5, #1
 1899 0020 0050A013 		movne	r5, #0
 1900 0024 0900000A 		beq	.L170
 1901              	.LBE331:
 186:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If b is zero, copy a.
 1902              		.loc 1 186 0
 1903 0028 043092E5 		ldr	r3, [r2, #4]
 1904 002c 000053E3 		cmp	r3, #0
 1905 0030 1400000A 		beq	.L171
 190:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a is shorter than b, the result is negative.
 1906              		.loc 1 190 0
 1907 0034 041091E5 		ldr	r1, [r1, #4]
 1908              	.LVL193:
 1909 0038 010053E1 		cmp	r3, r1
 1910 003c 1300008A 		bhi	.L172
 199:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 1911              		.loc 1 199 0
 1912 0040 041080E5 		str	r1, [r0, #4]
 1913              	.LEHB9:
 200:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// For each block index that is present in both inputs...
 1914              		.loc 1 200 0
 1915 0044 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 1916              	.LVL194:
 1917              	.LEHE9:
 202:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a.blk[i] - b.blk[i];
 1918              		.loc 1 202 0
 1919 0048 0030A0E3 		mov	r3, #0
 1920 004c 1C0000EA 		b	.L162
 1921              	.LVL195:
 1922              	.L170:
 1923              	.LBB346:
 1924              	.LBB332:
 1925              	.LBB333:
 1926              	.LBB334:
 1927              	.LBB335:
 1928              	.LBB336:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 1929              		.loc 2 45 0
 1930 0050 0030A0E3 		mov	r3, #0
 1931 0054 04308DE5 		str	r3, [sp, #4]
 1932 0058 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1933              		.loc 2 46 0
 1934 005c 0C308DE5 		str	r3, [sp, #12]
 1935              	.LVL196:
 1936              	.LBE336:
 1937              	.LBE335:
 1938              	.LBE334:
 1939              	.LBE333:
 185:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b.len == 0) {
 1940              		.loc 1 185 0
 1941 0060 04008DE2 		add	r0, sp, #4
 1942              	.LVL197:
 1943              	.LEHB10:
 1944 0064 FEFFFFEB 		bl	_ZN11BigUnsigned8subtractERKS_S1_
 1945              	.LVL198:
 1946              	.LBB337:
 1947              	.LBB338:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 1948              		.loc 3 44 0
 1949 0068 04108DE2 		add	r1, sp, #4
 1950              	.LVL199:
 1951 006c 0400A0E1 		mov	r0, r4
 1952 0070 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 1953              	.LVL200:
 1954              	.LEHE10:
 1955              	.LBE338:
 1956              	.LBE337:
 1957              	.LBB339:
 1958              	.LBB340:
 1959              	.LBB341:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 1960              		.loc 2 51 0
 1961 0074 0C009DE5 		ldr	r0, [sp, #12]
 1962 0078 000050E3 		cmp	r0, #0
 1963 007c 5000000A 		beq	.L154
 1964 0080 FEFFFFEB 		bl	_ZdaPv
 1965              	.LVL201:
 1966 0084 4E0000EA 		b	.L154
 1967              	.LVL202:
 1968              	.L171:
 1969              	.LEHB11:
 1970              	.LBE341:
 1971              	.LBE340:
 1972              	.LBE339:
 1973              	.LBE332:
 1974              	.LBE346:
 1975              	.LBB347:
 1976              	.LBB348:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 1977              		.loc 3 44 0
 1978 0088 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 1979              	.LVL203:
 1980 008c 4C0000EA 		b	.L154
 1981              	.LVL204:
 1982              	.L172:
 1983              	.LBE348:
 1984              	.LBE347:
 193:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Some variables...
 1985              		.loc 1 193 0
 1986 0090 0400A0E3 		mov	r0, #4
 1987              	.LVL205:
 1988 0094 FEFFFFEB 		bl	__cxa_allocate_exception
 1989              	.LVL206:
 1990 0098 003000E3 		movw	r3, #:lower16:.LC2
 1991 009c 003040E3 		movt	r3, #:upper16:.LC2
 1992 00a0 003080E5 		str	r3, [r0]
 1993 00a4 0020A0E3 		mov	r2, #0
 1994 00a8 001000E3 		movw	r1, #:lower16:_ZTIPKc
 1995 00ac 001040E3 		movt	r1, #:upper16:_ZTIPKc
 1996 00b0 FEFFFFEB 		bl	__cxa_throw
 1997              	.LVL207:
 1998              	.L161:
 212:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrowIn = borrowOut; // Pass the borrow along
 1999              		.loc 1 212 0 discriminator 2
 2000 00b4 08C094E5 		ldr	ip, [r4, #8]
 2001 00b8 00208CE7 		str	r2, [ip, r0]
 2002              	.LVL208:
 202:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a.blk[i] - b.blk[i];
 2003              		.loc 1 202 0 discriminator 2
 2004 00bc 013083E2 		add	r3, r3, #1
 2005              	.LVL209:
 213:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 2006              		.loc 1 213 0 discriminator 2
 2007 00c0 0150A0E1 		mov	r5, r1
 2008              	.LVL210:
 2009              	.L162:
 202:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		temp = a.blk[i] - b.blk[i];
 2010              		.loc 1 202 0 discriminator 1
 2011 00c4 042097E5 		ldr	r2, [r7, #4]
 2012 00c8 020053E1 		cmp	r3, r2
 2013 00cc 0E00002A 		bcs	.L160
 203:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// If a reverse rollover occurred,
 2014              		.loc 1 203 0
 2015 00d0 082096E5 		ldr	r2, [r6, #8]
 2016 00d4 0301A0E1 		lsl	r0, r3, #2
 2017 00d8 031192E7 		ldr	r1, [r2, r3, lsl #2]
 2018 00dc 082097E5 		ldr	r2, [r7, #8]
 2019 00e0 032192E7 		ldr	r2, [r2, r3, lsl #2]
 2020 00e4 022041E0 		sub	r2, r1, r2
 2021              	.LVL211:
 206:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// Handle an incoming borrow
 2022              		.loc 1 206 0
 2023 00e8 020051E1 		cmp	r1, r2
 2024 00ec 0010A023 		movcs	r1, #0
 2025 00f0 0110A033 		movcc	r1, #1
 2026              	.LVL212:
 208:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			borrowOut |= (temp == 0);
 2027              		.loc 1 208 0
 2028 00f4 000055E3 		cmp	r5, #0
 2029 00f8 EDFFFF0A 		beq	.L161
 2030 00fc 000052E3 		cmp	r2, #0
 2031 0100 01108103 		orreq	r1, r1, #1
 2032              	.LVL213:
 210:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 2033              		.loc 1 210 0
 2034 0104 012042E2 		sub	r2, r2, #1
 2035              	.LVL214:
 2036 0108 E9FFFFEA 		b	.L161
 2037              	.LVL215:
 2038              	.L160:
 217:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrowIn = (a.blk[i] == 0);
 2039              		.loc 1 217 0 discriminator 3
 2040 010c 042096E5 		ldr	r2, [r6, #4]
 2041 0110 020053E1 		cmp	r3, r2
 2042 0114 0A00002A 		bcs	.L163
 217:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrowIn = (a.blk[i] == 0);
 2043              		.loc 1 217 0 is_stmt 0 discriminator 1
 2044 0118 000055E3 		cmp	r5, #0
 2045 011c 0800000A 		beq	.L163
 218:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a.blk[i] - 1;
 2046              		.loc 1 218 0 is_stmt 1 discriminator 2
 2047 0120 082096E5 		ldr	r2, [r6, #8]
 2048 0124 032192E7 		ldr	r2, [r2, r3, lsl #2]
 2049 0128 125F6FE1 		clz	r5, r2
 2050              	.LVL216:
 2051 012c A552A0E1 		lsr	r5, r5, #5
 2052              	.LVL217:
 219:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 2053              		.loc 1 219 0 discriminator 2
 2054 0130 081094E5 		ldr	r1, [r4, #8]
 2055 0134 012042E2 		sub	r2, r2, #1
 2056 0138 032181E7 		str	r2, [r1, r3, lsl #2]
 217:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		borrowIn = (a.blk[i] == 0);
 2057              		.loc 1 217 0 discriminator 2
 2058 013c 013083E2 		add	r3, r3, #1
 2059              	.LVL218:
 2060 0140 F1FFFFEA 		b	.L160
 2061              	.L163:
 224:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len = 0;
 2062              		.loc 1 224 0
 2063 0144 000055E3 		cmp	r5, #0
 2064 0148 0800001A 		bne	.L173
 2065              	.L164:
 229:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			blk[i] = a.blk[i];
 2066              		.loc 1 229 0 discriminator 2
 2067 014c 042096E5 		ldr	r2, [r6, #4]
 2068 0150 020053E1 		cmp	r3, r2
 2069 0154 1200002A 		bcs	.L165
 230:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap leading zeros
 2070              		.loc 1 230 0 discriminator 1
 2071 0158 082094E5 		ldr	r2, [r4, #8]
 2072 015c 081096E5 		ldr	r1, [r6, #8]
 2073 0160 031191E7 		ldr	r1, [r1, r3, lsl #2]
 2074 0164 031182E7 		str	r1, [r2, r3, lsl #2]
 229:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			blk[i] = a.blk[i];
 2075              		.loc 1 229 0 discriminator 1
 2076 0168 013083E2 		add	r3, r3, #1
 2077              	.LVL219:
 2078 016c F6FFFFEA 		b	.L164
 2079              	.L173:
 225:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		throw "BigUnsigned::subtract: Negative result in unsigned calculation";
 2080              		.loc 1 225 0
 2081 0170 0050A0E3 		mov	r5, #0
 2082              	.LVL220:
 2083 0174 045084E5 		str	r5, [r4, #4]
 226:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else
 2084              		.loc 1 226 0
 2085 0178 0400A0E3 		mov	r0, #4
 2086 017c FEFFFFEB 		bl	__cxa_allocate_exception
 2087              	.LVL221:
 2088 0180 003000E3 		movw	r3, #:lower16:.LC2
 2089 0184 003040E3 		movt	r3, #:upper16:.LC2
 2090 0188 003080E5 		str	r3, [r0]
 2091 018c 0520A0E1 		mov	r2, r5
 2092 0190 001000E3 		movw	r1, #:lower16:_ZTIPKc
 2093 0194 001040E3 		movt	r1, #:upper16:_ZTIPKc
 2094 0198 FEFFFFEB 		bl	__cxa_throw
 2095              	.LVL222:
 2096              	.L174:
 2097              	.LBB349:
 2098              	.LBB350:
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2099              		.loc 3 32 0
 2100 019c 013043E2 		sub	r3, r3, #1
 2101 01a0 043084E5 		str	r3, [r4, #4]
 2102              	.L165:
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
 2103              		.loc 3 31 0
 2104 01a4 043094E5 		ldr	r3, [r4, #4]
 2105 01a8 000053E3 		cmp	r3, #0
 2106 01ac 0400000A 		beq	.L154
 2107 01b0 082094E5 		ldr	r2, [r4, #8]
 2108 01b4 071143E2 		sub	r1, r3, #-1073741823
 2109 01b8 012192E7 		ldr	r2, [r2, r1, lsl #2]
 2110 01bc 000052E3 		cmp	r2, #0
 2111 01c0 F5FFFF0A 		beq	.L174
 2112              	.LVL223:
 2113              	.L154:
 2114              	.LBE350:
 2115              	.LBE349:
 233:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2116              		.loc 1 233 0
 2117 01c4 14D08DE2 		add	sp, sp, #20
 2118              		.cfi_remember_state
 2119              		.cfi_def_cfa_offset 20
 2120              		@ sp needed
 2121 01c8 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 2122              	.LVL224:
 2123              	.L168:
 2124              		.cfi_restore_state
 2125              	.LBB351:
 2126              	.LBB345:
 2127              	.LBB342:
 2128              	.LBB343:
 2129              	.LBB344:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2130              		.loc 2 51 0
 2131 01cc 0C009DE5 		ldr	r0, [sp, #12]
 2132 01d0 000050E3 		cmp	r0, #0
 2133 01d4 0000000A 		beq	.L167
 2134 01d8 FEFFFFEB 		bl	_ZdaPv
 2135              	.LVL225:
 2136              	.L167:
 2137 01dc FEFFFFEB 		bl	__cxa_end_cleanup
 2138              	.LVL226:
 2139              	.LEHE11:
 2140              	.LBE344:
 2141              	.LBE343:
 2142              	.LBE342:
 2143              	.LBE345:
 2144              	.LBE351:
 2145              		.cfi_endproc
 2146              	.LFE93:
 2147              		.personality	__gxx_personality_v0
 2148              		.handlerdata
 2149              	.LLSDA93:
 2150 0008 FF       		.byte	0xff
 2151 0009 FF       		.byte	0xff
 2152 000a 01       		.byte	0x1
 2153 000b 0F       		.uleb128 .LLSDACSE93-.LLSDACSB93
 2154              	.LLSDACSB93:
 2155 000c 44       		.uleb128 .LEHB9-.LFB93
 2156 000d 04       		.uleb128 .LEHE9-.LEHB9
 2157 000e 00       		.uleb128 0
 2158 000f 00       		.uleb128 0
 2159 0010 64       		.uleb128 .LEHB10-.LFB93
 2160 0011 10       		.uleb128 .LEHE10-.LEHB10
 2161 0012 CC03     		.uleb128 .L168-.LFB93
 2162 0014 00       		.uleb128 0
 2163 0015 8801     		.uleb128 .LEHB11-.LFB93
 2164 0017 D802     		.uleb128 .LEHE11-.LEHB11
 2165 0019 00       		.uleb128 0
 2166 001a 00       		.uleb128 0
 2167              	.LLSDACSE93:
 2168              		.section	.text._ZN11BigUnsigned8subtractERKS_S1_
 2169              		.fnend
 2171              		.section	.text._ZN11BigUnsigned8multiplyERKS_S1_,"ax",%progbits
 2172              		.align	2
 2173              		.global	_ZN11BigUnsigned8multiplyERKS_S1_
 2174              		.syntax unified
 2175              		.arm
 2176              		.fpu neon
 2178              	_ZN11BigUnsigned8multiplyERKS_S1_:
 2179              		.fnstart
 2180              	.LFB95:
 300:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, multiply(a, b));
 2181              		.loc 1 300 0
 2182              		.cfi_startproc
 2183              		.cfi_personality 0,__gxx_personality_v0
 2184              		.cfi_lsda 0,.LLSDA95
 2185              		@ args = 0, pretend = 0, frame = 16
 2186              		@ frame_needed = 0, uses_anonymous_args = 0
 2187              	.LVL227:
 2188 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2189              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2190              		.cfi_def_cfa_offset 36
 2191              		.cfi_offset 4, -36
 2192              		.cfi_offset 5, -32
 2193              		.cfi_offset 6, -28
 2194              		.cfi_offset 7, -24
 2195              		.cfi_offset 8, -20
 2196              		.cfi_offset 9, -16
 2197              		.cfi_offset 10, -12
 2198              		.cfi_offset 11, -8
 2199              		.cfi_offset 14, -4
 2200              		.pad #20
 2201 0004 14D04DE2 		sub	sp, sp, #20
 2202              		.cfi_def_cfa_offset 56
 2203 0008 0050A0E1 		mov	r5, r0
 2204 000c 0160A0E1 		mov	r6, r1
 2205 0010 0240A0E1 		mov	r4, r2
 2206              	.LBB368:
 301:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If either a or b is zero, set to zero.
 2207              		.loc 1 301 0
 2208 0014 020050E1 		cmp	r0, r2
 2209 0018 01005011 		cmpne	r0, r1
 2210 001c 0170A003 		moveq	r7, #1
 2211 0020 0070A013 		movne	r7, #0
 2212 0024 0900000A 		beq	.L199
 2213              	.LBE368:
 303:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len = 0;
 2214              		.loc 1 303 0
 2215 0028 043091E5 		ldr	r3, [r1, #4]
 2216 002c 000053E3 		cmp	r3, #0
 2217 0030 0200000A 		beq	.L179
 303:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len = 0;
 2218              		.loc 1 303 0 is_stmt 0 discriminator 1
 2219 0034 041092E5 		ldr	r1, [r2, #4]
 2220              	.LVL228:
 2221 0038 000051E3 		cmp	r1, #0
 2222 003c 1100001A 		bne	.L180
 2223              	.L179:
 304:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 2224              		.loc 1 304 0 is_stmt 1
 2225 0040 0030A0E3 		mov	r3, #0
 2226 0044 043085E5 		str	r3, [r5, #4]
 2227              	.LVL229:
 2228              	.L175:
 369:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2229              		.loc 1 369 0
 2230 0048 14D08DE2 		add	sp, sp, #20
 2231              		.cfi_remember_state
 2232              		.cfi_def_cfa_offset 36
 2233              		@ sp needed
 2234 004c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2235              	.LVL230:
 2236              	.L199:
 2237              		.cfi_restore_state
 2238              	.LBB383:
 2239              	.LBB369:
 2240              	.LBB370:
 2241              	.LBB371:
 2242              	.LBB372:
 2243              	.LBB373:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 2244              		.loc 2 45 0
 2245 0050 0030A0E3 		mov	r3, #0
 2246 0054 04308DE5 		str	r3, [sp, #4]
 2247 0058 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2248              		.loc 2 46 0
 2249 005c 0C308DE5 		str	r3, [sp, #12]
 2250              	.LVL231:
 2251              	.LBE373:
 2252              	.LBE372:
 2253              	.LBE371:
 2254              	.LBE370:
 301:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// If either a or b is zero, set to zero.
 2255              		.loc 1 301 0
 2256 0060 04008DE2 		add	r0, sp, #4
 2257              	.LVL232:
 2258              	.LEHB12:
 2259 0064 FEFFFFEB 		bl	_ZN11BigUnsigned8multiplyERKS_S1_
 2260              	.LVL233:
 2261              	.LBB374:
 2262              	.LBB375:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2263              		.loc 3 44 0
 2264 0068 04108DE2 		add	r1, sp, #4
 2265              	.LVL234:
 2266 006c 0500A0E1 		mov	r0, r5
 2267 0070 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 2268              	.LVL235:
 2269              	.LEHE12:
 2270              	.LBE375:
 2271              	.LBE374:
 2272              	.LBB376:
 2273              	.LBB377:
 2274              	.LBB378:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2275              		.loc 2 51 0
 2276 0074 0C009DE5 		ldr	r0, [sp, #12]
 2277 0078 000050E3 		cmp	r0, #0
 2278 007c F1FFFF0A 		beq	.L175
 2279 0080 FEFFFFEB 		bl	_ZdaPv
 2280              	.LVL236:
 2281 0084 EFFFFFEA 		b	.L175
 2282              	.LVL237:
 2283              	.L180:
 2284              	.LBE378:
 2285              	.LBE377:
 2286              	.LBE376:
 2287              	.LBE369:
 2288              	.LBE383:
 320:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 2289              		.loc 1 320 0
 2290 0088 011083E0 		add	r1, r3, r1
 2291 008c 041080E5 		str	r1, [r0, #4]
 2292              	.LEHB13:
 321:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zero out this object
 2293              		.loc 1 321 0
 2294 0090 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 2295              	.LVL238:
 323:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 2296              		.loc 1 323 0
 2297 0094 0030A0E3 		mov	r3, #0
 2298              	.LVL239:
 2299              	.L182:
 323:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 2300              		.loc 1 323 0 is_stmt 0 discriminator 3
 2301 0098 042095E5 		ldr	r2, [r5, #4]
 2302 009c 020053E1 		cmp	r3, r2
 2303 00a0 0400002A 		bcs	.L194
 324:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// For each block of the first number...
 2304              		.loc 1 324 0 is_stmt 1 discriminator 2
 2305 00a4 082095E5 		ldr	r2, [r5, #8]
 2306 00a8 0010A0E3 		mov	r1, #0
 2307 00ac 031182E7 		str	r1, [r2, r3, lsl #2]
 323:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 2308              		.loc 1 323 0 discriminator 2
 2309 00b0 013083E2 		add	r3, r3, #1
 2310              	.LVL240:
 2311 00b4 F7FFFFEA 		b	.L182
 2312              	.L194:
 2313 00b8 00A0A0E3 		mov	r10, #0
 2314 00bc 3D0000EA 		b	.L181
 2315              	.LVL241:
 2316              	.L195:
 2317              	.LBB384:
 2318              	.LBB385:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 2319              		.loc 1 295 0
 2320 00c0 00C0A0E3 		mov	ip, #0
 2321 00c4 130000EA 		b	.L187
 2322              	.LVL242:
 2323              	.L196:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 2324              		.loc 1 296 0
 2325 00c8 00B0A0E3 		mov	fp, #0
 2326 00cc 170000EA 		b	.L188
 2327              	.LVL243:
 2328              	.L189:
 2329              	.LBE385:
 2330              	.LBE384:
 355:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				carryIn = carryOut;
 2331              		.loc 1 355 0 discriminator 2
 2332 00d0 091088E7 		str	r1, [r8, r9]
 2333              	.LVL244:
 344:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				/*
 2334              		.loc 1 344 0 discriminator 2
 2335 00d4 010080E2 		add	r0, r0, #1
 2336              	.LVL245:
 2337 00d8 013083E2 		add	r3, r3, #1
 2338              	.LVL246:
 356:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 2339              		.loc 1 356 0 discriminator 2
 2340 00dc 0C20A0E1 		mov	r2, ip
 2341              	.LVL247:
 2342              	.L190:
 344:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				/*
 2343              		.loc 1 344 0 discriminator 1
 2344 00e0 041094E5 		ldr	r1, [r4, #4]
 2345 00e4 010050E1 		cmp	r0, r1
 2346 00e8 1900008A 		bhi	.L186
 349:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				carryOut = (temp < blk[k]);
 2347              		.loc 1 349 0
 2348 00ec 088095E5 		ldr	r8, [r5, #8]
 2349 00f0 0391A0E1 		lsl	r9, r3, #2
 2350 00f4 031198E7 		ldr	r1, [r8, r3, lsl #2]
 2351              	.LVL248:
 2352              	.LBB387:
 2353              	.LBB386:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 2354              		.loc 1 295 0
 2355 00f8 000050E3 		cmp	r0, #0
 2356 00fc 00005E13 		cmpne	lr, #0
 2357 0100 EEFFFF0A 		beq	.L195
 2358 0104 08C094E5 		ldr	ip, [r4, #8]
 2359 0108 07B140E2 		sub	fp, r0, #-1073741823
 2360 010c 0BB19CE7 		ldr	fp, [ip, fp, lsl #2]
 2361 0110 20C06EE2 		rsb	ip, lr, #32
 2362 0114 3BCCA0E1 		lsr	ip, fp, ip
 2363              	.L187:
 2364              	.LVL249:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 2365              		.loc 1 296 0
 2366 0118 04B094E5 		ldr	fp, [r4, #4]
 2367 011c 0B0050E1 		cmp	r0, fp
 2368 0120 E8FFFF0A 		beq	.L196
 2369 0124 08B094E5 		ldr	fp, [r4, #8]
 2370 0128 00B19BE7 		ldr	fp, [fp, r0, lsl #2]
 2371 012c 1BBEA0E1 		lsl	fp, fp, lr
 2372              	.L188:
 2373              	.LVL250:
 297:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 2374              		.loc 1 297 0
 2375 0130 0BC08CE1 		orr	ip, ip, fp
 2376              	.LVL251:
 2377              	.LBE386:
 2378              	.LBE387:
 350:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				if (carryIn) {
 2379              		.loc 1 350 0
 2380 0134 0C1091E0 		adds	r1, r1, ip
 2381              	.LVL252:
 2382 0138 01C0A023 		movcs	ip, #1
 2383 013c 00C0A033 		movcc	ip, #0
 2384              	.LVL253:
 351:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					temp++;
 2385              		.loc 1 351 0
 2386 0140 000052E3 		cmp	r2, #0
 2387 0144 E1FFFF0A 		beq	.L189
 2388              	.LVL254:
 353:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				}
 2389              		.loc 1 353 0
 2390 0148 011091E2 		adds	r1, r1, #1
 2391              	.LVL255:
 2392 014c 01C08C03 		orreq	ip, ip, #1
 2393              	.LVL256:
 2394 0150 DEFFFFEA 		b	.L189
 2395              	.LVL257:
 2396              	.L186:
 360:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[k]++;
 2397              		.loc 1 360 0 discriminator 2
 2398 0154 000052E3 		cmp	r2, #0
 2399 0158 0900000A 		beq	.L185
 361:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				carryIn = (blk[k] == 0);
 2400              		.loc 1 361 0 discriminator 1
 2401 015c 081095E5 		ldr	r1, [r5, #8]
 2402 0160 032191E7 		ldr	r2, [r1, r3, lsl #2]
 2403              	.LVL258:
 2404 0164 012082E2 		add	r2, r2, #1
 2405 0168 032181E7 		str	r2, [r1, r3, lsl #2]
 362:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 2406              		.loc 1 362 0 discriminator 1
 2407 016c 082095E5 		ldr	r2, [r5, #8]
 2408 0170 032192E7 		ldr	r2, [r2, r3, lsl #2]
 2409 0174 122F6FE1 		clz	r2, r2
 2410 0178 A222A0E1 		lsr	r2, r2, #5
 2411              	.LVL259:
 360:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				blk[k]++;
 2412              		.loc 1 360 0 discriminator 1
 2413 017c 013083E2 		add	r3, r3, #1
 2414              	.LVL260:
 2415 0180 F3FFFFEA 		b	.L186
 2416              	.LVL261:
 2417              	.L185:
 328:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			if ((a.blk[i] & (Blk(1) << i2)) == 0)
 2418              		.loc 1 328 0 discriminator 2
 2419 0184 01E08EE2 		add	lr, lr, #1
 2420              	.LVL262:
 2421              	.L191:
 328:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			if ((a.blk[i] & (Blk(1) << i2)) == 0)
 2422              		.loc 1 328 0 is_stmt 0 discriminator 1
 2423 0188 1F005EE3 		cmp	lr, #31
 2424 018c 0800008A 		bhi	.L184
 329:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				continue;
 2425              		.loc 1 329 0 is_stmt 1
 2426 0190 083096E5 		ldr	r3, [r6, #8]
 2427 0194 0A3193E7 		ldr	r3, [r3, r10, lsl #2]
 2428 0198 333EA0E1 		lsr	r3, r3, lr
 2429 019c 010013E3 		tst	r3, #1
 2430 01a0 F7FFFF0A 		beq	.L185
 2431 01a4 0720A0E1 		mov	r2, r7
 2432 01a8 0A30A0E1 		mov	r3, r10
 2433 01ac 0000A0E3 		mov	r0, #0
 2434 01b0 CAFFFFEA 		b	.L190
 2435              	.L184:
 326:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// For each 1-bit of that block...
 2436              		.loc 1 326 0 discriminator 2
 2437 01b4 01A08AE2 		add	r10, r10, #1
 2438              	.LVL263:
 2439              	.L181:
 326:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// For each 1-bit of that block...
 2440              		.loc 1 326 0 is_stmt 0 discriminator 1
 2441 01b8 043096E5 		ldr	r3, [r6, #4]
 2442 01bc 03005AE1 		cmp	r10, r3
 2443 01c0 00E0A033 		movcc	lr, #0
 2444 01c4 EFFFFF3A 		bcc	.L191
 2445              	.L183:
 367:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 2446              		.loc 1 367 0 is_stmt 1
 2447 01c8 082095E5 		ldr	r2, [r5, #8]
 2448 01cc 043095E5 		ldr	r3, [r5, #4]
 2449 01d0 071143E2 		sub	r1, r3, #-1073741823
 2450 01d4 012192E7 		ldr	r2, [r2, r1, lsl #2]
 2451 01d8 000052E3 		cmp	r2, #0
 368:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 2452              		.loc 1 368 0
 2453 01dc 01304302 		subeq	r3, r3, #1
 2454 01e0 04308505 		streq	r3, [r5, #4]
 2455 01e4 97FFFFEA 		b	.L175
 2456              	.LVL264:
 2457              	.L197:
 2458              	.LBB388:
 2459              	.LBB382:
 2460              	.LBB379:
 2461              	.LBB380:
 2462              	.LBB381:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2463              		.loc 2 51 0
 2464 01e8 0C009DE5 		ldr	r0, [sp, #12]
 2465 01ec 000050E3 		cmp	r0, #0
 2466 01f0 0000000A 		beq	.L193
 2467 01f4 FEFFFFEB 		bl	_ZdaPv
 2468              	.LVL265:
 2469              	.L193:
 2470 01f8 FEFFFFEB 		bl	__cxa_end_cleanup
 2471              	.LVL266:
 2472              	.LEHE13:
 2473              	.LBE381:
 2474              	.LBE380:
 2475              	.LBE379:
 2476              	.LBE382:
 2477              	.LBE388:
 2478              		.cfi_endproc
 2479              	.LFE95:
 2480              		.personality	__gxx_personality_v0
 2481              		.handlerdata
 2482              	.LLSDA95:
 2483 0008 FF       		.byte	0xff
 2484 0009 FF       		.byte	0xff
 2485 000a 01       		.byte	0x1
 2486 000b 0B       		.uleb128 .LLSDACSE95-.LLSDACSB95
 2487              	.LLSDACSB95:
 2488 000c 64       		.uleb128 .LEHB12-.LFB95
 2489 000d 10       		.uleb128 .LEHE12-.LEHB12
 2490 000e E803     		.uleb128 .L197-.LFB95
 2491 0010 00       		.uleb128 0
 2492 0011 9001     		.uleb128 .LEHB13-.LFB95
 2493 0013 EC02     		.uleb128 .LEHE13-.LEHB13
 2494 0015 00       		.uleb128 0
 2495 0016 00       		.uleb128 0
 2496              	.LLSDACSE95:
 2497              		.section	.text._ZN11BigUnsigned8multiplyERKS_S1_
 2498              		.fnend
 2500              		.section	.text._ZN11BigUnsigned19divideWithRemainderERKS_RS_,"ax",%progbits
 2501              		.align	2
 2502              		.global	_ZN11BigUnsigned19divideWithRemainderERKS_RS_
 2503              		.syntax unified
 2504              		.arm
 2505              		.fpu neon
 2507              	_ZN11BigUnsigned19divideWithRemainderERKS_RS_:
 2508              		.fnstart
 2509              	.LFB96:
 382:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/* Defending against aliased calls is more complex than usual because we
 2510              		.loc 1 382 0
 2511              		.cfi_startproc
 2512              		.cfi_personality 0,__gxx_personality_v0
 2513              		.cfi_lsda 0,.LLSDA96
 2514              		@ args = 0, pretend = 0, frame = 24
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516              	.LVL267:
 2517 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2518              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2519              		.cfi_def_cfa_offset 36
 2520              		.cfi_offset 4, -36
 2521              		.cfi_offset 5, -32
 2522              		.cfi_offset 6, -28
 2523              		.cfi_offset 7, -24
 2524              		.cfi_offset 8, -20
 2525              		.cfi_offset 9, -16
 2526              		.cfi_offset 10, -12
 2527              		.cfi_offset 11, -8
 2528              		.cfi_offset 14, -4
 2529              		.pad #28
 2530 0004 1CD04DE2 		sub	sp, sp, #28
 2531              		.cfi_def_cfa_offset 64
 2532 0008 04208DE5 		str	r2, [sp, #4]
 388:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		throw "BigUnsigned::divideWithRemainder: Cannot write quotient and remainder into the same variab
 2533              		.loc 1 388 0
 2534 000c 020050E1 		cmp	r0, r2
 2535 0010 1200000A 		beq	.L234
 2536 0014 0050A0E1 		mov	r5, r0
 2537 0018 0140A0E1 		mov	r4, r1
 2538              	.LBB404:
 392:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		BigUnsigned tmpB(b);
 2539              		.loc 1 392 0
 2540 001c 04309DE5 		ldr	r3, [sp, #4]
 2541 0020 010053E1 		cmp	r3, r1
 2542 0024 01005011 		cmpne	r0, r1
 2543 0028 0130A003 		moveq	r3, #1
 2544 002c 0030A013 		movne	r3, #0
 2545 0030 00308DE5 		str	r3, [sp]
 2546 0034 1200000A 		beq	.L235
 2547              	.LBE404:
 407:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.len = 0;
 2548              		.loc 1 407 0
 2549 0038 043091E5 		ldr	r3, [r1, #4]
 2550 003c 000053E3 		cmp	r3, #0
 2551 0040 1A00000A 		beq	.L236
 416:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.len = 0;
 2552              		.loc 1 416 0
 2553 0044 047090E5 		ldr	r7, [r0, #4]
 2554 0048 070053E1 		cmp	r3, r7
 2555 004c 1B00009A 		bls	.L206
 417:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 2556              		.loc 1 417 0
 2557 0050 0030A0E3 		mov	r3, #0
 2558 0054 04209DE5 		ldr	r2, [sp, #4]
 2559 0058 043082E5 		str	r3, [r2, #4]
 418:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 2560              		.loc 1 418 0
 2561 005c 150000EA 		b	.L200
 2562              	.L234:
 389:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	/* Now *this and q are separate, so the only concern is that b might be
 2563              		.loc 1 389 0
 2564 0060 0400A0E3 		mov	r0, #4
 2565              	.LVL268:
 2566 0064 FEFFFFEB 		bl	__cxa_allocate_exception
 2567              	.LVL269:
 2568 0068 003000E3 		movw	r3, #:lower16:.LC3
 2569 006c 003040E3 		movt	r3, #:upper16:.LC3
 2570 0070 003080E5 		str	r3, [r0]
 2571 0074 0020A0E3 		mov	r2, #0
 2572 0078 001000E3 		movw	r1, #:lower16:_ZTIPKc
 2573 007c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 2574              	.LEHB14:
 2575 0080 FEFFFFEB 		bl	__cxa_throw
 2576              	.LVL270:
 2577              	.L235:
 2578              	.LBB416:
 2579              	.LBB405:
 2580              	.LBB406:
 2581              	.LBB407:
 2582              	.LBB408:
  40:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 2583              		.loc 3 40 0
 2584 0084 0C008DE2 		add	r0, sp, #12
 2585              	.LVL271:
 2586 0088 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEC2ERKS0_
 2587              	.LVL272:
 2588              	.LEHE14:
 2589              	.LBE408:
 2590              	.LBE407:
 2591              	.LBE406:
 394:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 2592              		.loc 1 394 0
 2593 008c 04209DE5 		ldr	r2, [sp, #4]
 2594 0090 0C108DE2 		add	r1, sp, #12
 2595 0094 0500A0E1 		mov	r0, r5
 2596              	.LEHB15:
 2597 0098 FEFFFFEB 		bl	_ZN11BigUnsigned19divideWithRemainderERKS_RS_
 2598              	.LVL273:
 2599              	.LEHE15:
 2600              	.LBB409:
 2601              	.LBB410:
 2602              	.LBB411:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2603              		.loc 2 51 0
 2604 009c 14009DE5 		ldr	r0, [sp, #20]
 2605 00a0 000050E3 		cmp	r0, #0
 2606 00a4 0300000A 		beq	.L200
 2607 00a8 FEFFFFEB 		bl	_ZdaPv
 2608              	.LVL274:
 2609 00ac 010000EA 		b	.L200
 2610              	.LVL275:
 2611              	.L236:
 2612              	.LBE411:
 2613              	.LBE410:
 2614              	.LBE409:
 2615              	.LBE405:
 2616              	.LBE416:
 408:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 2617              		.loc 1 408 0
 2618 00b0 04209DE5 		ldr	r2, [sp, #4]
 2619              	.LVL276:
 2620 00b4 043082E5 		str	r3, [r2, #4]
 2621              	.LVL277:
 2622              	.L200:
 538:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2623              		.loc 1 538 0
 2624 00b8 1CD08DE2 		add	sp, sp, #28
 2625              		.cfi_remember_state
 2626              		.cfi_def_cfa_offset 36
 2627              		@ sp needed
 2628 00bc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2629              	.LVL278:
 2630              	.L206:
 2631              		.cfi_restore_state
 462:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len++;
 2632              		.loc 1 462 0
 2633 00c0 011087E2 		add	r1, r7, #1
 2634              	.LVL279:
 2635              	.LEHB16:
 2636 00c4 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE15allocateAndCopyEj
 2637              	.LVL280:
 463:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	blk[origLen] = 0; // Zero the added block.
 2638              		.loc 1 463 0
 2639 00c8 043095E5 		ldr	r3, [r5, #4]
 2640 00cc 013083E2 		add	r3, r3, #1
 2641 00d0 043085E5 		str	r3, [r5, #4]
 464:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2642              		.loc 1 464 0
 2643 00d4 083095E5 		ldr	r3, [r5, #8]
 2644 00d8 0020A0E3 		mov	r2, #0
 2645 00dc 072183E7 		str	r2, [r3, r7, lsl #2]
 467:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2646              		.loc 1 467 0
 2647 00e0 040095E5 		ldr	r0, [r5, #4]
 2648 00e4 2E0270E3 		cmn	r0, #-536870910
 2649 00e8 1300008A 		bhi	.L207
 467:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2650              		.loc 1 467 0 is_stmt 0 discriminator 1
 2651 00ec 0001A0E1 		lsl	r0, r0, #2
 2652 00f0 FEFFFFEB 		bl	_Znaj
 2653              	.LVL281:
 2654 00f4 0060A0E1 		mov	r6, r0
 2655              	.LVL282:
 470:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	q.allocate(q.len);
 2656              		.loc 1 470 0 is_stmt 1 discriminator 1
 2657 00f8 041094E5 		ldr	r1, [r4, #4]
 2658 00fc 011047E0 		sub	r1, r7, r1
 2659 0100 011081E2 		add	r1, r1, #1
 2660 0104 04809DE5 		ldr	r8, [sp, #4]
 2661 0108 041088E5 		str	r1, [r8, #4]
 471:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zero out the quotient
 2662              		.loc 1 471 0 discriminator 1
 2663 010c 0800A0E1 		mov	r0, r8
 2664              	.LVL283:
 2665 0110 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 2666              	.LVL284:
 473:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.blk[i] = 0;
 2667              		.loc 1 473 0 discriminator 1
 2668 0114 0030A0E3 		mov	r3, #0
 2669 0118 0820A0E1 		mov	r2, r8
 2670              	.LVL285:
 2671              	.L208:
 473:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.blk[i] = 0;
 2672              		.loc 1 473 0 is_stmt 0 discriminator 3
 2673 011c 04A092E5 		ldr	r10, [r2, #4]
 2674 0120 0A0053E1 		cmp	r3, r10
 2675 0124 0500002A 		bcs	.L209
 474:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2676              		.loc 1 474 0 is_stmt 1 discriminator 2
 2677 0128 081092E5 		ldr	r1, [r2, #8]
 2678 012c 0000A0E3 		mov	r0, #0
 2679 0130 030181E7 		str	r0, [r1, r3, lsl #2]
 473:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.blk[i] = 0;
 2680              		.loc 1 473 0 discriminator 2
 2681 0134 013083E2 		add	r3, r3, #1
 2682              	.LVL286:
 2683 0138 F7FFFFEA 		b	.L208
 2684              	.LVL287:
 2685              	.L207:
 467:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 2686              		.loc 1 467 0 discriminator 2
 2687 013c FEFFFFEB 		bl	__cxa_throw_bad_array_new_length
 2688              	.LVL288:
 2689              	.L209:
 478:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		i--;
 2690              		.loc 1 478 0
 2691 0140 00005AE3 		cmp	r10, #0
 2692 0144 5000000A 		beq	.L210
 479:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// For each possible left-shift of b in bits...
 2693              		.loc 1 479 0
 2694 0148 01A04AE2 		sub	r10, r10, #1
 2695              	.LVL289:
 482:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		i2 = N;
 2696              		.loc 1 482 0
 2697 014c 04309DE5 		ldr	r3, [sp, #4]
 2698 0150 083093E5 		ldr	r3, [r3, #8]
 2699 0154 0AB1A0E1 		lsl	fp, r10, #2
 2700 0158 0020A0E3 		mov	r2, #0
 2701 015c 0A2183E7 		str	r2, [r3, r10, lsl #2]
 2702              	.LVL290:
 483:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		while (i2 > 0) {
 2703              		.loc 1 483 0
 2704 0160 2080A0E3 		mov	r8, #32
 2705              	.LVL291:
 2706              	.L211:
 484:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			i2--;
 2707              		.loc 1 484 0
 2708 0164 000058E3 		cmp	r8, #0
 2709 0168 F4FFFF0A 		beq	.L209
 485:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			/*
 2710              		.loc 1 485 0
 2711 016c 018048E2 		sub	r8, r8, #1
 2712              	.LVL292:
 494:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				temp = blk[k] - getShiftedBlock(b, j, i2);
 2713              		.loc 1 494 0
 2714 0170 00009DE5 		ldr	r0, [sp]
 2715 0174 0A20A0E1 		mov	r2, r10
 2716 0178 0010A0E3 		mov	r1, #0
 2717 017c 070000EA 		b	.L216
 2718              	.LVL293:
 2719              	.L225:
 2720              	.LBB417:
 2721              	.LBB418:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 2722              		.loc 1 295 0
 2723 0180 0030A0E3 		mov	r3, #0
 2724 0184 130000EA 		b	.L213
 2725              	.LVL294:
 2726              	.L226:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 2727              		.loc 1 296 0
 2728 0188 0090A0E3 		mov	r9, #0
 2729 018c 170000EA 		b	.L214
 2730              	.LVL295:
 2731              	.L215:
 2732              	.LBE418:
 2733              	.LBE417:
 502:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowIn = borrowOut;
 2734              		.loc 1 502 0 discriminator 2
 2735 0190 0E3086E7 		str	r3, [r6, lr]
 2736              	.LVL296:
 494:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				temp = blk[k] - getShiftedBlock(b, j, i2);
 2737              		.loc 1 494 0 discriminator 2
 2738 0194 011081E2 		add	r1, r1, #1
 2739              	.LVL297:
 2740 0198 012082E2 		add	r2, r2, #1
 2741              	.LVL298:
 503:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 2742              		.loc 1 503 0 discriminator 2
 2743 019c 0C00A0E1 		mov	r0, ip
 2744              	.LVL299:
 2745              	.L216:
 494:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				temp = blk[k] - getShiftedBlock(b, j, i2);
 2746              		.loc 1 494 0 discriminator 1
 2747 01a0 043094E5 		ldr	r3, [r4, #4]
 2748 01a4 030051E1 		cmp	r1, r3
 2749 01a8 1B00008A 		bhi	.L212
 495:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowOut = (temp > blk[k]);
 2750              		.loc 1 495 0
 2751 01ac 083095E5 		ldr	r3, [r5, #8]
 2752 01b0 02E1A0E1 		lsl	lr, r2, #2
 2753 01b4 02C193E7 		ldr	ip, [r3, r2, lsl #2]
 2754              	.LVL300:
 2755              	.LBB420:
 2756              	.LBB419:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 2757              		.loc 1 295 0
 2758 01b8 000051E3 		cmp	r1, #0
 2759 01bc 00005813 		cmpne	r8, #0
 2760 01c0 EEFFFF0A 		beq	.L225
 2761 01c4 083094E5 		ldr	r3, [r4, #8]
 2762 01c8 079141E2 		sub	r9, r1, #-1073741823
 2763 01cc 099193E7 		ldr	r9, [r3, r9, lsl #2]
 2764 01d0 203068E2 		rsb	r3, r8, #32
 2765 01d4 3933A0E1 		lsr	r3, r9, r3
 2766              	.L213:
 2767              	.LVL301:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 2768              		.loc 1 296 0
 2769 01d8 049094E5 		ldr	r9, [r4, #4]
 2770 01dc 090051E1 		cmp	r1, r9
 2771 01e0 E8FFFF0A 		beq	.L226
 2772 01e4 089094E5 		ldr	r9, [r4, #8]
 2773 01e8 019199E7 		ldr	r9, [r9, r1, lsl #2]
 2774 01ec 1998A0E1 		lsl	r9, r9, r8
 2775              	.L214:
 2776              	.LVL302:
 297:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 2777              		.loc 1 297 0
 2778 01f0 093083E1 		orr	r3, r3, r9
 2779              	.LVL303:
 2780              	.LBE419:
 2781              	.LBE420:
 495:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowOut = (temp > blk[k]);
 2782              		.loc 1 495 0
 2783 01f4 03304CE0 		sub	r3, ip, r3
 2784              	.LVL304:
 496:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				if (borrowIn) {
 2785              		.loc 1 496 0
 2786 01f8 03005CE1 		cmp	ip, r3
 2787 01fc 00C0A023 		movcs	ip, #0
 2788 0200 01C0A033 		movcc	ip, #1
 2789              	.LVL305:
 497:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					borrowOut |= (temp == 0);
 2790              		.loc 1 497 0
 2791 0204 000050E3 		cmp	r0, #0
 2792 0208 E0FFFF0A 		beq	.L215
 2793 020c 000053E3 		cmp	r3, #0
 2794 0210 01C08C03 		orreq	ip, ip, #1
 2795              	.LVL306:
 499:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				}
 2796              		.loc 1 499 0
 2797 0214 013043E2 		sub	r3, r3, #1
 2798              	.LVL307:
 2799 0218 DCFFFFEA 		b	.L215
 2800              	.LVL308:
 2801              	.L212:
 507:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowIn = (blk[k] == 0);
 2802              		.loc 1 507 0 discriminator 2
 2803 021c 013020E2 		eor	r3, r0, #1
 2804 0220 070052E1 		cmp	r2, r7
 2805 0224 01308323 		orrcs	r3, r3, #1
 2806 0228 FF0013E3 		tst	r3, #255
 2807 022c 0700001A 		bne	.L217
 508:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				subtractBuf[k] = blk[k] - 1;
 2808              		.loc 1 508 0 discriminator 1
 2809 0230 083095E5 		ldr	r3, [r5, #8]
 2810 0234 023193E7 		ldr	r3, [r3, r2, lsl #2]
 2811 0238 130F6FE1 		clz	r0, r3
 2812              	.LVL309:
 2813 023c A002A0E1 		lsr	r0, r0, #5
 2814              	.LVL310:
 509:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			}
 2815              		.loc 1 509 0 discriminator 1
 2816 0240 013043E2 		sub	r3, r3, #1
 2817 0244 023186E7 		str	r3, [r6, r2, lsl #2]
 507:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				borrowIn = (blk[k] == 0);
 2818              		.loc 1 507 0 discriminator 1
 2819 0248 012082E2 		add	r2, r2, #1
 2820              	.LVL311:
 2821 024c F2FFFFEA 		b	.L212
 2822              	.L217:
 521:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				q.blk[i] |= (Blk(1) << i2);
 2823              		.loc 1 521 0
 2824 0250 000050E3 		cmp	r0, #0
 2825 0254 C2FFFF1A 		bne	.L211
 522:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				while (k > i) {
 2826              		.loc 1 522 0
 2827 0258 04309DE5 		ldr	r3, [sp, #4]
 2828 025c 081093E5 		ldr	r1, [r3, #8]
 2829              	.LVL312:
 2830 0260 0B3091E7 		ldr	r3, [r1, fp]
 2831 0264 0100A0E3 		mov	r0, #1
 2832              	.LVL313:
 2833 0268 103883E1 		orr	r3, r3, r0, lsl r8
 2834 026c 0B3081E7 		str	r3, [r1, fp]
 2835              	.L219:
 523:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					k--;
 2836              		.loc 1 523 0
 2837 0270 0A0052E1 		cmp	r2, r10
 2838 0274 BAFFFF9A 		bls	.L211
 524:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					blk[k] = subtractBuf[k];
 2839              		.loc 1 524 0
 2840 0278 012042E2 		sub	r2, r2, #1
 2841              	.LVL314:
 525:../src/zxing_lib/bigint/BigUnsigned.cpp **** 				}
 2842              		.loc 1 525 0
 2843 027c 083095E5 		ldr	r3, [r5, #8]
 2844 0280 021196E7 		ldr	r1, [r6, r2, lsl #2]
 2845 0284 021183E7 		str	r1, [r3, r2, lsl #2]
 523:../src/zxing_lib/bigint/BigUnsigned.cpp **** 					k--;
 2846              		.loc 1 523 0
 2847 0288 F8FFFFEA 		b	.L219
 2848              	.LVL315:
 2849              	.L210:
 531:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		q.len--;
 2850              		.loc 1 531 0
 2851 028c 04009DE5 		ldr	r0, [sp, #4]
 2852 0290 082090E5 		ldr	r2, [r0, #8]
 2853 0294 043090E5 		ldr	r3, [r0, #4]
 2854 0298 071143E2 		sub	r1, r3, #-1073741823
 2855 029c 012192E7 		ldr	r2, [r2, r1, lsl #2]
 2856 02a0 000052E3 		cmp	r2, #0
 532:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap any/all leading zeros in remainder
 2857              		.loc 1 532 0
 2858 02a4 01304302 		subeq	r3, r3, #1
 2859 02a8 04308005 		streq	r3, [r0, #4]
 2860              	.L222:
 2861              	.LBB421:
 2862              	.LBB422:
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
 2863              		.loc 3 31 0
 2864 02ac 043095E5 		ldr	r3, [r5, #4]
 2865 02b0 000053E3 		cmp	r3, #0
 2866 02b4 0600000A 		beq	.L221
 2867 02b8 082095E5 		ldr	r2, [r5, #8]
 2868 02bc 071143E2 		sub	r1, r3, #-1073741823
 2869 02c0 012192E7 		ldr	r2, [r2, r1, lsl #2]
 2870 02c4 000052E3 		cmp	r2, #0
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 2871              		.loc 3 32 0
 2872 02c8 01304302 		subeq	r3, r3, #1
 2873 02cc 04308505 		streq	r3, [r5, #4]
 2874 02d0 F5FFFF0A 		beq	.L222
 2875              	.L221:
 2876              	.LBE422:
 2877              	.LBE421:
 537:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 2878              		.loc 1 537 0
 2879 02d4 000056E3 		cmp	r6, #0
 2880 02d8 76FFFF0A 		beq	.L200
 537:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 2881              		.loc 1 537 0 is_stmt 0 discriminator 1
 2882 02dc 0600A0E1 		mov	r0, r6
 2883 02e0 FEFFFFEB 		bl	_ZdaPv
 2884              	.LVL316:
 2885 02e4 73FFFFEA 		b	.L200
 2886              	.LVL317:
 2887              	.L227:
 2888              	.LBB423:
 2889              	.LBB415:
 2890              	.LBB412:
 2891              	.LBB413:
 2892              	.LBB414:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 2893              		.loc 2 51 0 is_stmt 1
 2894 02e8 14009DE5 		ldr	r0, [sp, #20]
 2895 02ec 000050E3 		cmp	r0, #0
 2896 02f0 0000000A 		beq	.L224
 2897 02f4 FEFFFFEB 		bl	_ZdaPv
 2898              	.LVL318:
 2899              	.L224:
 2900 02f8 FEFFFFEB 		bl	__cxa_end_cleanup
 2901              	.LVL319:
 2902              	.LEHE16:
 2903              	.LBE414:
 2904              	.LBE413:
 2905              	.LBE412:
 2906              	.LBE415:
 2907              	.LBE423:
 2908              		.cfi_endproc
 2909              	.LFE96:
 2910              		.personality	__gxx_personality_v0
 2911              		.handlerdata
 2912              	.LLSDA96:
 2913 0008 FF       		.byte	0xff
 2914 0009 FF       		.byte	0xff
 2915 000a 01       		.byte	0x1
 2916 000b 11       		.uleb128 .LLSDACSE96-.LLSDACSB96
 2917              	.LLSDACSB96:
 2918 000c 8001     		.uleb128 .LEHB14-.LFB96
 2919 000e 0C       		.uleb128 .LEHE14-.LEHB14
 2920 000f 00       		.uleb128 0
 2921 0010 00       		.uleb128 0
 2922 0011 9801     		.uleb128 .LEHB15-.LFB96
 2923 0013 04       		.uleb128 .LEHE15-.LEHB15
 2924 0014 E805     		.uleb128 .L227-.LFB96
 2925 0016 00       		.uleb128 0
 2926 0017 C401     		.uleb128 .LEHB16-.LFB96
 2927 0019 B804     		.uleb128 .LEHE16-.LEHB16
 2928 001b 00       		.uleb128 0
 2929 001c 00       		.uleb128 0
 2930              	.LLSDACSE96:
 2931              		.section	.text._ZN11BigUnsigned19divideWithRemainderERKS_RS_
 2932              		.fnend
 2934              		.section	.text._ZN11BigUnsigned6bitAndERKS_S1_,"ax",%progbits
 2935              		.align	2
 2936              		.global	_ZN11BigUnsigned6bitAndERKS_S1_
 2937              		.syntax unified
 2938              		.arm
 2939              		.fpu neon
 2941              	_ZN11BigUnsigned6bitAndERKS_S1_:
 2942              		.fnstart
 2943              	.LFB97:
 544:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, bitAnd(a, b));
 2944              		.loc 1 544 0
 2945              		.cfi_startproc
 2946              		.cfi_personality 0,__gxx_personality_v0
 2947              		.cfi_lsda 0,.LLSDA97
 2948              		@ args = 0, pretend = 0, frame = 16
 2949              		@ frame_needed = 0, uses_anonymous_args = 0
 2950              	.LVL320:
 2951 0000 70402DE9 		push	{r4, r5, r6, lr}
 2952              		.save {r4, r5, r6, lr}
 2953              		.cfi_def_cfa_offset 16
 2954              		.cfi_offset 4, -16
 2955              		.cfi_offset 5, -12
 2956              		.cfi_offset 6, -8
 2957              		.cfi_offset 14, -4
 2958              		.pad #16
 2959 0004 10D04DE2 		sub	sp, sp, #16
 2960              		.cfi_def_cfa_offset 32
 2961 0008 0040A0E1 		mov	r4, r0
 2962 000c 0150A0E1 		mov	r5, r1
 2963 0010 0260A0E1 		mov	r6, r2
 2964              	.LBB424:
 545:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// The bitwise & can't be longer than either operand.
 2965              		.loc 1 545 0
 2966 0014 020050E1 		cmp	r0, r2
 2967 0018 01005011 		cmpne	r0, r1
 2968 001c 1300000A 		beq	.L248
 2969              	.LBE424:
 547:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 2970              		.loc 1 547 0
 2971 0020 041091E5 		ldr	r1, [r1, #4]
 2972              	.LVL321:
 2973 0024 043092E5 		ldr	r3, [r2, #4]
 2974 0028 030051E1 		cmp	r1, r3
 2975 002c 0310A021 		movcs	r1, r3
 2976              	.L241:
 547:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 2977              		.loc 1 547 0 is_stmt 0 discriminator 4
 2978 0030 041084E5 		str	r1, [r4, #4]
 548:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 2979              		.loc 1 548 0 is_stmt 1 discriminator 4
 2980 0034 0400A0E1 		mov	r0, r4
 2981              	.LVL322:
 2982              	.LEHB17:
 2983 0038 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 2984              	.LVL323:
 2985              	.LEHE17:
 550:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a.blk[i] & b.blk[i];
 2986              		.loc 1 550 0 discriminator 4
 2987 003c 0030A0E3 		mov	r3, #0
 2988              	.LVL324:
 2989              	.L243:
 550:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a.blk[i] & b.blk[i];
 2990              		.loc 1 550 0 is_stmt 0 discriminator 3
 2991 0040 042094E5 		ldr	r2, [r4, #4]
 2992 0044 020053E1 		cmp	r3, r2
 2993 0048 1700002A 		bcs	.L242
 551:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	zapLeadingZeros();
 2994              		.loc 1 551 0 is_stmt 1 discriminator 2
 2995 004c 081094E5 		ldr	r1, [r4, #8]
 2996 0050 082095E5 		ldr	r2, [r5, #8]
 2997 0054 032192E7 		ldr	r2, [r2, r3, lsl #2]
 2998 0058 080096E5 		ldr	r0, [r6, #8]
 2999 005c 030190E7 		ldr	r0, [r0, r3, lsl #2]
 3000 0060 002002E0 		and	r2, r2, r0
 3001 0064 032181E7 		str	r2, [r1, r3, lsl #2]
 550:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a.blk[i] & b.blk[i];
 3002              		.loc 1 550 0 discriminator 2
 3003 0068 013083E2 		add	r3, r3, #1
 3004              	.LVL325:
 3005 006c F3FFFFEA 		b	.L243
 3006              	.LVL326:
 3007              	.L248:
 3008              	.LBB439:
 3009              	.LBB425:
 3010              	.LBB426:
 3011              	.LBB427:
 3012              	.LBB428:
 3013              	.LBB429:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 3014              		.loc 2 45 0
 3015 0070 0030A0E3 		mov	r3, #0
 3016 0074 04308DE5 		str	r3, [sp, #4]
 3017 0078 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3018              		.loc 2 46 0
 3019 007c 0C308DE5 		str	r3, [sp, #12]
 3020              	.LVL327:
 3021              	.LBE429:
 3022              	.LBE428:
 3023              	.LBE427:
 3024              	.LBE426:
 545:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// The bitwise & can't be longer than either operand.
 3025              		.loc 1 545 0
 3026 0080 04008DE2 		add	r0, sp, #4
 3027              	.LVL328:
 3028              	.LEHB18:
 3029 0084 FEFFFFEB 		bl	_ZN11BigUnsigned6bitAndERKS_S1_
 3030              	.LVL329:
 3031              	.LBB430:
 3032              	.LBB431:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3033              		.loc 3 44 0
 3034 0088 04108DE2 		add	r1, sp, #4
 3035              	.LVL330:
 3036 008c 0400A0E1 		mov	r0, r4
 3037 0090 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3038              	.LVL331:
 3039              	.LEHE18:
 3040              	.LBE431:
 3041              	.LBE430:
 3042              	.LBB432:
 3043              	.LBB433:
 3044              	.LBB434:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3045              		.loc 2 51 0
 3046 0094 0C009DE5 		ldr	r0, [sp, #12]
 3047 0098 000050E3 		cmp	r0, #0
 3048 009c 0000000A 		beq	.L237
 3049 00a0 FEFFFFEB 		bl	_ZdaPv
 3050              	.LVL332:
 3051              	.L237:
 3052              	.LBE434:
 3053              	.LBE433:
 3054              	.LBE432:
 3055              	.LBE425:
 3056              	.LBE439:
 553:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 3057              		.loc 1 553 0
 3058 00a4 10D08DE2 		add	sp, sp, #16
 3059              		.cfi_remember_state
 3060              		.cfi_def_cfa_offset 16
 3061              		@ sp needed
 3062 00a8 7080BDE8 		pop	{r4, r5, r6, pc}
 3063              	.LVL333:
 3064              	.L242:
 3065              		.cfi_restore_state
 3066              	.LBB440:
 3067              	.LBB441:
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
 3068              		.loc 3 31 0
 3069 00ac 043094E5 		ldr	r3, [r4, #4]
 3070 00b0 000053E3 		cmp	r3, #0
 3071 00b4 FAFFFF0A 		beq	.L237
 3072 00b8 082094E5 		ldr	r2, [r4, #8]
 3073 00bc 071143E2 		sub	r1, r3, #-1073741823
 3074 00c0 012192E7 		ldr	r2, [r2, r1, lsl #2]
 3075 00c4 000052E3 		cmp	r2, #0
 3076 00c8 F5FFFF1A 		bne	.L237
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3077              		.loc 3 32 0
 3078 00cc 013043E2 		sub	r3, r3, #1
 3079 00d0 043084E5 		str	r3, [r4, #4]
 3080 00d4 F4FFFFEA 		b	.L242
 3081              	.L246:
 3082              	.LVL334:
 3083              	.LBE441:
 3084              	.LBE440:
 3085              	.LBB442:
 3086              	.LBB438:
 3087              	.LBB435:
 3088              	.LBB436:
 3089              	.LBB437:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3090              		.loc 2 51 0
 3091 00d8 0C009DE5 		ldr	r0, [sp, #12]
 3092 00dc 000050E3 		cmp	r0, #0
 3093 00e0 0000000A 		beq	.L245
 3094 00e4 FEFFFFEB 		bl	_ZdaPv
 3095              	.LVL335:
 3096              	.L245:
 3097              	.LEHB19:
 3098 00e8 FEFFFFEB 		bl	__cxa_end_cleanup
 3099              	.LVL336:
 3100              	.LEHE19:
 3101              	.LBE437:
 3102              	.LBE436:
 3103              	.LBE435:
 3104              	.LBE438:
 3105              	.LBE442:
 3106              		.cfi_endproc
 3107              	.LFE97:
 3108              		.personality	__gxx_personality_v0
 3109              		.handlerdata
 3110              	.LLSDA97:
 3111 0008 FF       		.byte	0xff
 3112 0009 FF       		.byte	0xff
 3113 000a 01       		.byte	0x1
 3114 000b 0F       		.uleb128 .LLSDACSE97-.LLSDACSB97
 3115              	.LLSDACSB97:
 3116 000c 38       		.uleb128 .LEHB17-.LFB97
 3117 000d 04       		.uleb128 .LEHE17-.LEHB17
 3118 000e 00       		.uleb128 0
 3119 000f 00       		.uleb128 0
 3120 0010 8401     		.uleb128 .LEHB18-.LFB97
 3121 0012 10       		.uleb128 .LEHE18-.LEHB18
 3122 0013 D801     		.uleb128 .L246-.LFB97
 3123 0015 00       		.uleb128 0
 3124 0016 E801     		.uleb128 .LEHB19-.LFB97
 3125 0018 04       		.uleb128 .LEHE19-.LEHB19
 3126 0019 00       		.uleb128 0
 3127 001a 00       		.uleb128 0
 3128              	.LLSDACSE97:
 3129              		.section	.text._ZN11BigUnsigned6bitAndERKS_S1_
 3130              		.fnend
 3132              		.section	.text._ZN11BigUnsigned5bitOrERKS_S1_,"ax",%progbits
 3133              		.align	2
 3134              		.global	_ZN11BigUnsigned5bitOrERKS_S1_
 3135              		.syntax unified
 3136              		.arm
 3137              		.fpu neon
 3139              	_ZN11BigUnsigned5bitOrERKS_S1_:
 3140              		.fnstart
 3141              	.LFB98:
 555:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, bitOr(a, b));
 3142              		.loc 1 555 0
 3143              		.cfi_startproc
 3144              		.cfi_personality 0,__gxx_personality_v0
 3145              		.cfi_lsda 0,.LLSDA98
 3146              		@ args = 0, pretend = 0, frame = 16
 3147              		@ frame_needed = 0, uses_anonymous_args = 0
 3148              	.LVL337:
 3149 0000 70402DE9 		push	{r4, r5, r6, lr}
 3150              		.save {r4, r5, r6, lr}
 3151              		.cfi_def_cfa_offset 16
 3152              		.cfi_offset 4, -16
 3153              		.cfi_offset 5, -12
 3154              		.cfi_offset 6, -8
 3155              		.cfi_offset 14, -4
 3156              		.pad #16
 3157 0004 10D04DE2 		sub	sp, sp, #16
 3158              		.cfi_def_cfa_offset 32
 3159 0008 0050A0E1 		mov	r5, r0
 3160              	.LBB443:
 556:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 3161              		.loc 1 556 0
 3162 000c 020050E1 		cmp	r0, r2
 3163 0010 01005011 		cmpne	r0, r1
 3164 0014 1500000A 		beq	.L262
 3165              	.LBE443:
 559:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &a;
 3166              		.loc 1 559 0
 3167 0018 040091E5 		ldr	r0, [r1, #4]
 3168              	.LVL338:
 3169 001c 043092E5 		ldr	r3, [r2, #4]
 3170 0020 030050E1 		cmp	r0, r3
 3171 0024 1F00003A 		bcc	.L259
 561:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else {
 3172              		.loc 1 561 0
 3173 0028 0260A0E1 		mov	r6, r2
 560:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &b;
 3174              		.loc 1 560 0
 3175 002c 0140A0E1 		mov	r4, r1
 3176              	.L253:
 3177              	.LVL339:
 566:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < b2->len; i++)
 3178              		.loc 1 566 0
 3179 0030 041094E5 		ldr	r1, [r4, #4]
 3180              	.LVL340:
 3181 0034 0500A0E1 		mov	r0, r5
 3182              	.LEHB20:
 3183 0038 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 3184              	.LVL341:
 3185              	.LEHE20:
 567:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] | b2->blk[i];
 3186              		.loc 1 567 0
 3187 003c 0030A0E3 		mov	r3, #0
 3188              	.LVL342:
 3189              	.L255:
 567:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] | b2->blk[i];
 3190              		.loc 1 567 0 is_stmt 0 discriminator 3
 3191 0040 042096E5 		ldr	r2, [r6, #4]
 3192 0044 020053E1 		cmp	r3, r2
 3193 0048 1900002A 		bcs	.L254
 568:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (; i < a2->len; i++)
 3194              		.loc 1 568 0 is_stmt 1 discriminator 2
 3195 004c 082095E5 		ldr	r2, [r5, #8]
 3196 0050 081094E5 		ldr	r1, [r4, #8]
 3197 0054 030191E7 		ldr	r0, [r1, r3, lsl #2]
 3198 0058 081096E5 		ldr	r1, [r6, #8]
 3199 005c 031191E7 		ldr	r1, [r1, r3, lsl #2]
 3200 0060 010080E1 		orr	r0, r0, r1
 3201 0064 030182E7 		str	r0, [r2, r3, lsl #2]
 567:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] | b2->blk[i];
 3202              		.loc 1 567 0 discriminator 2
 3203 0068 013083E2 		add	r3, r3, #1
 3204              	.LVL343:
 3205 006c F3FFFFEA 		b	.L255
 3206              	.LVL344:
 3207              	.L262:
 3208              	.LBB458:
 3209              	.LBB444:
 3210              	.LBB445:
 3211              	.LBB446:
 3212              	.LBB447:
 3213              	.LBB448:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 3214              		.loc 2 45 0
 3215 0070 0030A0E3 		mov	r3, #0
 3216 0074 04308DE5 		str	r3, [sp, #4]
 3217 0078 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3218              		.loc 2 46 0
 3219 007c 0C308DE5 		str	r3, [sp, #12]
 3220              	.LVL345:
 3221              	.LBE448:
 3222              	.LBE447:
 3223              	.LBE446:
 3224              	.LBE445:
 556:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 3225              		.loc 1 556 0
 3226 0080 04008DE2 		add	r0, sp, #4
 3227              	.LVL346:
 3228              	.LEHB21:
 3229 0084 FEFFFFEB 		bl	_ZN11BigUnsigned5bitOrERKS_S1_
 3230              	.LVL347:
 3231              	.LBB449:
 3232              	.LBB450:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3233              		.loc 3 44 0
 3234 0088 04108DE2 		add	r1, sp, #4
 3235              	.LVL348:
 3236 008c 0500A0E1 		mov	r0, r5
 3237 0090 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3238              	.LVL349:
 3239              	.LEHE21:
 3240              	.LBE450:
 3241              	.LBE449:
 3242              	.LBB451:
 3243              	.LBB452:
 3244              	.LBB453:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3245              		.loc 2 51 0
 3246 0094 0C009DE5 		ldr	r0, [sp, #12]
 3247 0098 000050E3 		cmp	r0, #0
 3248 009c 0E00000A 		beq	.L249
 3249 00a0 FEFFFFEB 		bl	_ZdaPv
 3250              	.LVL350:
 3251 00a4 0C0000EA 		b	.L249
 3252              	.LVL351:
 3253              	.L259:
 3254              	.LBE453:
 3255              	.LBE452:
 3256              	.LBE451:
 3257              	.LBE444:
 3258              	.LBE458:
 564:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 3259              		.loc 1 564 0
 3260 00a8 0160A0E1 		mov	r6, r1
 563:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &a;
 3261              		.loc 1 563 0
 3262 00ac 0240A0E1 		mov	r4, r2
 3263 00b0 DEFFFFEA 		b	.L253
 3264              	.LVL352:
 3265              	.L254:
 569:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 3266              		.loc 1 569 0 discriminator 2
 3267 00b4 042094E5 		ldr	r2, [r4, #4]
 3268 00b8 020053E1 		cmp	r3, r2
 3269 00bc 0500002A 		bcs	.L256
 570:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a2->len;
 3270              		.loc 1 570 0 discriminator 1
 3271 00c0 082095E5 		ldr	r2, [r5, #8]
 3272 00c4 081094E5 		ldr	r1, [r4, #8]
 3273 00c8 031191E7 		ldr	r1, [r1, r3, lsl #2]
 3274 00cc 031182E7 		str	r1, [r2, r3, lsl #2]
 569:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 3275              		.loc 1 569 0 discriminator 1
 3276 00d0 013083E2 		add	r3, r3, #1
 3277              	.LVL353:
 3278 00d4 F6FFFFEA 		b	.L254
 3279              	.L256:
 571:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Doesn't need zapLeadingZeros.
 3280              		.loc 1 571 0
 3281 00d8 042085E5 		str	r2, [r5, #4]
 3282              	.LVL354:
 3283              	.L249:
 573:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 3284              		.loc 1 573 0
 3285 00dc 10D08DE2 		add	sp, sp, #16
 3286              		.cfi_remember_state
 3287              		.cfi_def_cfa_offset 16
 3288              		@ sp needed
 3289 00e0 7080BDE8 		pop	{r4, r5, r6, pc}
 3290              	.LVL355:
 3291              	.L260:
 3292              		.cfi_restore_state
 3293              	.LBB459:
 3294              	.LBB457:
 3295              	.LBB454:
 3296              	.LBB455:
 3297              	.LBB456:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3298              		.loc 2 51 0
 3299 00e4 0C009DE5 		ldr	r0, [sp, #12]
 3300 00e8 000050E3 		cmp	r0, #0
 3301 00ec 0000000A 		beq	.L258
 3302 00f0 FEFFFFEB 		bl	_ZdaPv
 3303              	.LVL356:
 3304              	.L258:
 3305              	.LEHB22:
 3306 00f4 FEFFFFEB 		bl	__cxa_end_cleanup
 3307              	.LVL357:
 3308              	.LEHE22:
 3309              	.LBE456:
 3310              	.LBE455:
 3311              	.LBE454:
 3312              	.LBE457:
 3313              	.LBE459:
 3314              		.cfi_endproc
 3315              	.LFE98:
 3316              		.personality	__gxx_personality_v0
 3317              		.handlerdata
 3318              	.LLSDA98:
 3319 0008 FF       		.byte	0xff
 3320 0009 FF       		.byte	0xff
 3321 000a 01       		.byte	0x1
 3322 000b 0F       		.uleb128 .LLSDACSE98-.LLSDACSB98
 3323              	.LLSDACSB98:
 3324 000c 38       		.uleb128 .LEHB20-.LFB98
 3325 000d 04       		.uleb128 .LEHE20-.LEHB20
 3326 000e 00       		.uleb128 0
 3327 000f 00       		.uleb128 0
 3328 0010 8401     		.uleb128 .LEHB21-.LFB98
 3329 0012 10       		.uleb128 .LEHE21-.LEHB21
 3330 0013 E401     		.uleb128 .L260-.LFB98
 3331 0015 00       		.uleb128 0
 3332 0016 F401     		.uleb128 .LEHB22-.LFB98
 3333 0018 04       		.uleb128 .LEHE22-.LEHB22
 3334 0019 00       		.uleb128 0
 3335 001a 00       		.uleb128 0
 3336              	.LLSDACSE98:
 3337              		.section	.text._ZN11BigUnsigned5bitOrERKS_S1_
 3338              		.fnend
 3340              		.section	.text._ZN11BigUnsigned6bitXorERKS_S1_,"ax",%progbits
 3341              		.align	2
 3342              		.global	_ZN11BigUnsigned6bitXorERKS_S1_
 3343              		.syntax unified
 3344              		.arm
 3345              		.fpu neon
 3347              	_ZN11BigUnsigned6bitXorERKS_S1_:
 3348              		.fnstart
 3349              	.LFB99:
 575:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a || this == &b, bitXor(a, b));
 3350              		.loc 1 575 0
 3351              		.cfi_startproc
 3352              		.cfi_personality 0,__gxx_personality_v0
 3353              		.cfi_lsda 0,.LLSDA99
 3354              		@ args = 0, pretend = 0, frame = 16
 3355              		@ frame_needed = 0, uses_anonymous_args = 0
 3356              	.LVL358:
 3357 0000 70402DE9 		push	{r4, r5, r6, lr}
 3358              		.save {r4, r5, r6, lr}
 3359              		.cfi_def_cfa_offset 16
 3360              		.cfi_offset 4, -16
 3361              		.cfi_offset 5, -12
 3362              		.cfi_offset 6, -8
 3363              		.cfi_offset 14, -4
 3364              		.pad #16
 3365 0004 10D04DE2 		sub	sp, sp, #16
 3366              		.cfi_def_cfa_offset 32
 3367 0008 0040A0E1 		mov	r4, r0
 3368              	.LBB460:
 576:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 3369              		.loc 1 576 0
 3370 000c 020050E1 		cmp	r0, r2
 3371 0010 01005011 		cmpne	r0, r1
 3372 0014 1500000A 		beq	.L277
 3373              	.LBE460:
 579:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		a2 = &a;
 3374              		.loc 1 579 0
 3375 0018 040091E5 		ldr	r0, [r1, #4]
 3376              	.LVL359:
 3377 001c 043092E5 		ldr	r3, [r2, #4]
 3378 0020 030050E1 		cmp	r0, r3
 3379 0024 2000003A 		bcc	.L274
 581:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	} else {
 3380              		.loc 1 581 0
 3381 0028 0260A0E1 		mov	r6, r2
 580:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &b;
 3382              		.loc 1 580 0
 3383 002c 0150A0E1 		mov	r5, r1
 3384              	.L267:
 3385              	.LVL360:
 586:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (i = 0; i < b2->len; i++)
 3386              		.loc 1 586 0
 3387 0030 041095E5 		ldr	r1, [r5, #4]
 3388              	.LVL361:
 3389 0034 0400A0E1 		mov	r0, r4
 3390              	.LEHB23:
 3391 0038 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 3392              	.LVL362:
 3393              	.LEHE23:
 587:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] ^ b2->blk[i];
 3394              		.loc 1 587 0
 3395 003c 0030A0E3 		mov	r3, #0
 3396              	.LVL363:
 3397              	.L269:
 587:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] ^ b2->blk[i];
 3398              		.loc 1 587 0 is_stmt 0 discriminator 3
 3399 0040 042096E5 		ldr	r2, [r6, #4]
 3400 0044 020053E1 		cmp	r3, r2
 3401 0048 1A00002A 		bcs	.L268
 588:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (; i < a2->len; i++)
 3402              		.loc 1 588 0 is_stmt 1 discriminator 2
 3403 004c 082094E5 		ldr	r2, [r4, #8]
 3404 0050 081095E5 		ldr	r1, [r5, #8]
 3405 0054 030191E7 		ldr	r0, [r1, r3, lsl #2]
 3406 0058 081096E5 		ldr	r1, [r6, #8]
 3407 005c 031191E7 		ldr	r1, [r1, r3, lsl #2]
 3408 0060 010020E0 		eor	r0, r0, r1
 3409 0064 030182E7 		str	r0, [r2, r3, lsl #2]
 587:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i] ^ b2->blk[i];
 3410              		.loc 1 587 0 discriminator 2
 3411 0068 013083E2 		add	r3, r3, #1
 3412              	.LVL364:
 3413 006c F3FFFFEA 		b	.L269
 3414              	.LVL365:
 3415              	.L277:
 3416              	.LBB475:
 3417              	.LBB461:
 3418              	.LBB462:
 3419              	.LBB463:
 3420              	.LBB464:
 3421              	.LBB465:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 3422              		.loc 2 45 0
 3423 0070 0030A0E3 		mov	r3, #0
 3424 0074 04308DE5 		str	r3, [sp, #4]
 3425 0078 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3426              		.loc 2 46 0
 3427 007c 0C308DE5 		str	r3, [sp, #12]
 3428              	.LVL366:
 3429              	.LBE465:
 3430              	.LBE464:
 3431              	.LBE463:
 3432              	.LBE462:
 576:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i;
 3433              		.loc 1 576 0
 3434 0080 04008DE2 		add	r0, sp, #4
 3435              	.LVL367:
 3436              	.LEHB24:
 3437 0084 FEFFFFEB 		bl	_ZN11BigUnsigned6bitXorERKS_S1_
 3438              	.LVL368:
 3439              	.LBB466:
 3440              	.LBB467:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3441              		.loc 3 44 0
 3442 0088 04108DE2 		add	r1, sp, #4
 3443              	.LVL369:
 3444 008c 0400A0E1 		mov	r0, r4
 3445 0090 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3446              	.LVL370:
 3447              	.LEHE24:
 3448              	.LBE467:
 3449              	.LBE466:
 3450              	.LBB468:
 3451              	.LBB469:
 3452              	.LBB470:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3453              		.loc 2 51 0
 3454 0094 0C009DE5 		ldr	r0, [sp, #12]
 3455 0098 000050E3 		cmp	r0, #0
 3456 009c 0000000A 		beq	.L263
 3457 00a0 FEFFFFEB 		bl	_ZdaPv
 3458              	.LVL371:
 3459              	.L263:
 3460              	.LBE470:
 3461              	.LBE469:
 3462              	.LBE468:
 3463              	.LBE461:
 3464              	.LBE475:
 593:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 3465              		.loc 1 593 0
 3466 00a4 10D08DE2 		add	sp, sp, #16
 3467              		.cfi_remember_state
 3468              		.cfi_def_cfa_offset 16
 3469              		@ sp needed
 3470 00a8 7080BDE8 		pop	{r4, r5, r6, pc}
 3471              	.LVL372:
 3472              	.L274:
 3473              		.cfi_restore_state
 584:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	}
 3474              		.loc 1 584 0
 3475 00ac 0160A0E1 		mov	r6, r1
 583:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		b2 = &a;
 3476              		.loc 1 583 0
 3477 00b0 0250A0E1 		mov	r5, r2
 3478 00b4 DDFFFFEA 		b	.L267
 3479              	.LVL373:
 3480              	.L268:
 589:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 3481              		.loc 1 589 0 discriminator 2
 3482 00b8 042095E5 		ldr	r2, [r5, #4]
 3483 00bc 020053E1 		cmp	r3, r2
 3484 00c0 0500002A 		bcs	.L270
 590:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	len = a2->len;
 3485              		.loc 1 590 0 discriminator 1
 3486 00c4 082094E5 		ldr	r2, [r4, #8]
 3487 00c8 081095E5 		ldr	r1, [r5, #8]
 3488 00cc 031191E7 		ldr	r1, [r1, r3, lsl #2]
 3489 00d0 031182E7 		str	r1, [r2, r3, lsl #2]
 589:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = a2->blk[i];
 3490              		.loc 1 589 0 discriminator 1
 3491 00d4 013083E2 		add	r3, r3, #1
 3492              	.LVL374:
 3493 00d8 F6FFFFEA 		b	.L268
 3494              	.L270:
 591:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	zapLeadingZeros();
 3495              		.loc 1 591 0
 3496 00dc 042084E5 		str	r2, [r4, #4]
 3497              	.LVL375:
 3498              	.L271:
 3499              	.LBB476:
 3500              	.LBB477:
  31:../src/zxing_lib/bigint/BigUnsigned.hh **** 			len--;
 3501              		.loc 3 31 0
 3502 00e0 043094E5 		ldr	r3, [r4, #4]
 3503 00e4 000053E3 		cmp	r3, #0
 3504 00e8 EDFFFF0A 		beq	.L263
 3505 00ec 082094E5 		ldr	r2, [r4, #8]
 3506 00f0 071143E2 		sub	r1, r3, #-1073741823
 3507 00f4 012192E7 		ldr	r2, [r2, r1, lsl #2]
 3508 00f8 000052E3 		cmp	r2, #0
 3509 00fc E8FFFF1A 		bne	.L263
  32:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3510              		.loc 3 32 0
 3511 0100 013043E2 		sub	r3, r3, #1
 3512 0104 043084E5 		str	r3, [r4, #4]
 3513 0108 F4FFFFEA 		b	.L271
 3514              	.LVL376:
 3515              	.L275:
 3516              	.LBE477:
 3517              	.LBE476:
 3518              	.LBB478:
 3519              	.LBB474:
 3520              	.LBB471:
 3521              	.LBB472:
 3522              	.LBB473:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3523              		.loc 2 51 0
 3524 010c 0C009DE5 		ldr	r0, [sp, #12]
 3525 0110 000050E3 		cmp	r0, #0
 3526 0114 0000000A 		beq	.L273
 3527 0118 FEFFFFEB 		bl	_ZdaPv
 3528              	.LVL377:
 3529              	.L273:
 3530              	.LEHB25:
 3531 011c FEFFFFEB 		bl	__cxa_end_cleanup
 3532              	.LVL378:
 3533              	.LEHE25:
 3534              	.LBE473:
 3535              	.LBE472:
 3536              	.LBE471:
 3537              	.LBE474:
 3538              	.LBE478:
 3539              		.cfi_endproc
 3540              	.LFE99:
 3541              		.personality	__gxx_personality_v0
 3542              		.handlerdata
 3543              	.LLSDA99:
 3544 0008 FF       		.byte	0xff
 3545 0009 FF       		.byte	0xff
 3546 000a 01       		.byte	0x1
 3547 000b 0F       		.uleb128 .LLSDACSE99-.LLSDACSB99
 3548              	.LLSDACSB99:
 3549 000c 38       		.uleb128 .LEHB23-.LFB99
 3550 000d 04       		.uleb128 .LEHE23-.LEHB23
 3551 000e 00       		.uleb128 0
 3552 000f 00       		.uleb128 0
 3553 0010 8401     		.uleb128 .LEHB24-.LFB99
 3554 0012 10       		.uleb128 .LEHE24-.LEHB24
 3555 0013 8C02     		.uleb128 .L275-.LFB99
 3556 0015 00       		.uleb128 0
 3557 0016 9C02     		.uleb128 .LEHB25-.LFB99
 3558 0018 04       		.uleb128 .LEHE25-.LEHB25
 3559 0019 00       		.uleb128 0
 3560 001a 00       		.uleb128 0
 3561              	.LLSDACSE99:
 3562              		.section	.text._ZN11BigUnsigned6bitXorERKS_S1_
 3563              		.fnend
 3565              		.section	.text._ZN11BigUnsigned12bitShiftLeftERKS_i,"ax",%progbits
 3566              		.align	2
 3567              		.global	_ZN11BigUnsigned12bitShiftLeftERKS_i
 3568              		.syntax unified
 3569              		.arm
 3570              		.fpu neon
 3572              	_ZN11BigUnsigned12bitShiftLeftERKS_i:
 3573              		.fnstart
 3574              	.LFB100:
 595:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a, bitShiftLeft(a, b));
 3575              		.loc 1 595 0
 3576              		.cfi_startproc
 3577              		.cfi_personality 0,__gxx_personality_v0
 3578              		.cfi_lsda 0,.LLSDA100
 3579              		@ args = 0, pretend = 0, frame = 16
 3580              		@ frame_needed = 0, uses_anonymous_args = 0
 3581              	.LVL379:
 3582 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 3583              		.save {r4, r5, r6, r7, lr}
 3584              		.cfi_def_cfa_offset 20
 3585              		.cfi_offset 4, -20
 3586              		.cfi_offset 5, -16
 3587              		.cfi_offset 6, -12
 3588              		.cfi_offset 7, -8
 3589              		.cfi_offset 14, -4
 3590              		.pad #20
 3591 0004 14D04DE2 		sub	sp, sp, #20
 3592              		.cfi_def_cfa_offset 40
 3593 0008 0070A0E1 		mov	r7, r0
 3594 000c 0150A0E1 		mov	r5, r1
 3595              	.LBB495:
 596:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b < 0) {
 3596              		.loc 1 596 0
 3597 0010 010050E1 		cmp	r0, r1
 3598 0014 1000000A 		beq	.L296
 3599              	.LBE495:
 597:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (b << 1 == 0)
 3600              		.loc 1 597 0
 3601 0018 000052E3 		cmp	r2, #0
 3602 001c 1C0000BA 		blt	.L297
 606:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	unsigned int shiftBits = b % N;
 3603              		.loc 1 606 0
 3604 0020 A242A0E1 		lsr	r4, r2, #5
 3605              	.LVL380:
 607:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// + 1: room for high bits nudged left into another block
 3606              		.loc 1 607 0
 3607 0024 1F6002E2 		and	r6, r2, #31
 3608              	.LVL381:
 609:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 3609              		.loc 1 609 0
 3610 0028 041091E5 		ldr	r1, [r1, #4]
 3611              	.LVL382:
 3612 002c 011084E0 		add	r1, r4, r1
 3613 0030 011081E2 		add	r1, r1, #1
 3614 0034 041080E5 		str	r1, [r0, #4]
 3615              	.LEHB26:
 610:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i, j;
 3616              		.loc 1 610 0
 3617 0038 FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 3618              	.LVL383:
 3619              	.LEHE26:
 612:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 3620              		.loc 1 612 0
 3621 003c 0030A0E3 		mov	r3, #0
 3622              	.LVL384:
 3623              	.L285:
 612:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 3624              		.loc 1 612 0 is_stmt 0 discriminator 3
 3625 0040 040053E1 		cmp	r3, r4
 3626 0044 2100002A 		bcs	.L291
 613:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	for (j = 0, i = shiftBlocks; j <= a.len; j++, i++)
 3627              		.loc 1 613 0 is_stmt 1 discriminator 2
 3628 0048 082097E5 		ldr	r2, [r7, #8]
 3629 004c 0010A0E3 		mov	r1, #0
 3630 0050 031182E7 		str	r1, [r2, r3, lsl #2]
 612:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = 0;
 3631              		.loc 1 612 0 discriminator 2
 3632 0054 013083E2 		add	r3, r3, #1
 3633              	.LVL385:
 3634 0058 F8FFFFEA 		b	.L285
 3635              	.LVL386:
 3636              	.L296:
 3637              	.LBB510:
 3638              	.LBB496:
 3639              	.LBB497:
 3640              	.LBB498:
 3641              	.LBB499:
 3642              	.LBB500:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 3643              		.loc 2 45 0
 3644 005c 0030A0E3 		mov	r3, #0
 3645 0060 04308DE5 		str	r3, [sp, #4]
 3646 0064 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3647              		.loc 2 46 0
 3648 0068 0C308DE5 		str	r3, [sp, #12]
 3649              	.LVL387:
 3650              	.LBE500:
 3651              	.LBE499:
 3652              	.LBE498:
 3653              	.LBE497:
 596:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b < 0) {
 3654              		.loc 1 596 0
 3655 006c 04008DE2 		add	r0, sp, #4
 3656              	.LVL388:
 3657              	.LEHB27:
 3658 0070 FEFFFFEB 		bl	_ZN11BigUnsigned12bitShiftLeftERKS_i
 3659              	.LVL389:
 3660              	.LBB501:
 3661              	.LBB502:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3662              		.loc 3 44 0
 3663 0074 04108DE2 		add	r1, sp, #4
 3664              	.LVL390:
 3665 0078 0700A0E1 		mov	r0, r7
 3666 007c FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3667              	.LVL391:
 3668              	.LEHE27:
 3669              	.LBE502:
 3670              	.LBE501:
 3671              	.LBB503:
 3672              	.LBB504:
 3673              	.LBB505:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3674              		.loc 2 51 0
 3675 0080 0C009DE5 		ldr	r0, [sp, #12]
 3676 0084 000050E3 		cmp	r0, #0
 3677 0088 0500000A 		beq	.L278
 3678 008c FEFFFFEB 		bl	_ZdaPv
 3679              	.LVL392:
 3680 0090 030000EA 		b	.L278
 3681              	.LVL393:
 3682              	.L297:
 3683              	.LBE505:
 3684              	.LBE504:
 3685              	.LBE503:
 3686              	.LBE496:
 3687              	.LBE510:
 598:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			throw "BigUnsigned::bitShiftLeft: "
 3688              		.loc 1 598 0
 3689 0094 8230B0E1 		lsls	r3, r2, #1
 3690 0098 0300000A 		beq	.L298
 602:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			return;
 3691              		.loc 1 602 0
 3692 009c 002062E2 		rsb	r2, r2, #0
 3693              	.LVL394:
 3694              	.LEHB28:
 3695 00a0 FEFFFFEB 		bl	_ZN11BigUnsigned13bitShiftRightERKS_i
 3696              	.LVL395:
 3697              	.L278:
 619:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 3698              		.loc 1 619 0
 3699 00a4 14D08DE2 		add	sp, sp, #20
 3700              		.cfi_remember_state
 3701              		.cfi_def_cfa_offset 20
 3702              		@ sp needed
 3703 00a8 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 3704              	.LVL396:
 3705              	.L298:
 3706              		.cfi_restore_state
 600:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		else {
 3707              		.loc 1 600 0
 3708 00ac 0400A0E3 		mov	r0, #4
 3709              	.LVL397:
 3710 00b0 FEFFFFEB 		bl	__cxa_allocate_exception
 3711              	.LVL398:
 3712 00b4 003000E3 		movw	r3, #:lower16:.LC4
 3713 00b8 003040E3 		movt	r3, #:upper16:.LC4
 3714 00bc 003080E5 		str	r3, [r0]
 3715 00c0 0020A0E3 		mov	r2, #0
 3716 00c4 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3717 00c8 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3718 00cc FEFFFFEB 		bl	__cxa_throw
 3719              	.LVL399:
 3720              	.L291:
 3721 00d0 0030A0E3 		mov	r3, #0
 3722              	.LVL400:
 3723 00d4 0A0000EA 		b	.L284
 3724              	.LVL401:
 3725              	.L292:
 3726              	.LBB511:
 3727              	.LBB512:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 3728              		.loc 1 295 0
 3729 00d8 0010A0E3 		mov	r1, #0
 3730              	.L287:
 3731              	.LVL402:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 3732              		.loc 1 296 0
 3733 00dc 042095E5 		ldr	r2, [r5, #4]
 3734 00e0 020053E1 		cmp	r3, r2
 3735 00e4 1400000A 		beq	.L293
 3736 00e8 082095E5 		ldr	r2, [r5, #8]
 3737 00ec 032192E7 		ldr	r2, [r2, r3, lsl #2]
 3738 00f0 1226A0E1 		lsl	r2, r2, r6
 3739              	.L288:
 3740              	.LVL403:
 297:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 3741              		.loc 1 297 0
 3742 00f4 021081E1 		orr	r1, r1, r2
 3743              	.LVL404:
 3744              	.LBE512:
 3745              	.LBE511:
 615:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero
 3746              		.loc 1 615 0
 3747 00f8 00108CE7 		str	r1, [ip, r0]
 614:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = getShiftedBlock(a, j, shiftBits);
 3748              		.loc 1 614 0
 3749 00fc 013083E2 		add	r3, r3, #1
 3750              	.LVL405:
 3751 0100 014084E2 		add	r4, r4, #1
 3752              	.LVL406:
 3753              	.L284:
 614:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = getShiftedBlock(a, j, shiftBits);
 3754              		.loc 1 614 0 is_stmt 0 discriminator 3
 3755 0104 042095E5 		ldr	r2, [r5, #4]
 3756 0108 020053E1 		cmp	r3, r2
 3757 010c 0C00008A 		bhi	.L286
 615:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero
 3758              		.loc 1 615 0 is_stmt 1 discriminator 2
 3759 0110 08C097E5 		ldr	ip, [r7, #8]
 3760 0114 0401A0E1 		lsl	r0, r4, #2
 3761              	.LVL407:
 3762              	.LBB514:
 3763              	.LBB513:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 3764              		.loc 1 295 0 discriminator 2
 3765 0118 000053E3 		cmp	r3, #0
 3766 011c 00005613 		cmpne	r6, #0
 3767 0120 ECFFFF0A 		beq	.L292
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 3768              		.loc 1 295 0 is_stmt 0
 3769 0124 082095E5 		ldr	r2, [r5, #8]
 3770 0128 071143E2 		sub	r1, r3, #-1073741823
 3771 012c 011192E7 		ldr	r1, [r2, r1, lsl #2]
 3772 0130 202066E2 		rsb	r2, r6, #32
 3773 0134 3112A0E1 		lsr	r1, r1, r2
 3774 0138 E7FFFFEA 		b	.L287
 3775              	.LVL408:
 3776              	.L293:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 3777              		.loc 1 296 0 is_stmt 1
 3778 013c 0020A0E3 		mov	r2, #0
 3779 0140 EBFFFFEA 		b	.L288
 3780              	.LVL409:
 3781              	.L286:
 3782              	.LBE513:
 3783              	.LBE514:
 617:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 3784              		.loc 1 617 0
 3785 0144 082097E5 		ldr	r2, [r7, #8]
 3786 0148 043097E5 		ldr	r3, [r7, #4]
 3787              	.LVL410:
 3788 014c 071143E2 		sub	r1, r3, #-1073741823
 3789 0150 012192E7 		ldr	r2, [r2, r1, lsl #2]
 3790 0154 000052E3 		cmp	r2, #0
 618:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 3791              		.loc 1 618 0
 3792 0158 01304302 		subeq	r3, r3, #1
 3793 015c 04308705 		streq	r3, [r7, #4]
 3794 0160 CFFFFFEA 		b	.L278
 3795              	.LVL411:
 3796              	.L294:
 3797              	.LBB515:
 3798              	.LBB509:
 3799              	.LBB506:
 3800              	.LBB507:
 3801              	.LBB508:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3802              		.loc 2 51 0
 3803 0164 0C009DE5 		ldr	r0, [sp, #12]
 3804 0168 000050E3 		cmp	r0, #0
 3805 016c 0000000A 		beq	.L290
 3806 0170 FEFFFFEB 		bl	_ZdaPv
 3807              	.LVL412:
 3808              	.L290:
 3809 0174 FEFFFFEB 		bl	__cxa_end_cleanup
 3810              	.LVL413:
 3811              	.LEHE28:
 3812              	.LBE508:
 3813              	.LBE507:
 3814              	.LBE506:
 3815              	.LBE509:
 3816              	.LBE515:
 3817              		.cfi_endproc
 3818              	.LFE100:
 3819              		.personality	__gxx_personality_v0
 3820              		.handlerdata
 3821              	.LLSDA100:
 3822 0008 FF       		.byte	0xff
 3823 0009 FF       		.byte	0xff
 3824 000a 01       		.byte	0x1
 3825 000b 0F       		.uleb128 .LLSDACSE100-.LLSDACSB100
 3826              	.LLSDACSB100:
 3827 000c 38       		.uleb128 .LEHB26-.LFB100
 3828 000d 04       		.uleb128 .LEHE26-.LEHB26
 3829 000e 00       		.uleb128 0
 3830 000f 00       		.uleb128 0
 3831 0010 70       		.uleb128 .LEHB27-.LFB100
 3832 0011 10       		.uleb128 .LEHE27-.LEHB27
 3833 0012 E402     		.uleb128 .L294-.LFB100
 3834 0014 00       		.uleb128 0
 3835 0015 A001     		.uleb128 .LEHB28-.LFB100
 3836 0017 D801     		.uleb128 .LEHE28-.LEHB28
 3837 0019 00       		.uleb128 0
 3838 001a 00       		.uleb128 0
 3839              	.LLSDACSE100:
 3840              		.section	.text._ZN11BigUnsigned12bitShiftLeftERKS_i
 3841              		.fnend
 3843              		.section	.text._ZN11BigUnsigned13bitShiftRightERKS_i,"ax",%progbits
 3844              		.align	2
 3845              		.global	_ZN11BigUnsigned13bitShiftRightERKS_i
 3846              		.syntax unified
 3847              		.arm
 3848              		.fpu neon
 3850              	_ZN11BigUnsigned13bitShiftRightERKS_i:
 3851              		.fnstart
 3852              	.LFB101:
 621:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	DTRT_ALIASED(this == &a, bitShiftRight(a, b));
 3853              		.loc 1 621 0
 3854              		.cfi_startproc
 3855              		.cfi_personality 0,__gxx_personality_v0
 3856              		.cfi_lsda 0,.LLSDA101
 3857              		@ args = 0, pretend = 0, frame = 16
 3858              		@ frame_needed = 0, uses_anonymous_args = 0
 3859              	.LVL414:
 3860 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 3861              		.save {r4, r5, r6, r7, lr}
 3862              		.cfi_def_cfa_offset 20
 3863              		.cfi_offset 4, -20
 3864              		.cfi_offset 5, -16
 3865              		.cfi_offset 6, -12
 3866              		.cfi_offset 7, -8
 3867              		.cfi_offset 14, -4
 3868              		.pad #20
 3869 0004 14D04DE2 		sub	sp, sp, #20
 3870              		.cfi_def_cfa_offset 40
 3871 0008 0070A0E1 		mov	r7, r0
 3872 000c 0150A0E1 		mov	r5, r1
 3873              	.LBB532:
 622:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b < 0) {
 3874              		.loc 1 622 0
 3875 0010 010050E1 		cmp	r0, r1
 3876 0014 0D00000A 		beq	.L316
 3877              	.LBE532:
 623:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		if (b << 1 == 0)
 3878              		.loc 1 623 0
 3879 0018 000052E3 		cmp	r2, #0
 3880 001c 190000BA 		blt	.L317
 634:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	unsigned int leftShiftBits = N * rightShiftBlocks - b;
 3881              		.loc 1 634 0
 3882 0020 1F6082E2 		add	r6, r2, #31
 3883 0024 A642A0E1 		lsr	r4, r6, #5
 3884              	.LVL415:
 635:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Now (N * rightShiftBlocks - leftShiftBits) == b
 3885              		.loc 1 635 0
 3886 0028 1F60C6E3 		bic	r6, r6, #31
 3887 002c 026046E0 		sub	r6, r6, r2
 3888              	.LVL416:
 638:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		// All of a is guaranteed to be shifted off, even considering the left
 3889              		.loc 1 638 0
 3890 0030 041091E5 		ldr	r1, [r1, #4]
 3891              	.LVL417:
 3892 0034 013081E2 		add	r3, r1, #1
 3893 0038 030054E1 		cmp	r4, r3
 3894 003c 1F00003A 		bcc	.L305
 641:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		return;
 3895              		.loc 1 641 0
 3896 0040 0030A0E3 		mov	r3, #0
 3897 0044 043080E5 		str	r3, [r0, #4]
 3898              	.LVL418:
 3899              	.L299:
 654:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 3900              		.loc 1 654 0
 3901 0048 14D08DE2 		add	sp, sp, #20
 3902              		.cfi_remember_state
 3903              		.cfi_def_cfa_offset 20
 3904              		@ sp needed
 3905 004c F080BDE8 		pop	{r4, r5, r6, r7, pc}
 3906              	.LVL419:
 3907              	.L316:
 3908              		.cfi_restore_state
 3909              	.LBB547:
 3910              	.LBB533:
 3911              	.LBB534:
 3912              	.LBB535:
 3913              	.LBB536:
 3914              	.LBB537:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 3915              		.loc 2 45 0
 3916 0050 0030A0E3 		mov	r3, #0
 3917 0054 04308DE5 		str	r3, [sp, #4]
 3918 0058 08308DE5 		str	r3, [sp, #8]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3919              		.loc 2 46 0
 3920 005c 0C308DE5 		str	r3, [sp, #12]
 3921              	.LVL420:
 3922              	.LBE537:
 3923              	.LBE536:
 3924              	.LBE535:
 3925              	.LBE534:
 622:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	if (b < 0) {
 3926              		.loc 1 622 0
 3927 0060 04008DE2 		add	r0, sp, #4
 3928              	.LVL421:
 3929              	.LEHB29:
 3930 0064 FEFFFFEB 		bl	_ZN11BigUnsigned13bitShiftRightERKS_i
 3931              	.LVL422:
 3932              	.LBB538:
 3933              	.LBB539:
  44:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 3934              		.loc 3 44 0
 3935 0068 04108DE2 		add	r1, sp, #4
 3936              	.LVL423:
 3937 006c 0700A0E1 		mov	r0, r7
 3938 0070 FEFFFFEB 		bl	_ZN15NumberlikeArrayImEaSERKS0_
 3939              	.LVL424:
 3940              	.LEHE29:
 3941              	.LBE539:
 3942              	.LBE538:
 3943              	.LBB540:
 3944              	.LBB541:
 3945              	.LBB542:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 3946              		.loc 2 51 0
 3947 0074 0C009DE5 		ldr	r0, [sp, #12]
 3948 0078 000050E3 		cmp	r0, #0
 3949 007c F1FFFF0A 		beq	.L299
 3950 0080 FEFFFFEB 		bl	_ZdaPv
 3951              	.LVL425:
 3952 0084 EFFFFFEA 		b	.L299
 3953              	.LVL426:
 3954              	.L317:
 3955              	.LBE542:
 3956              	.LBE541:
 3957              	.LBE540:
 3958              	.LBE533:
 3959              	.LBE547:
 624:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			throw "BigUnsigned::bitShiftRight: "
 3960              		.loc 1 624 0
 3961 0088 8230B0E1 		lsls	r3, r2, #1
 3962 008c 0200000A 		beq	.L318
 628:../src/zxing_lib/bigint/BigUnsigned.cpp **** 			return;
 3963              		.loc 1 628 0
 3964 0090 002062E2 		rsb	r2, r2, #0
 3965              	.LVL427:
 3966              	.LEHB30:
 3967 0094 FEFFFFEB 		bl	_ZN11BigUnsigned12bitShiftLeftERKS_i
 3968              	.LVL428:
 629:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		}
 3969              		.loc 1 629 0
 3970 0098 EAFFFFEA 		b	.L299
 3971              	.LVL429:
 3972              	.L318:
 626:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		else {
 3973              		.loc 1 626 0
 3974 009c 0400A0E3 		mov	r0, #4
 3975              	.LVL430:
 3976 00a0 FEFFFFEB 		bl	__cxa_allocate_exception
 3977              	.LVL431:
 3978 00a4 003000E3 		movw	r3, #:lower16:.LC5
 3979 00a8 003040E3 		movt	r3, #:upper16:.LC5
 3980 00ac 003080E5 		str	r3, [r0]
 3981 00b0 0020A0E3 		mov	r2, #0
 3982 00b4 001000E3 		movw	r1, #:lower16:_ZTIPKc
 3983 00b8 001040E3 		movt	r1, #:upper16:_ZTIPKc
 3984 00bc FEFFFFEB 		bl	__cxa_throw
 3985              	.LVL432:
 3986              	.L305:
 646:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	allocate(len);
 3987              		.loc 1 646 0
 3988 00c0 041041E0 		sub	r1, r1, r4
 3989 00c4 011081E2 		add	r1, r1, #1
 3990 00c8 041080E5 		str	r1, [r0, #4]
 647:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	Index i, j;
 3991              		.loc 1 647 0
 3992 00cc FEFFFFEB 		bl	_ZN15NumberlikeArrayImE8allocateEj
 3993              	.LVL433:
 649:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = getShiftedBlock(a, j, leftShiftBits);
 3994              		.loc 1 649 0
 3995 00d0 0010A0E3 		mov	r1, #0
 3996 00d4 0A0000EA 		b	.L309
 3997              	.LVL434:
 3998              	.L312:
 3999              	.LBB548:
 4000              	.LBB549:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 4001              		.loc 1 295 0
 4002 00d8 0030A0E3 		mov	r3, #0
 4003              	.L307:
 4004              	.LVL435:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 4005              		.loc 1 296 0
 4006 00dc 042095E5 		ldr	r2, [r5, #4]
 4007 00e0 020054E1 		cmp	r4, r2
 4008 00e4 1400000A 		beq	.L313
 4009 00e8 082095E5 		ldr	r2, [r5, #8]
 4010 00ec 042192E7 		ldr	r2, [r2, r4, lsl #2]
 4011 00f0 1226A0E1 		lsl	r2, r2, r6
 4012              	.L308:
 4013              	.LVL436:
 297:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 4014              		.loc 1 297 0
 4015 00f4 023083E1 		orr	r3, r3, r2
 4016              	.LVL437:
 4017              	.LBE549:
 4018              	.LBE548:
 650:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero
 4019              		.loc 1 650 0
 4020 00f8 00308CE7 		str	r3, [ip, r0]
 649:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = getShiftedBlock(a, j, leftShiftBits);
 4021              		.loc 1 649 0
 4022 00fc 014084E2 		add	r4, r4, #1
 4023              	.LVL438:
 4024 0100 011081E2 		add	r1, r1, #1
 4025              	.LVL439:
 4026              	.L309:
 649:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		blk[i] = getShiftedBlock(a, j, leftShiftBits);
 4027              		.loc 1 649 0 is_stmt 0 discriminator 3
 4028 0104 043095E5 		ldr	r3, [r5, #4]
 4029 0108 030054E1 		cmp	r4, r3
 4030 010c 0C00008A 		bhi	.L306
 650:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	// Zap possible leading zero
 4031              		.loc 1 650 0 is_stmt 1 discriminator 2
 4032 0110 08C097E5 		ldr	ip, [r7, #8]
 4033 0114 0101A0E1 		lsl	r0, r1, #2
 4034              	.LVL440:
 4035              	.LBB551:
 4036              	.LBB550:
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 4037              		.loc 1 295 0 discriminator 2
 4038 0118 000054E3 		cmp	r4, #0
 4039 011c 00005613 		cmpne	r6, #0
 4040 0120 ECFFFF0A 		beq	.L312
 295:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	BigUnsigned::Blk part2 = (x == num.len) ? 0 : (num.blk[x] << y);
 4041              		.loc 1 295 0 is_stmt 0
 4042 0124 083095E5 		ldr	r3, [r5, #8]
 4043 0128 072144E2 		sub	r2, r4, #-1073741823
 4044 012c 023193E7 		ldr	r3, [r3, r2, lsl #2]
 4045 0130 202066E2 		rsb	r2, r6, #32
 4046 0134 3332A0E1 		lsr	r3, r3, r2
 4047 0138 E7FFFFEA 		b	.L307
 4048              	.LVL441:
 4049              	.L313:
 296:../src/zxing_lib/bigint/BigUnsigned.cpp **** 	return part1 | part2;
 4050              		.loc 1 296 0 is_stmt 1
 4051 013c 0020A0E3 		mov	r2, #0
 4052 0140 EBFFFFEA 		b	.L308
 4053              	.LVL442:
 4054              	.L306:
 4055              	.LBE550:
 4056              	.LBE551:
 652:../src/zxing_lib/bigint/BigUnsigned.cpp **** 		len--;
 4057              		.loc 1 652 0
 4058 0144 082097E5 		ldr	r2, [r7, #8]
 4059 0148 043097E5 		ldr	r3, [r7, #4]
 4060 014c 071143E2 		sub	r1, r3, #-1073741823
 4061              	.LVL443:
 4062 0150 012192E7 		ldr	r2, [r2, r1, lsl #2]
 4063 0154 000052E3 		cmp	r2, #0
 653:../src/zxing_lib/bigint/BigUnsigned.cpp **** }
 4064              		.loc 1 653 0
 4065 0158 01304302 		subeq	r3, r3, #1
 4066 015c 04308705 		streq	r3, [r7, #4]
 4067 0160 B8FFFFEA 		b	.L299
 4068              	.LVL444:
 4069              	.L314:
 4070              	.LBB552:
 4071              	.LBB546:
 4072              	.LBB543:
 4073              	.LBB544:
 4074              	.LBB545:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 4075              		.loc 2 51 0
 4076 0164 0C009DE5 		ldr	r0, [sp, #12]
 4077 0168 000050E3 		cmp	r0, #0
 4078 016c 0000000A 		beq	.L311
 4079 0170 FEFFFFEB 		bl	_ZdaPv
 4080              	.LVL445:
 4081              	.L311:
 4082 0174 FEFFFFEB 		bl	__cxa_end_cleanup
 4083              	.LVL446:
 4084              	.LEHE30:
 4085              	.LBE545:
 4086              	.LBE544:
 4087              	.LBE543:
 4088              	.LBE546:
 4089              	.LBE552:
 4090              		.cfi_endproc
 4091              	.LFE101:
 4092              		.personality	__gxx_personality_v0
 4093              		.handlerdata
 4094              	.LLSDA101:
 4095 0008 FF       		.byte	0xff
 4096 0009 FF       		.byte	0xff
 4097 000a 01       		.byte	0x1
 4098 000b 0B       		.uleb128 .LLSDACSE101-.LLSDACSB101
 4099              	.LLSDACSB101:
 4100 000c 64       		.uleb128 .LEHB29-.LFB101
 4101 000d 10       		.uleb128 .LEHE29-.LEHB29
 4102 000e E402     		.uleb128 .L314-.LFB101
 4103 0010 00       		.uleb128 0
 4104 0011 9401     		.uleb128 .LEHB30-.LFB101
 4105 0013 E401     		.uleb128 .LEHE30-.LEHB30
 4106 0015 00       		.uleb128 0
 4107 0016 00       		.uleb128 0
 4108              	.LLSDACSE101:
 4109              		.section	.text._ZN11BigUnsigned13bitShiftRightERKS_i
 4110              		.fnend
 4112              		.section	.text._ZN11BigUnsigned17initFromPrimitiveIlEEvT_,"axG",%progbits,_ZN11BigUnsigned17initFr
 4113              		.align	2
 4114              		.weak	_ZN11BigUnsigned17initFromPrimitiveIlEEvT_
 4115              		.syntax unified
 4116              		.arm
 4117              		.fpu neon
 4119              	_ZN11BigUnsigned17initFromPrimitiveIlEEvT_:
 4120              		.fnstart
 4121              	.LFB136:
 356:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x == 0)
 4122              		.loc 3 356 0
 4123              		.cfi_startproc
 4124              		@ args = 0, pretend = 0, frame = 0
 4125              		@ frame_needed = 0, uses_anonymous_args = 0
 4126              	.LVL447:
 4127 0000 70402DE9 		push	{r4, r5, r6, lr}
 4128              		.save {r4, r5, r6, lr}
 4129              		.cfi_def_cfa_offset 16
 4130              		.cfi_offset 4, -16
 4131              		.cfi_offset 5, -12
 4132              		.cfi_offset 6, -8
 4133              		.cfi_offset 14, -4
 357:../src/zxing_lib/bigint/BigUnsigned.hh **** 		; // NumberlikeArray already initialized us to zero.
 4134              		.loc 3 357 0
 4135 0004 005051E2 		subs	r5, r1, #0
 4136 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 4137 000c 0040A0E1 		mov	r4, r0
 361:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk = new Blk[1];
 4138              		.loc 3 361 0
 4139 0010 0160A0E3 		mov	r6, #1
 4140 0014 006080E5 		str	r6, [r0]
 362:../src/zxing_lib/bigint/BigUnsigned.hh **** 		len = 1;
 4141              		.loc 3 362 0
 4142 0018 0400A0E3 		mov	r0, #4
 4143              	.LVL448:
 4144 001c FEFFFFEB 		bl	_Znaj
 4145              	.LVL449:
 4146 0020 080084E5 		str	r0, [r4, #8]
 363:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk[0] = Blk(x);
 4147              		.loc 3 363 0
 4148 0024 046084E5 		str	r6, [r4, #4]
 364:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 4149              		.loc 3 364 0
 4150 0028 005080E5 		str	r5, [r0]
 4151 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 4152              		.cfi_endproc
 4153              	.LFE136:
 4154              		.fnend
 4156              		.section	.text._ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_,"axG",%progbits,_ZN11BigUnsigned23
 4157              		.align	2
 4158              		.weak	_ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_
 4159              		.syntax unified
 4160              		.arm
 4161              		.fpu neon
 4163              	_ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_:
 4164              		.fnstart
 4165              	.LFB125:
 373:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x < 0)
 4166              		.loc 3 373 0
 4167              		.cfi_startproc
 4168              		@ args = 0, pretend = 0, frame = 0
 4169              		@ frame_needed = 0, uses_anonymous_args = 0
 4170              	.LVL450:
 4171 0000 10402DE9 		push	{r4, lr}
 4172              		.save {r4, lr}
 4173              		.cfi_def_cfa_offset 8
 4174              		.cfi_offset 4, -8
 4175              		.cfi_offset 14, -4
 374:../src/zxing_lib/bigint/BigUnsigned.hh **** 		throw "BigUnsigned constructor: "
 4176              		.loc 3 374 0
 4177 0004 000051E3 		cmp	r1, #0
 4178 0008 010000BA 		blt	.L325
 378:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4179              		.loc 3 378 0
 4180 000c FEFFFFEB 		bl	_ZN11BigUnsigned17initFromPrimitiveIlEEvT_
 4181              	.LVL451:
 4182 0010 1080BDE8 		pop	{r4, pc}
 4183              	.LVL452:
 4184              	.L325:
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 4185              		.loc 3 376 0
 4186 0014 0400A0E3 		mov	r0, #4
 4187              	.LVL453:
 4188 0018 FEFFFFEB 		bl	__cxa_allocate_exception
 4189              	.LVL454:
 375:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Cannot construct a BigUnsigned from a negative number";
 4190              		.loc 3 375 0
 4191 001c 003000E3 		movw	r3, #:lower16:.LC6
 4192 0020 003040E3 		movt	r3, #:upper16:.LC6
 4193 0024 003080E5 		str	r3, [r0]
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 4194              		.loc 3 376 0
 4195 0028 0020A0E3 		mov	r2, #0
 4196 002c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 4197 0030 001040E3 		movt	r1, #:upper16:_ZTIPKc
 4198 0034 FEFFFFEB 		bl	__cxa_throw
 4199              	.LVL455:
 4200              		.cfi_endproc
 4201              	.LFE125:
 4202              		.fnend
 4204              		.section	.text._ZN11BigUnsignedC2El,"ax",%progbits
 4205              		.align	2
 4206              		.global	_ZN11BigUnsignedC2El
 4207              		.syntax unified
 4208              		.arm
 4209              		.fpu neon
 4211              	_ZN11BigUnsignedC2El:
 4212              		.fnstart
 4213              	.LFB74:
  11:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         int   x) { initFromSignedPrimitive(x); }
 4214              		.loc 1 11 0
 4215              		.cfi_startproc
 4216              		.cfi_personality 0,__gxx_personality_v0
 4217              		.cfi_lsda 0,.LLSDA74
 4218              		@ args = 0, pretend = 0, frame = 0
 4219              		@ frame_needed = 0, uses_anonymous_args = 0
 4220              	.LVL456:
 4221 0000 10402DE9 		push	{r4, lr}
 4222              		.save {r4, lr}
 4223              		.cfi_def_cfa_offset 8
 4224              		.cfi_offset 4, -8
 4225              		.cfi_offset 14, -4
 4226 0004 0040A0E1 		mov	r4, r0
 4227              	.LVL457:
 4228              	.LBB553:
 4229              	.LBB554:
 4230              	.LBB555:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 4231              		.loc 2 45 0
 4232 0008 0030A0E3 		mov	r3, #0
 4233 000c 003080E5 		str	r3, [r0]
 4234 0010 043080E5 		str	r3, [r0, #4]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 4235              		.loc 2 46 0
 4236 0014 083080E5 		str	r3, [r0, #8]
 4237              	.LVL458:
 4238              	.LEHB31:
 4239              	.LBE555:
 4240              	.LBE554:
  11:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         int   x) { initFromSignedPrimitive(x); }
 4241              		.loc 1 11 0
 4242 0018 FEFFFFEB 		bl	_ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_
 4243              	.LVL459:
 4244              	.LEHE31:
 4245 001c 040000EA 		b	.L332
 4246              	.L329:
 4247              	.LVL460:
 4248              	.LBB556:
 4249              	.LBB557:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 4250              		.loc 2 51 0
 4251 0020 080094E5 		ldr	r0, [r4, #8]
 4252 0024 000050E3 		cmp	r0, #0
 4253 0028 0000000A 		beq	.L328
 4254 002c FEFFFFEB 		bl	_ZdaPv
 4255              	.LVL461:
 4256              	.L328:
 4257              	.LEHB32:
 4258 0030 FEFFFFEB 		bl	__cxa_end_cleanup
 4259              	.LVL462:
 4260              	.LEHE32:
 4261              	.L332:
 4262              	.LBE557:
 4263              	.LBE556:
 4264              	.LBE553:
  11:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         int   x) { initFromSignedPrimitive(x); }
 4265              		.loc 1 11 0
 4266 0034 0400A0E1 		mov	r0, r4
 4267 0038 1080BDE8 		pop	{r4, pc}
 4268              		.cfi_endproc
 4269              	.LFE74:
 4270              		.personality	__gxx_personality_v0
 4271              		.handlerdata
 4272              	.LLSDA74:
 4273 0008 FF       		.byte	0xff
 4274 0009 FF       		.byte	0xff
 4275 000a 01       		.byte	0x1
 4276 000b 08       		.uleb128 .LLSDACSE74-.LLSDACSB74
 4277              	.LLSDACSB74:
 4278 000c 18       		.uleb128 .LEHB31-.LFB74
 4279 000d 04       		.uleb128 .LEHE31-.LEHB31
 4280 000e 20       		.uleb128 .L329-.LFB74
 4281 000f 00       		.uleb128 0
 4282 0010 30       		.uleb128 .LEHB32-.LFB74
 4283 0011 04       		.uleb128 .LEHE32-.LEHB32
 4284 0012 00       		.uleb128 0
 4285 0013 00       		.uleb128 0
 4286              	.LLSDACSE74:
 4287              		.section	.text._ZN11BigUnsignedC2El
 4288              		.fnend
 4290              		.global	_ZN11BigUnsignedC1El
 4291              		.set	_ZN11BigUnsignedC1El,_ZN11BigUnsignedC2El
 4292              		.section	.text._ZN11BigUnsigned17initFromPrimitiveIiEEvT_,"axG",%progbits,_ZN11BigUnsigned17initFr
 4293              		.align	2
 4294              		.weak	_ZN11BigUnsigned17initFromPrimitiveIiEEvT_
 4295              		.syntax unified
 4296              		.arm
 4297              		.fpu neon
 4299              	_ZN11BigUnsigned17initFromPrimitiveIiEEvT_:
 4300              		.fnstart
 4301              	.LFB137:
 356:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x == 0)
 4302              		.loc 3 356 0
 4303              		.cfi_startproc
 4304              		@ args = 0, pretend = 0, frame = 0
 4305              		@ frame_needed = 0, uses_anonymous_args = 0
 4306              	.LVL463:
 4307 0000 70402DE9 		push	{r4, r5, r6, lr}
 4308              		.save {r4, r5, r6, lr}
 4309              		.cfi_def_cfa_offset 16
 4310              		.cfi_offset 4, -16
 4311              		.cfi_offset 5, -12
 4312              		.cfi_offset 6, -8
 4313              		.cfi_offset 14, -4
 357:../src/zxing_lib/bigint/BigUnsigned.hh **** 		; // NumberlikeArray already initialized us to zero.
 4314              		.loc 3 357 0
 4315 0004 005051E2 		subs	r5, r1, #0
 4316 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 4317 000c 0040A0E1 		mov	r4, r0
 361:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk = new Blk[1];
 4318              		.loc 3 361 0
 4319 0010 0160A0E3 		mov	r6, #1
 4320 0014 006080E5 		str	r6, [r0]
 362:../src/zxing_lib/bigint/BigUnsigned.hh **** 		len = 1;
 4321              		.loc 3 362 0
 4322 0018 0400A0E3 		mov	r0, #4
 4323              	.LVL464:
 4324 001c FEFFFFEB 		bl	_Znaj
 4325              	.LVL465:
 4326 0020 080084E5 		str	r0, [r4, #8]
 363:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk[0] = Blk(x);
 4327              		.loc 3 363 0
 4328 0024 046084E5 		str	r6, [r4, #4]
 364:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 4329              		.loc 3 364 0
 4330 0028 005080E5 		str	r5, [r0]
 4331 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 4332              		.cfi_endproc
 4333              	.LFE137:
 4334              		.fnend
 4336              		.section	.text._ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_,"axG",%progbits,_ZN11BigUnsigned23
 4337              		.align	2
 4338              		.weak	_ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_
 4339              		.syntax unified
 4340              		.arm
 4341              		.fpu neon
 4343              	_ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_:
 4344              		.fnstart
 4345              	.LFB126:
 373:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x < 0)
 4346              		.loc 3 373 0
 4347              		.cfi_startproc
 4348              		@ args = 0, pretend = 0, frame = 0
 4349              		@ frame_needed = 0, uses_anonymous_args = 0
 4350              	.LVL466:
 4351 0000 10402DE9 		push	{r4, lr}
 4352              		.save {r4, lr}
 4353              		.cfi_def_cfa_offset 8
 4354              		.cfi_offset 4, -8
 4355              		.cfi_offset 14, -4
 374:../src/zxing_lib/bigint/BigUnsigned.hh **** 		throw "BigUnsigned constructor: "
 4356              		.loc 3 374 0
 4357 0004 000051E3 		cmp	r1, #0
 4358 0008 010000BA 		blt	.L339
 378:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4359              		.loc 3 378 0
 4360 000c FEFFFFEB 		bl	_ZN11BigUnsigned17initFromPrimitiveIiEEvT_
 4361              	.LVL467:
 4362 0010 1080BDE8 		pop	{r4, pc}
 4363              	.LVL468:
 4364              	.L339:
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 4365              		.loc 3 376 0
 4366 0014 0400A0E3 		mov	r0, #4
 4367              	.LVL469:
 4368 0018 FEFFFFEB 		bl	__cxa_allocate_exception
 4369              	.LVL470:
 375:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Cannot construct a BigUnsigned from a negative number";
 4370              		.loc 3 375 0
 4371 001c 003000E3 		movw	r3, #:lower16:.LC6
 4372 0020 003040E3 		movt	r3, #:upper16:.LC6
 4373 0024 003080E5 		str	r3, [r0]
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 4374              		.loc 3 376 0
 4375 0028 0020A0E3 		mov	r2, #0
 4376 002c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 4377 0030 001040E3 		movt	r1, #:upper16:_ZTIPKc
 4378 0034 FEFFFFEB 		bl	__cxa_throw
 4379              	.LVL471:
 4380              		.cfi_endproc
 4381              	.LFE126:
 4382              		.fnend
 4384              		.section	.text._ZN11BigUnsignedC2Ei,"ax",%progbits
 4385              		.align	2
 4386              		.global	_ZN11BigUnsignedC2Ei
 4387              		.syntax unified
 4388              		.arm
 4389              		.fpu neon
 4391              	_ZN11BigUnsignedC2Ei:
 4392              		.fnstart
 4393              	.LFB77:
  12:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         short x) { initFromSignedPrimitive(x); }
 4394              		.loc 1 12 0
 4395              		.cfi_startproc
 4396              		.cfi_personality 0,__gxx_personality_v0
 4397              		.cfi_lsda 0,.LLSDA77
 4398              		@ args = 0, pretend = 0, frame = 0
 4399              		@ frame_needed = 0, uses_anonymous_args = 0
 4400              	.LVL472:
 4401 0000 10402DE9 		push	{r4, lr}
 4402              		.save {r4, lr}
 4403              		.cfi_def_cfa_offset 8
 4404              		.cfi_offset 4, -8
 4405              		.cfi_offset 14, -4
 4406 0004 0040A0E1 		mov	r4, r0
 4407              	.LVL473:
 4408              	.LBB558:
 4409              	.LBB559:
 4410              	.LBB560:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 4411              		.loc 2 45 0
 4412 0008 0030A0E3 		mov	r3, #0
 4413 000c 003080E5 		str	r3, [r0]
 4414 0010 043080E5 		str	r3, [r0, #4]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 4415              		.loc 2 46 0
 4416 0014 083080E5 		str	r3, [r0, #8]
 4417              	.LVL474:
 4418              	.LEHB33:
 4419              	.LBE560:
 4420              	.LBE559:
  12:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         short x) { initFromSignedPrimitive(x); }
 4421              		.loc 1 12 0
 4422 0018 FEFFFFEB 		bl	_ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_
 4423              	.LVL475:
 4424              	.LEHE33:
 4425 001c 040000EA 		b	.L346
 4426              	.L343:
 4427              	.LVL476:
 4428              	.LBB561:
 4429              	.LBB562:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 4430              		.loc 2 51 0
 4431 0020 080094E5 		ldr	r0, [r4, #8]
 4432 0024 000050E3 		cmp	r0, #0
 4433 0028 0000000A 		beq	.L342
 4434 002c FEFFFFEB 		bl	_ZdaPv
 4435              	.LVL477:
 4436              	.L342:
 4437              	.LEHB34:
 4438 0030 FEFFFFEB 		bl	__cxa_end_cleanup
 4439              	.LVL478:
 4440              	.LEHE34:
 4441              	.L346:
 4442              	.LBE562:
 4443              	.LBE561:
 4444              	.LBE558:
  12:../src/zxing_lib/bigint/BigUnsigned.cpp **** BigUnsigned::BigUnsigned(         short x) { initFromSignedPrimitive(x); }
 4445              		.loc 1 12 0
 4446 0034 0400A0E1 		mov	r0, r4
 4447 0038 1080BDE8 		pop	{r4, pc}
 4448              		.cfi_endproc
 4449              	.LFE77:
 4450              		.personality	__gxx_personality_v0
 4451              		.handlerdata
 4452              	.LLSDA77:
 4453 0008 FF       		.byte	0xff
 4454 0009 FF       		.byte	0xff
 4455 000a 01       		.byte	0x1
 4456 000b 08       		.uleb128 .LLSDACSE77-.LLSDACSB77
 4457              	.LLSDACSB77:
 4458 000c 18       		.uleb128 .LEHB33-.LFB77
 4459 000d 04       		.uleb128 .LEHE33-.LEHB33
 4460 000e 20       		.uleb128 .L343-.LFB77
 4461 000f 00       		.uleb128 0
 4462 0010 30       		.uleb128 .LEHB34-.LFB77
 4463 0011 04       		.uleb128 .LEHE34-.LEHB34
 4464 0012 00       		.uleb128 0
 4465 0013 00       		.uleb128 0
 4466              	.LLSDACSE77:
 4467              		.section	.text._ZN11BigUnsignedC2Ei
 4468              		.fnend
 4470              		.global	_ZN11BigUnsignedC1Ei
 4471              		.set	_ZN11BigUnsignedC1Ei,_ZN11BigUnsignedC2Ei
 4472              		.section	.text._ZN11BigUnsigned17initFromPrimitiveIsEEvT_,"axG",%progbits,_ZN11BigUnsigned17initFr
 4473              		.align	2
 4474              		.weak	_ZN11BigUnsigned17initFromPrimitiveIsEEvT_
 4475              		.syntax unified
 4476              		.arm
 4477              		.fpu neon
 4479              	_ZN11BigUnsigned17initFromPrimitiveIsEEvT_:
 4480              		.fnstart
 4481              	.LFB138:
 356:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x == 0)
 4482              		.loc 3 356 0
 4483              		.cfi_startproc
 4484              		@ args = 0, pretend = 0, frame = 0
 4485              		@ frame_needed = 0, uses_anonymous_args = 0
 4486              	.LVL479:
 4487 0000 70402DE9 		push	{r4, r5, r6, lr}
 4488              		.save {r4, r5, r6, lr}
 4489              		.cfi_def_cfa_offset 16
 4490              		.cfi_offset 4, -16
 4491              		.cfi_offset 5, -12
 4492              		.cfi_offset 6, -8
 4493              		.cfi_offset 14, -4
 357:../src/zxing_lib/bigint/BigUnsigned.hh **** 		; // NumberlikeArray already initialized us to zero.
 4494              		.loc 3 357 0
 4495 0004 005051E2 		subs	r5, r1, #0
 4496 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 4497 000c 0040A0E1 		mov	r4, r0
 361:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk = new Blk[1];
 4498              		.loc 3 361 0
 4499 0010 0160A0E3 		mov	r6, #1
 4500 0014 006080E5 		str	r6, [r0]
 362:../src/zxing_lib/bigint/BigUnsigned.hh **** 		len = 1;
 4501              		.loc 3 362 0
 4502 0018 0400A0E3 		mov	r0, #4
 4503              	.LVL480:
 4504 001c FEFFFFEB 		bl	_Znaj
 4505              	.LVL481:
 4506 0020 080084E5 		str	r0, [r4, #8]
 363:../src/zxing_lib/bigint/BigUnsigned.hh **** 		blk[0] = Blk(x);
 4507              		.loc 3 363 0
 4508 0024 046084E5 		str	r6, [r4, #4]
 364:../src/zxing_lib/bigint/BigUnsigned.hh **** 	}
 4509              		.loc 3 364 0
 4510 0028 005080E5 		str	r5, [r0]
 4511 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 4512              		.cfi_endproc
 4513              	.LFE138:
 4514              		.fnend
 4516              		.section	.text._ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_,"axG",%progbits,_ZN11BigUnsigned23
 4517              		.align	2
 4518              		.weak	_ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_
 4519              		.syntax unified
 4520              		.arm
 4521              		.fpu neon
 4523              	_ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_:
 4524              		.fnstart
 4525              	.LFB127:
 373:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x < 0)
 4526              		.loc 3 373 0
 4527              		.cfi_startproc
 4528              		@ args = 0, pretend = 0, frame = 0
 4529              		@ frame_needed = 0, uses_anonymous_args = 0
 4530              	.LVL482:
 4531 0000 10402DE9 		push	{r4, lr}
 4532              		.save {r4, lr}
 4533              		.cfi_def_cfa_offset 8
 4534              		.cfi_offset 4, -8
 4535              		.cfi_offset 14, -4
 374:../src/zxing_lib/bigint/BigUnsigned.hh **** 		throw "BigUnsigned constructor: "
 4536              		.loc 3 374 0
 4537 0004 000051E3 		cmp	r1, #0
 4538              	.LVL483:
 4539 0008 010000BA 		blt	.L353
 378:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4540              		.loc 3 378 0
 4541 000c FEFFFFEB 		bl	_ZN11BigUnsigned17initFromPrimitiveIsEEvT_
 4542              	.LVL484:
 4543 0010 1080BDE8 		pop	{r4, pc}
 4544              	.LVL485:
 4545              	.L353:
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 4546              		.loc 3 376 0
 4547 0014 0400A0E3 		mov	r0, #4
 4548              	.LVL486:
 4549 0018 FEFFFFEB 		bl	__cxa_allocate_exception
 4550              	.LVL487:
 375:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Cannot construct a BigUnsigned from a negative number";
 4551              		.loc 3 375 0
 4552 001c 003000E3 		movw	r3, #:lower16:.LC6
 4553 0020 003040E3 		movt	r3, #:upper16:.LC6
 4554 0024 003080E5 		str	r3, [r0]
 376:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 4555              		.loc 3 376 0
 4556 0028 0020A0E3 		mov	r2, #0
 4557 002c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 4558 0030 001040E3 		movt	r1, #:upper16:_ZTIPKc
 4559 0034 FEFFFFEB 		bl	__cxa_throw
 4560              	.LVL488:
 4561              		.cfi_endproc
 4562              	.LFE127:
 4563              		.fnend
 4565              		.section	.text._ZN11BigUnsignedC2Es,"ax",%progbits
 4566              		.align	2
 4567              		.global	_ZN11BigUnsignedC2Es
 4568              		.syntax unified
 4569              		.arm
 4570              		.fpu neon
 4572              	_ZN11BigUnsignedC2Es:
 4573              		.fnstart
 4574              	.LFB80:
  13:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 4575              		.loc 1 13 0
 4576              		.cfi_startproc
 4577              		.cfi_personality 0,__gxx_personality_v0
 4578              		.cfi_lsda 0,.LLSDA80
 4579              		@ args = 0, pretend = 0, frame = 0
 4580              		@ frame_needed = 0, uses_anonymous_args = 0
 4581              	.LVL489:
 4582 0000 10402DE9 		push	{r4, lr}
 4583              		.save {r4, lr}
 4584              		.cfi_def_cfa_offset 8
 4585              		.cfi_offset 4, -8
 4586              		.cfi_offset 14, -4
 4587 0004 0040A0E1 		mov	r4, r0
 4588              	.LVL490:
 4589              	.LBB563:
 4590              	.LBB564:
 4591              	.LBB565:
  45:../src/zxing_lib/bigint/NumberlikeArray.hh **** 		blk = NULL;
 4592              		.loc 2 45 0
 4593 0008 0030A0E3 		mov	r3, #0
 4594 000c 003080E5 		str	r3, [r0]
 4595 0010 043080E5 		str	r3, [r0, #4]
  46:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 4596              		.loc 2 46 0
 4597 0014 083080E5 		str	r3, [r0, #8]
 4598              	.LVL491:
 4599              	.LEHB35:
 4600              	.LBE565:
 4601              	.LBE564:
  13:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 4602              		.loc 1 13 0
 4603 0018 FEFFFFEB 		bl	_ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_
 4604              	.LVL492:
 4605              	.LEHE35:
 4606 001c 040000EA 		b	.L360
 4607              	.L357:
 4608              	.LVL493:
 4609              	.LBB566:
 4610              	.LBB567:
  51:../src/zxing_lib/bigint/NumberlikeArray.hh **** 	}
 4611              		.loc 2 51 0
 4612 0020 080094E5 		ldr	r0, [r4, #8]
 4613 0024 000050E3 		cmp	r0, #0
 4614 0028 0000000A 		beq	.L356
 4615 002c FEFFFFEB 		bl	_ZdaPv
 4616              	.LVL494:
 4617              	.L356:
 4618              	.LEHB36:
 4619 0030 FEFFFFEB 		bl	__cxa_end_cleanup
 4620              	.LVL495:
 4621              	.LEHE36:
 4622              	.L360:
 4623              	.LBE567:
 4624              	.LBE566:
 4625              	.LBE563:
  13:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 4626              		.loc 1 13 0
 4627 0034 0400A0E1 		mov	r0, r4
 4628 0038 1080BDE8 		pop	{r4, pc}
 4629              		.cfi_endproc
 4630              	.LFE80:
 4631              		.personality	__gxx_personality_v0
 4632              		.handlerdata
 4633              	.LLSDA80:
 4634 0008 FF       		.byte	0xff
 4635 0009 FF       		.byte	0xff
 4636 000a 01       		.byte	0x1
 4637 000b 08       		.uleb128 .LLSDACSE80-.LLSDACSB80
 4638              	.LLSDACSB80:
 4639 000c 18       		.uleb128 .LEHB35-.LFB80
 4640 000d 04       		.uleb128 .LEHE35-.LEHB35
 4641 000e 20       		.uleb128 .L357-.LFB80
 4642 000f 00       		.uleb128 0
 4643 0010 30       		.uleb128 .LEHB36-.LFB80
 4644 0011 04       		.uleb128 .LEHE36-.LEHB36
 4645 0012 00       		.uleb128 0
 4646 0013 00       		.uleb128 0
 4647              	.LLSDACSE80:
 4648              		.section	.text._ZN11BigUnsignedC2Es
 4649              		.fnend
 4651              		.global	_ZN11BigUnsignedC1Es
 4652              		.set	_ZN11BigUnsignedC1Es,_ZN11BigUnsignedC2Es
 4653              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveIlEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 4654              		.align	2
 4655              		.weak	_ZNK11BigUnsigned18convertToPrimitiveIlEET_v
 4656              		.syntax unified
 4657              		.arm
 4658              		.fpu neon
 4660              	_ZNK11BigUnsigned18convertToPrimitiveIlEET_v:
 4661              		.fnstart
 4662              	.LFB139:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 4663              		.loc 3 387 0
 4664              		.cfi_startproc
 4665              		@ args = 0, pretend = 0, frame = 0
 4666              		@ frame_needed = 0, uses_anonymous_args = 0
 4667              	.LVL496:
 4668              	.LBB568:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 4669              		.loc 3 388 0
 4670 0000 043090E5 		ldr	r3, [r0, #4]
 4671 0004 000053E3 		cmp	r3, #0
 4672 0008 0E00000A 		beq	.L364
 4673              	.LBB569:
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 4674              		.loc 3 391 0
 4675 000c 010053E3 		cmp	r3, #1
 4676 0010 0200001A 		bne	.L363
 4677              	.LBB570:
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 4678              		.loc 3 393 0
 4679 0014 083090E5 		ldr	r3, [r0, #8]
 4680 0018 000093E5 		ldr	r0, [r3]
 4681              	.LVL497:
 4682              	.L361:
 4683              	.LBE570:
 4684              	.LBE569:
 4685              	.LBE568:
 4686              		.loc 3 402 0
 4687 001c 1EFF2FE1 		bx	lr
 4688              	.LVL498:
 4689              	.L363:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 4690              		.loc 3 387 0
 4691 0020 10402DE9 		push	{r4, lr}
 4692              		.save {r4, lr}
 4693              		.cfi_def_cfa_offset 8
 4694              		.cfi_offset 4, -8
 4695              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4696              		.loc 3 401 0
 4697 0024 0400A0E3 		mov	r0, #4
 4698              	.LVL499:
 4699 0028 FEFFFFEB 		bl	__cxa_allocate_exception
 4700              	.LVL500:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 4701              		.loc 3 400 0
 4702 002c 003000E3 		movw	r3, #:lower16:.LC1
 4703 0030 003040E3 		movt	r3, #:upper16:.LC1
 4704 0034 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4705              		.loc 3 401 0
 4706 0038 0020A0E3 		mov	r2, #0
 4707 003c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 4708 0040 001040E3 		movt	r1, #:upper16:_ZTIPKc
 4709 0044 FEFFFFEB 		bl	__cxa_throw
 4710              	.LVL501:
 4711              	.L364:
 4712              		.cfi_def_cfa_offset 0
 4713              		.cfi_restore 4
 4714              		.cfi_restore 14
 4715              	.LBB571:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 4716              		.loc 3 390 0
 4717 0048 0000A0E3 		mov	r0, #0
 4718              	.LVL502:
 4719 004c F2FFFFEA 		b	.L361
 4720              	.LBE571:
 4721              		.cfi_endproc
 4722              	.LFE139:
 4723              		.fnend
 4725              		.section	.text._ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v,"axG",%progbits,_ZNK11BigUnsigne
 4726              		.align	2
 4727              		.weak	_ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v
 4728              		.syntax unified
 4729              		.arm
 4730              		.fpu neon
 4732              	_ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v:
 4733              		.fnstart
 4734              	.LFB131:
 403:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 404:../src/zxing_lib/bigint/BigUnsigned.hh **** /* Wrap the above in an x >= 0 test to make sure we got a nonnegative result,
 405:../src/zxing_lib/bigint/BigUnsigned.hh ****  * not a negative one that happened to convert back into the correct nonnegative
 406:../src/zxing_lib/bigint/BigUnsigned.hh ****  * one.  (E.g., catch incorrect conversion of 2^31 to the long -2^31.)  Again,
 407:../src/zxing_lib/bigint/BigUnsigned.hh ****  * separated to avoid a g++ warning. */
 408:../src/zxing_lib/bigint/BigUnsigned.hh **** template <class X>
 409:../src/zxing_lib/bigint/BigUnsigned.hh **** X BigUnsigned::convertToSignedPrimitive() const {
 4735              		.loc 3 409 0
 4736              		.cfi_startproc
 4737              		@ args = 0, pretend = 0, frame = 0
 4738              		@ frame_needed = 0, uses_anonymous_args = 0
 4739              	.LVL503:
 4740 0000 10402DE9 		push	{r4, lr}
 4741              		.save {r4, lr}
 4742              		.cfi_def_cfa_offset 8
 4743              		.cfi_offset 4, -8
 4744              		.cfi_offset 14, -4
 410:../src/zxing_lib/bigint/BigUnsigned.hh **** 	X x = convertToPrimitive<X>();
 4745              		.loc 3 410 0
 4746 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveIlEET_v
 4747              	.LVL504:
 411:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x >= 0)
 4748              		.loc 3 411 0
 4749 0008 000050E3 		cmp	r0, #0
 4750 000c 1080BDA8 		popge	{r4, pc}
 412:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return x;
 413:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else
 414:../src/zxing_lib/bigint/BigUnsigned.hh **** 		throw "BigUnsigned::to(Primitive): "
 415:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Value is too big to fit in the requested type";
 4751              		.loc 3 415 0
 4752 0010 0400A0E3 		mov	r0, #4
 4753              	.LVL505:
 4754 0014 FEFFFFEB 		bl	__cxa_allocate_exception
 4755              	.LVL506:
 414:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Value is too big to fit in the requested type";
 4756              		.loc 3 414 0
 4757 0018 003000E3 		movw	r3, #:lower16:.LC7
 4758 001c 003040E3 		movt	r3, #:upper16:.LC7
 4759 0020 003080E5 		str	r3, [r0]
 4760              		.loc 3 415 0
 4761 0024 0020A0E3 		mov	r2, #0
 4762 0028 001000E3 		movw	r1, #:lower16:_ZTIPKc
 4763 002c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 4764 0030 FEFFFFEB 		bl	__cxa_throw
 4765              	.LVL507:
 4766              		.cfi_endproc
 4767              	.LFE131:
 4768              		.fnend
 4770              		.section	.text._ZNK11BigUnsigned6toLongEv,"ax",%progbits
 4771              		.align	2
 4772              		.global	_ZNK11BigUnsigned6toLongEv
 4773              		.syntax unified
 4774              		.arm
 4775              		.fpu neon
 4777              	_ZNK11BigUnsigned6toLongEv:
 4778              		.fnstart
 4779              	.LFB85:
  18:../src/zxing_lib/bigint/BigUnsigned.cpp **** int            BigUnsigned::toInt          () const { return convertToSignedPrimitive<         int 
 4780              		.loc 1 18 0
 4781              		.cfi_startproc
 4782              		@ args = 0, pretend = 0, frame = 0
 4783              		@ frame_needed = 0, uses_anonymous_args = 0
 4784              	.LVL508:
 4785 0000 10402DE9 		push	{r4, lr}
 4786              		.save {r4, lr}
 4787              		.cfi_def_cfa_offset 8
 4788              		.cfi_offset 4, -8
 4789              		.cfi_offset 14, -4
  18:../src/zxing_lib/bigint/BigUnsigned.cpp **** int            BigUnsigned::toInt          () const { return convertToSignedPrimitive<         int 
 4790              		.loc 1 18 0
 4791 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v
 4792              	.LVL509:
 4793 0008 1080BDE8 		pop	{r4, pc}
 4794              		.cfi_endproc
 4795              	.LFE85:
 4796              		.fnend
 4798              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveIiEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 4799              		.align	2
 4800              		.weak	_ZNK11BigUnsigned18convertToPrimitiveIiEET_v
 4801              		.syntax unified
 4802              		.arm
 4803              		.fpu neon
 4805              	_ZNK11BigUnsigned18convertToPrimitiveIiEET_v:
 4806              		.fnstart
 4807              	.LFB140:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 4808              		.loc 3 387 0
 4809              		.cfi_startproc
 4810              		@ args = 0, pretend = 0, frame = 0
 4811              		@ frame_needed = 0, uses_anonymous_args = 0
 4812              	.LVL510:
 4813              	.LBB572:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 4814              		.loc 3 388 0
 4815 0000 043090E5 		ldr	r3, [r0, #4]
 4816 0004 000053E3 		cmp	r3, #0
 4817 0008 0E00000A 		beq	.L376
 4818              	.LBB573:
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 4819              		.loc 3 391 0
 4820 000c 010053E3 		cmp	r3, #1
 4821 0010 0200001A 		bne	.L375
 4822              	.LBB574:
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 4823              		.loc 3 393 0
 4824 0014 083090E5 		ldr	r3, [r0, #8]
 4825 0018 000093E5 		ldr	r0, [r3]
 4826              	.LVL511:
 4827              	.L373:
 4828              	.LBE574:
 4829              	.LBE573:
 4830              	.LBE572:
 402:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 4831              		.loc 3 402 0
 4832 001c 1EFF2FE1 		bx	lr
 4833              	.LVL512:
 4834              	.L375:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 4835              		.loc 3 387 0
 4836 0020 10402DE9 		push	{r4, lr}
 4837              		.save {r4, lr}
 4838              		.cfi_def_cfa_offset 8
 4839              		.cfi_offset 4, -8
 4840              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4841              		.loc 3 401 0
 4842 0024 0400A0E3 		mov	r0, #4
 4843              	.LVL513:
 4844 0028 FEFFFFEB 		bl	__cxa_allocate_exception
 4845              	.LVL514:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 4846              		.loc 3 400 0
 4847 002c 003000E3 		movw	r3, #:lower16:.LC1
 4848 0030 003040E3 		movt	r3, #:upper16:.LC1
 4849 0034 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4850              		.loc 3 401 0
 4851 0038 0020A0E3 		mov	r2, #0
 4852 003c 001000E3 		movw	r1, #:lower16:_ZTIPKc
 4853 0040 001040E3 		movt	r1, #:upper16:_ZTIPKc
 4854 0044 FEFFFFEB 		bl	__cxa_throw
 4855              	.LVL515:
 4856              	.L376:
 4857              		.cfi_def_cfa_offset 0
 4858              		.cfi_restore 4
 4859              		.cfi_restore 14
 4860              	.LBB575:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 4861              		.loc 3 390 0
 4862 0048 0000A0E3 		mov	r0, #0
 4863              	.LVL516:
 4864 004c F2FFFFEA 		b	.L373
 4865              	.LBE575:
 4866              		.cfi_endproc
 4867              	.LFE140:
 4868              		.fnend
 4870              		.section	.text._ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v,"axG",%progbits,_ZNK11BigUnsigne
 4871              		.align	2
 4872              		.weak	_ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v
 4873              		.syntax unified
 4874              		.arm
 4875              		.fpu neon
 4877              	_ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v:
 4878              		.fnstart
 4879              	.LFB132:
 409:../src/zxing_lib/bigint/BigUnsigned.hh **** 	X x = convertToPrimitive<X>();
 4880              		.loc 3 409 0
 4881              		.cfi_startproc
 4882              		@ args = 0, pretend = 0, frame = 0
 4883              		@ frame_needed = 0, uses_anonymous_args = 0
 4884              	.LVL517:
 4885 0000 10402DE9 		push	{r4, lr}
 4886              		.save {r4, lr}
 4887              		.cfi_def_cfa_offset 8
 4888              		.cfi_offset 4, -8
 4889              		.cfi_offset 14, -4
 410:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x >= 0)
 4890              		.loc 3 410 0
 4891 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveIiEET_v
 4892              	.LVL518:
 411:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return x;
 4893              		.loc 3 411 0
 4894 0008 000050E3 		cmp	r0, #0
 4895 000c 1080BDA8 		popge	{r4, pc}
 4896              		.loc 3 415 0
 4897 0010 0400A0E3 		mov	r0, #4
 4898              	.LVL519:
 4899 0014 FEFFFFEB 		bl	__cxa_allocate_exception
 4900              	.LVL520:
 414:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Value is too big to fit in the requested type";
 4901              		.loc 3 414 0
 4902 0018 003000E3 		movw	r3, #:lower16:.LC7
 4903 001c 003040E3 		movt	r3, #:upper16:.LC7
 4904 0020 003080E5 		str	r3, [r0]
 4905              		.loc 3 415 0
 4906 0024 0020A0E3 		mov	r2, #0
 4907 0028 001000E3 		movw	r1, #:lower16:_ZTIPKc
 4908 002c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 4909 0030 FEFFFFEB 		bl	__cxa_throw
 4910              	.LVL521:
 4911              		.cfi_endproc
 4912              	.LFE132:
 4913              		.fnend
 4915              		.section	.text._ZNK11BigUnsigned5toIntEv,"ax",%progbits
 4916              		.align	2
 4917              		.global	_ZNK11BigUnsigned5toIntEv
 4918              		.syntax unified
 4919              		.arm
 4920              		.fpu neon
 4922              	_ZNK11BigUnsigned5toIntEv:
 4923              		.fnstart
 4924              	.LFB86:
  19:../src/zxing_lib/bigint/BigUnsigned.cpp **** short          BigUnsigned::toShort        () const { return convertToSignedPrimitive<         shor
 4925              		.loc 1 19 0
 4926              		.cfi_startproc
 4927              		@ args = 0, pretend = 0, frame = 0
 4928              		@ frame_needed = 0, uses_anonymous_args = 0
 4929              	.LVL522:
 4930 0000 10402DE9 		push	{r4, lr}
 4931              		.save {r4, lr}
 4932              		.cfi_def_cfa_offset 8
 4933              		.cfi_offset 4, -8
 4934              		.cfi_offset 14, -4
  19:../src/zxing_lib/bigint/BigUnsigned.cpp **** short          BigUnsigned::toShort        () const { return convertToSignedPrimitive<         shor
 4935              		.loc 1 19 0
 4936 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v
 4937              	.LVL523:
 4938 0008 1080BDE8 		pop	{r4, pc}
 4939              		.cfi_endproc
 4940              	.LFE86:
 4941              		.fnend
 4943              		.section	.text._ZNK11BigUnsigned18convertToPrimitiveIsEET_v,"axG",%progbits,_ZNK11BigUnsigned18con
 4944              		.align	2
 4945              		.weak	_ZNK11BigUnsigned18convertToPrimitiveIsEET_v
 4946              		.syntax unified
 4947              		.arm
 4948              		.fpu neon
 4950              	_ZNK11BigUnsigned18convertToPrimitiveIsEET_v:
 4951              		.fnstart
 4952              	.LFB141:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 4953              		.loc 3 387 0
 4954              		.cfi_startproc
 4955              		@ args = 0, pretend = 0, frame = 0
 4956              		@ frame_needed = 0, uses_anonymous_args = 0
 4957              	.LVL524:
 4958              	.LBB576:
 388:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The number is zero; return zero.
 4959              		.loc 3 388 0
 4960 0000 043090E5 		ldr	r3, [r0, #4]
 4961 0004 000053E3 		cmp	r3, #0
 4962 0008 1100000A 		beq	.L388
 4963              	.LBB577:
 391:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// The single block might fit in an X.  Try the conversion.
 4964              		.loc 3 391 0
 4965 000c 010053E3 		cmp	r3, #1
 4966 0010 0500001A 		bne	.L387
 4967              	.LBB578:
 393:../src/zxing_lib/bigint/BigUnsigned.hh **** 		// Make sure the result accurately represents the block.
 4968              		.loc 3 393 0
 4969 0014 083090E5 		ldr	r3, [r0, #8]
 4970 0018 003093E5 		ldr	r3, [r3]
 4971 001c 7300BFE6 		sxth	r0, r3
 4972              	.LVL525:
 395:../src/zxing_lib/bigint/BigUnsigned.hh **** 			// Successful conversion.
 4973              		.loc 3 395 0
 4974 0020 000053E1 		cmp	r3, r0
 4975 0024 0000001A 		bne	.L387
 4976              	.LVL526:
 4977              	.L386:
 4978              	.LBE578:
 4979              	.LBE577:
 4980              	.LBE576:
 402:../src/zxing_lib/bigint/BigUnsigned.hh **** 
 4981              		.loc 3 402 0
 4982 0028 1EFF2FE1 		bx	lr
 4983              	.L387:
 387:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (len == 0)
 4984              		.loc 3 387 0
 4985 002c 10402DE9 		push	{r4, lr}
 4986              		.save {r4, lr}
 4987              		.cfi_def_cfa_offset 8
 4988              		.cfi_offset 4, -8
 4989              		.cfi_offset 14, -4
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4990              		.loc 3 401 0
 4991 0030 0400A0E3 		mov	r0, #4
 4992 0034 FEFFFFEB 		bl	__cxa_allocate_exception
 4993              	.LVL527:
 400:../src/zxing_lib/bigint/BigUnsigned.hh **** 		"Value is too big to fit in the requested type";
 4994              		.loc 3 400 0
 4995 0038 003000E3 		movw	r3, #:lower16:.LC1
 4996 003c 003040E3 		movt	r3, #:upper16:.LC1
 4997 0040 003080E5 		str	r3, [r0]
 401:../src/zxing_lib/bigint/BigUnsigned.hh **** }
 4998              		.loc 3 401 0
 4999 0044 0020A0E3 		mov	r2, #0
 5000 0048 001000E3 		movw	r1, #:lower16:_ZTIPKc
 5001 004c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 5002 0050 FEFFFFEB 		bl	__cxa_throw
 5003              	.LVL528:
 5004              	.L388:
 5005              		.cfi_def_cfa_offset 0
 5006              		.cfi_restore 4
 5007              		.cfi_restore 14
 5008              	.LBB579:
 390:../src/zxing_lib/bigint/BigUnsigned.hh **** 	else if (len == 1) {
 5009              		.loc 3 390 0
 5010 0054 0000A0E3 		mov	r0, #0
 5011              	.LVL529:
 5012 0058 F2FFFFEA 		b	.L386
 5013              	.LBE579:
 5014              		.cfi_endproc
 5015              	.LFE141:
 5016              		.fnend
 5018              		.section	.text._ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v,"axG",%progbits,_ZNK11BigUnsigne
 5019              		.align	2
 5020              		.weak	_ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v
 5021              		.syntax unified
 5022              		.arm
 5023              		.fpu neon
 5025              	_ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v:
 5026              		.fnstart
 5027              	.LFB133:
 409:../src/zxing_lib/bigint/BigUnsigned.hh **** 	X x = convertToPrimitive<X>();
 5028              		.loc 3 409 0
 5029              		.cfi_startproc
 5030              		@ args = 0, pretend = 0, frame = 0
 5031              		@ frame_needed = 0, uses_anonymous_args = 0
 5032              	.LVL530:
 5033 0000 10402DE9 		push	{r4, lr}
 5034              		.save {r4, lr}
 5035              		.cfi_def_cfa_offset 8
 5036              		.cfi_offset 4, -8
 5037              		.cfi_offset 14, -4
 410:../src/zxing_lib/bigint/BigUnsigned.hh **** 	if (x >= 0)
 5038              		.loc 3 410 0
 5039 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned18convertToPrimitiveIsEET_v
 5040              	.LVL531:
 411:../src/zxing_lib/bigint/BigUnsigned.hh **** 		return x;
 5041              		.loc 3 411 0
 5042 0008 000050E3 		cmp	r0, #0
 5043              	.LVL532:
 5044 000c 1080BDA8 		popge	{r4, pc}
 5045              		.loc 3 415 0
 5046 0010 0400A0E3 		mov	r0, #4
 5047 0014 FEFFFFEB 		bl	__cxa_allocate_exception
 5048              	.LVL533:
 414:../src/zxing_lib/bigint/BigUnsigned.hh **** 			"Value is too big to fit in the requested type";
 5049              		.loc 3 414 0
 5050 0018 003000E3 		movw	r3, #:lower16:.LC7
 5051 001c 003040E3 		movt	r3, #:upper16:.LC7
 5052 0020 003080E5 		str	r3, [r0]
 5053              		.loc 3 415 0
 5054 0024 0020A0E3 		mov	r2, #0
 5055 0028 001000E3 		movw	r1, #:lower16:_ZTIPKc
 5056 002c 001040E3 		movt	r1, #:upper16:_ZTIPKc
 5057 0030 FEFFFFEB 		bl	__cxa_throw
 5058              	.LVL534:
 5059              		.cfi_endproc
 5060              	.LFE133:
 5061              		.fnend
 5063              		.section	.text._ZNK11BigUnsigned7toShortEv,"ax",%progbits
 5064              		.align	2
 5065              		.global	_ZNK11BigUnsigned7toShortEv
 5066              		.syntax unified
 5067              		.arm
 5068              		.fpu neon
 5070              	_ZNK11BigUnsigned7toShortEv:
 5071              		.fnstart
 5072              	.LFB87:
  20:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 5073              		.loc 1 20 0
 5074              		.cfi_startproc
 5075              		@ args = 0, pretend = 0, frame = 0
 5076              		@ frame_needed = 0, uses_anonymous_args = 0
 5077              	.LVL535:
 5078 0000 10402DE9 		push	{r4, lr}
 5079              		.save {r4, lr}
 5080              		.cfi_def_cfa_offset 8
 5081              		.cfi_offset 4, -8
 5082              		.cfi_offset 14, -4
  20:../src/zxing_lib/bigint/BigUnsigned.cpp **** 
 5083              		.loc 1 20 0
 5084 0004 FEFFFFEB 		bl	_ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v
 5085              	.LVL536:
 5086 0008 1080BDE8 		pop	{r4, pc}
 5087              		.cfi_endproc
 5088              	.LFE87:
 5089              		.fnend
 5091              		.section	.rodata._ZN11BigUnsigned12bitShiftLeftERKS_i.str1.4,"aMS",%progbits,1
 5092              		.align	2
 5093              	.LC4:
 5094 0000 42696755 		.ascii	"BigUnsigned::bitShiftLeft: Pathological shift amoun"
 5094      6E736967 
 5094      6E65643A 
 5094      3A626974 
 5094      53686966 
 5095 0033 74206E6F 		.ascii	"t not implemented\000"
 5095      7420696D 
 5095      706C656D 
 5095      656E7465 
 5095      6400
 5096              		.section	.rodata._ZN11BigUnsigned13bitShiftRightERKS_i.str1.4,"aMS",%progbits,1
 5097              		.align	2
 5098              	.LC5:
 5099 0000 42696755 		.ascii	"BigUnsigned::bitShiftRight: Pathological shift amou"
 5099      6E736967 
 5099      6E65643A 
 5099      3A626974 
 5099      53686966 
 5100 0033 6E74206E 		.ascii	"nt not implemented\000"
 5100      6F742069 
 5100      6D706C65 
 5100      6D656E74 
 5100      656400
 5101              		.section	.rodata._ZN11BigUnsigned19divideWithRemainderERKS_RS_.str1.4,"aMS",%progbits,1
 5102              		.align	2
 5103              	.LC3:
 5104 0000 42696755 		.ascii	"BigUnsigned::divideWithRemainder: Cannot write quot"
 5104      6E736967 
 5104      6E65643A 
 5104      3A646976 
 5104      69646557 
 5105 0033 69656E74 		.ascii	"ient and remainder into the same variable\000"
 5105      20616E64 
 5105      2072656D 
 5105      61696E64 
 5105      65722069 
 5106              		.section	.rodata._ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_.str1.4,"aMS",%progbits,1
 5107              		.align	2
 5108              	.LC6:
 5109 0000 42696755 		.ascii	"BigUnsigned constructor: Cannot construct a BigUnsi"
 5109      6E736967 
 5109      6E656420 
 5109      636F6E73 
 5109      74727563 
 5110 0033 676E6564 		.ascii	"gned from a negative number\000"
 5110      2066726F 
 5110      6D206120 
 5110      6E656761 
 5110      74697665 
 5111              		.section	.rodata._ZN11BigUnsigned8subtractERKS_S1_.str1.4,"aMS",%progbits,1
 5112              		.align	2
 5113              	.LC2:
 5114 0000 42696755 		.ascii	"BigUnsigned::subtract: Negative result in unsigned "
 5114      6E736967 
 5114      6E65643A 
 5114      3A737562 
 5114      74726163 
 5115 0033 63616C63 		.ascii	"calculation\000"
 5115      756C6174 
 5115      696F6E00 
 5116              		.section	.rodata._ZN11BigUnsignedmmEv.str1.4,"aMS",%progbits,1
 5117              		.align	2
 5118              	.LC0:
 5119 0000 42696755 		.ascii	"BigUnsigned::operator --(): Cannot decrement an uns"
 5119      6E736967 
 5119      6E65643A 
 5119      3A6F7065 
 5119      7261746F 
 5120 0033 69676E65 		.ascii	"igned zero\000"
 5120      64207A65 
 5120      726F00
 5121              		.section	.rodata._ZNK11BigUnsigned18convertToPrimitiveImEET_v.str1.4,"aMS",%progbits,1
 5122              		.align	2
 5123              	.LC1:
 5124 0000 42696755 		.ascii	"BigUnsigned::to<Primitive>: Value is too big to fit"
 5124      6E736967 
 5124      6E65643A 
 5124      3A746F3C 
 5124      5072696D 
 5125 0033 20696E20 		.ascii	" in the requested type\000"
 5125      74686520 
 5125      72657175 
 5125      65737465 
 5125      64207479 
 5126              		.section	.rodata._ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v.str1.4,"aMS",%progbits,1
 5127              		.align	2
 5128              	.LC7:
 5129 0000 42696755 		.ascii	"BigUnsigned::to(Primitive): Value is too big to fit"
 5129      6E736967 
 5129      6E65643A 
 5129      3A746F28 
 5129      5072696D 
 5130 0033 20696E20 		.ascii	" in the requested type\000"
 5130      74686520 
 5130      72657175 
 5130      65737465 
 5130      64207479 
 5131              		.text
 5132              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 BigUnsigned.cpp
     /tmp/ccolg5ux.s:17     .text._ZNK11BigUnsigned9bitLengthEv:0000000000000000 $a
     /tmp/ccolg5ux.s:23     .text._ZNK11BigUnsigned9bitLengthEv:0000000000000000 _ZNK11BigUnsigned9bitLengthEv
.ARM.exidx.text._ZNK11BigUnsigned9bitLengthEv:0000000000000000 $d
     /tmp/ccolg5ux.s:110    .text._ZNK11BigUnsigned9compareToERKS_:0000000000000000 $a
     /tmp/ccolg5ux.s:116    .text._ZNK11BigUnsigned9compareToERKS_:0000000000000000 _ZNK11BigUnsigned9compareToERKS_
.ARM.exidx.text._ZNK11BigUnsigned9compareToERKS_:0000000000000000 $d
     /tmp/ccolg5ux.s:194    .text._ZN11BigUnsignedmmEv:0000000000000000 $a
     /tmp/ccolg5ux.s:200    .text._ZN11BigUnsignedmmEv:0000000000000000 _ZN11BigUnsignedmmEv
     /tmp/ccolg5ux.s:5118   .rodata._ZN11BigUnsignedmmEv.str1.4:0000000000000000 .LC0
.ARM.exidx.text._ZN11BigUnsignedmmEv:0000000000000000 $d
     /tmp/ccolg5ux.s:276    .text._ZN11BigUnsignedmmEi:0000000000000000 $a
     /tmp/ccolg5ux.s:282    .text._ZN11BigUnsignedmmEi:0000000000000000 _ZN11BigUnsignedmmEi
.ARM.exidx.text._ZN11BigUnsignedmmEi:0000000000000000 $d
     /tmp/ccolg5ux.s:304    .text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 $a
     /tmp/ccolg5ux.s:310    .text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 _ZN15NumberlikeArrayImEC2ERKS0_
.ARM.exidx.text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 $d
     /tmp/ccolg5ux.s:310    .text._ZN15NumberlikeArrayImEC2ERKS0_:0000000000000000 _ZN15NumberlikeArrayImEC1ERKS0_
     /tmp/ccolg5ux.s:379    .text._ZN11BigUnsigned17initFromPrimitiveImEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:385    .text._ZN11BigUnsigned17initFromPrimitiveImEEvT_:0000000000000000 _ZN11BigUnsigned17initFromPrimitiveImEEvT_
.ARM.exidx.text._ZN11BigUnsigned17initFromPrimitiveImEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:423    .text._ZN11BigUnsignedC2Em:0000000000000000 $a
     /tmp/ccolg5ux.s:429    .text._ZN11BigUnsignedC2Em:0000000000000000 _ZN11BigUnsignedC2Em
.ARM.extab.text._ZN11BigUnsignedC2Em:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsignedC2Em:0000000000000000 $d
     /tmp/ccolg5ux.s:429    .text._ZN11BigUnsignedC2Em:0000000000000000 _ZN11BigUnsignedC1Em
     /tmp/ccolg5ux.s:512    .text._ZN11BigUnsigned17initFromPrimitiveIjEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:518    .text._ZN11BigUnsigned17initFromPrimitiveIjEEvT_:0000000000000000 _ZN11BigUnsigned17initFromPrimitiveIjEEvT_
.ARM.exidx.text._ZN11BigUnsigned17initFromPrimitiveIjEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:556    .text._ZN11BigUnsignedC2Ej:0000000000000000 $a
     /tmp/ccolg5ux.s:562    .text._ZN11BigUnsignedC2Ej:0000000000000000 _ZN11BigUnsignedC2Ej
.ARM.extab.text._ZN11BigUnsignedC2Ej:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsignedC2Ej:0000000000000000 $d
     /tmp/ccolg5ux.s:562    .text._ZN11BigUnsignedC2Ej:0000000000000000 _ZN11BigUnsignedC1Ej
     /tmp/ccolg5ux.s:644    .text._ZN11BigUnsigned17initFromPrimitiveItEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:650    .text._ZN11BigUnsigned17initFromPrimitiveItEEvT_:0000000000000000 _ZN11BigUnsigned17initFromPrimitiveItEEvT_
.ARM.exidx.text._ZN11BigUnsigned17initFromPrimitiveItEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:688    .text._ZN11BigUnsignedC2Et:0000000000000000 $a
     /tmp/ccolg5ux.s:694    .text._ZN11BigUnsignedC2Et:0000000000000000 _ZN11BigUnsignedC2Et
.ARM.extab.text._ZN11BigUnsignedC2Et:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsignedC2Et:0000000000000000 $d
     /tmp/ccolg5ux.s:694    .text._ZN11BigUnsignedC2Et:0000000000000000 _ZN11BigUnsignedC1Et
     /tmp/ccolg5ux.s:776    .text._ZNK11BigUnsigned18convertToPrimitiveImEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:782    .text._ZNK11BigUnsigned18convertToPrimitiveImEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveImEET_v
     /tmp/ccolg5ux.s:5123   .rodata._ZNK11BigUnsigned18convertToPrimitiveImEET_v.str1.4:0000000000000000 .LC1
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveImEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:848    .text._ZNK11BigUnsigned14toUnsignedLongEv:0000000000000000 $a
     /tmp/ccolg5ux.s:854    .text._ZNK11BigUnsigned14toUnsignedLongEv:0000000000000000 _ZNK11BigUnsigned14toUnsignedLongEv
.ARM.exidx.text._ZNK11BigUnsigned14toUnsignedLongEv:0000000000000000 $d
     /tmp/ccolg5ux.s:876    .text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:882    .text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveIjEET_v
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveIjEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:948    .text._ZNK11BigUnsigned13toUnsignedIntEv:0000000000000000 $a
     /tmp/ccolg5ux.s:954    .text._ZNK11BigUnsigned13toUnsignedIntEv:0000000000000000 _ZNK11BigUnsigned13toUnsignedIntEv
.ARM.exidx.text._ZNK11BigUnsigned13toUnsignedIntEv:0000000000000000 $d
     /tmp/ccolg5ux.s:976    .text._ZNK11BigUnsigned18convertToPrimitiveItEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:982    .text._ZNK11BigUnsigned18convertToPrimitiveItEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveItEET_v
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveItEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:1051   .text._ZNK11BigUnsigned15toUnsignedShortEv:0000000000000000 $a
     /tmp/ccolg5ux.s:1057   .text._ZNK11BigUnsigned15toUnsignedShortEv:0000000000000000 _ZNK11BigUnsigned15toUnsignedShortEv
.ARM.exidx.text._ZNK11BigUnsigned15toUnsignedShortEv:0000000000000000 $d
     /tmp/ccolg5ux.s:1079   .text._ZN15NumberlikeArrayImE15allocateAndCopyEj:0000000000000000 $a
     /tmp/ccolg5ux.s:1085   .text._ZN15NumberlikeArrayImE15allocateAndCopyEj:0000000000000000 _ZN15NumberlikeArrayImE15allocateAndCopyEj
.ARM.exidx.text._ZN15NumberlikeArrayImE15allocateAndCopyEj:0000000000000000 $d
     /tmp/ccolg5ux.s:1162   .text._ZN11BigUnsigned8setBlockEjm:0000000000000000 $a
     /tmp/ccolg5ux.s:1168   .text._ZN11BigUnsigned8setBlockEjm:0000000000000000 _ZN11BigUnsigned8setBlockEjm
.ARM.exidx.text._ZN11BigUnsigned8setBlockEjm:0000000000000000 $d
     /tmp/ccolg5ux.s:1272   .text._ZN11BigUnsigned6setBitEjb:0000000000000000 $a
     /tmp/ccolg5ux.s:1278   .text._ZN11BigUnsigned6setBitEjb:0000000000000000 _ZN11BigUnsigned6setBitEjb
.ARM.exidx.text._ZN11BigUnsigned6setBitEjb:0000000000000000 $d
     /tmp/ccolg5ux.s:1344   .text._ZN11BigUnsignedppEv:0000000000000000 $a
     /tmp/ccolg5ux.s:1350   .text._ZN11BigUnsignedppEv:0000000000000000 _ZN11BigUnsignedppEv
.ARM.exidx.text._ZN11BigUnsignedppEv:0000000000000000 $d
     /tmp/ccolg5ux.s:1418   .text._ZN11BigUnsignedppEi:0000000000000000 $a
     /tmp/ccolg5ux.s:1424   .text._ZN11BigUnsignedppEi:0000000000000000 _ZN11BigUnsignedppEi
.ARM.exidx.text._ZN11BigUnsignedppEi:0000000000000000 $d
     /tmp/ccolg5ux.s:1446   .text._ZN15NumberlikeArrayImE8allocateEj:0000000000000000 $a
     /tmp/ccolg5ux.s:1452   .text._ZN15NumberlikeArrayImE8allocateEj:0000000000000000 _ZN15NumberlikeArrayImE8allocateEj
.ARM.exidx.text._ZN15NumberlikeArrayImE8allocateEj:0000000000000000 $d
     /tmp/ccolg5ux.s:1503   .text._ZN15NumberlikeArrayImEaSERKS0_:0000000000000000 $a
     /tmp/ccolg5ux.s:1509   .text._ZN15NumberlikeArrayImEaSERKS0_:0000000000000000 _ZN15NumberlikeArrayImEaSERKS0_
.ARM.exidx.text._ZN15NumberlikeArrayImEaSERKS0_:0000000000000000 $d
     /tmp/ccolg5ux.s:1559   .text._ZN11BigUnsigned3addERKS_S1_:0000000000000000 $a
     /tmp/ccolg5ux.s:1565   .text._ZN11BigUnsigned3addERKS_S1_:0000000000000000 _ZN11BigUnsigned3addERKS_S1_
.ARM.extab.text._ZN11BigUnsigned3addERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned3addERKS_S1_:0000000000000000 $d
     /tmp/ccolg5ux.s:1864   .text._ZN11BigUnsigned8subtractERKS_S1_:0000000000000000 $a
     /tmp/ccolg5ux.s:1870   .text._ZN11BigUnsigned8subtractERKS_S1_:0000000000000000 _ZN11BigUnsigned8subtractERKS_S1_
     /tmp/ccolg5ux.s:5113   .rodata._ZN11BigUnsigned8subtractERKS_S1_.str1.4:0000000000000000 .LC2
.ARM.extab.text._ZN11BigUnsigned8subtractERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned8subtractERKS_S1_:0000000000000000 $d
     /tmp/ccolg5ux.s:2172   .text._ZN11BigUnsigned8multiplyERKS_S1_:0000000000000000 $a
     /tmp/ccolg5ux.s:2178   .text._ZN11BigUnsigned8multiplyERKS_S1_:0000000000000000 _ZN11BigUnsigned8multiplyERKS_S1_
.ARM.extab.text._ZN11BigUnsigned8multiplyERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned8multiplyERKS_S1_:0000000000000000 $d
     /tmp/ccolg5ux.s:2501   .text._ZN11BigUnsigned19divideWithRemainderERKS_RS_:0000000000000000 $a
     /tmp/ccolg5ux.s:2507   .text._ZN11BigUnsigned19divideWithRemainderERKS_RS_:0000000000000000 _ZN11BigUnsigned19divideWithRemainderERKS_RS_
     /tmp/ccolg5ux.s:5103   .rodata._ZN11BigUnsigned19divideWithRemainderERKS_RS_.str1.4:0000000000000000 .LC3
.ARM.extab.text._ZN11BigUnsigned19divideWithRemainderERKS_RS_:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned19divideWithRemainderERKS_RS_:0000000000000000 $d
     /tmp/ccolg5ux.s:2935   .text._ZN11BigUnsigned6bitAndERKS_S1_:0000000000000000 $a
     /tmp/ccolg5ux.s:2941   .text._ZN11BigUnsigned6bitAndERKS_S1_:0000000000000000 _ZN11BigUnsigned6bitAndERKS_S1_
.ARM.extab.text._ZN11BigUnsigned6bitAndERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned6bitAndERKS_S1_:0000000000000000 $d
     /tmp/ccolg5ux.s:3133   .text._ZN11BigUnsigned5bitOrERKS_S1_:0000000000000000 $a
     /tmp/ccolg5ux.s:3139   .text._ZN11BigUnsigned5bitOrERKS_S1_:0000000000000000 _ZN11BigUnsigned5bitOrERKS_S1_
.ARM.extab.text._ZN11BigUnsigned5bitOrERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned5bitOrERKS_S1_:0000000000000000 $d
     /tmp/ccolg5ux.s:3341   .text._ZN11BigUnsigned6bitXorERKS_S1_:0000000000000000 $a
     /tmp/ccolg5ux.s:3347   .text._ZN11BigUnsigned6bitXorERKS_S1_:0000000000000000 _ZN11BigUnsigned6bitXorERKS_S1_
.ARM.extab.text._ZN11BigUnsigned6bitXorERKS_S1_:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned6bitXorERKS_S1_:0000000000000000 $d
     /tmp/ccolg5ux.s:3566   .text._ZN11BigUnsigned12bitShiftLeftERKS_i:0000000000000000 $a
     /tmp/ccolg5ux.s:3572   .text._ZN11BigUnsigned12bitShiftLeftERKS_i:0000000000000000 _ZN11BigUnsigned12bitShiftLeftERKS_i
     /tmp/ccolg5ux.s:3850   .text._ZN11BigUnsigned13bitShiftRightERKS_i:0000000000000000 _ZN11BigUnsigned13bitShiftRightERKS_i
     /tmp/ccolg5ux.s:5093   .rodata._ZN11BigUnsigned12bitShiftLeftERKS_i.str1.4:0000000000000000 .LC4
.ARM.extab.text._ZN11BigUnsigned12bitShiftLeftERKS_i:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned12bitShiftLeftERKS_i:0000000000000000 $d
     /tmp/ccolg5ux.s:3844   .text._ZN11BigUnsigned13bitShiftRightERKS_i:0000000000000000 $a
     /tmp/ccolg5ux.s:5098   .rodata._ZN11BigUnsigned13bitShiftRightERKS_i.str1.4:0000000000000000 .LC5
.ARM.extab.text._ZN11BigUnsigned13bitShiftRightERKS_i:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsigned13bitShiftRightERKS_i:0000000000000000 $d
     /tmp/ccolg5ux.s:4113   .text._ZN11BigUnsigned17initFromPrimitiveIlEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:4119   .text._ZN11BigUnsigned17initFromPrimitiveIlEEvT_:0000000000000000 _ZN11BigUnsigned17initFromPrimitiveIlEEvT_
.ARM.exidx.text._ZN11BigUnsigned17initFromPrimitiveIlEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:4157   .text._ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:4163   .text._ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_:0000000000000000 _ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_
     /tmp/ccolg5ux.s:5108   .rodata._ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_.str1.4:0000000000000000 .LC6
.ARM.exidx.text._ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:4205   .text._ZN11BigUnsignedC2El:0000000000000000 $a
     /tmp/ccolg5ux.s:4211   .text._ZN11BigUnsignedC2El:0000000000000000 _ZN11BigUnsignedC2El
.ARM.extab.text._ZN11BigUnsignedC2El:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsignedC2El:0000000000000000 $d
     /tmp/ccolg5ux.s:4211   .text._ZN11BigUnsignedC2El:0000000000000000 _ZN11BigUnsignedC1El
     /tmp/ccolg5ux.s:4293   .text._ZN11BigUnsigned17initFromPrimitiveIiEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:4299   .text._ZN11BigUnsigned17initFromPrimitiveIiEEvT_:0000000000000000 _ZN11BigUnsigned17initFromPrimitiveIiEEvT_
.ARM.exidx.text._ZN11BigUnsigned17initFromPrimitiveIiEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:4337   .text._ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:4343   .text._ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_:0000000000000000 _ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_
.ARM.exidx.text._ZN11BigUnsigned23initFromSignedPrimitiveIiEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:4385   .text._ZN11BigUnsignedC2Ei:0000000000000000 $a
     /tmp/ccolg5ux.s:4391   .text._ZN11BigUnsignedC2Ei:0000000000000000 _ZN11BigUnsignedC2Ei
.ARM.extab.text._ZN11BigUnsignedC2Ei:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsignedC2Ei:0000000000000000 $d
     /tmp/ccolg5ux.s:4391   .text._ZN11BigUnsignedC2Ei:0000000000000000 _ZN11BigUnsignedC1Ei
     /tmp/ccolg5ux.s:4473   .text._ZN11BigUnsigned17initFromPrimitiveIsEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:4479   .text._ZN11BigUnsigned17initFromPrimitiveIsEEvT_:0000000000000000 _ZN11BigUnsigned17initFromPrimitiveIsEEvT_
.ARM.exidx.text._ZN11BigUnsigned17initFromPrimitiveIsEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:4517   .text._ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_:0000000000000000 $a
     /tmp/ccolg5ux.s:4523   .text._ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_:0000000000000000 _ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_
.ARM.exidx.text._ZN11BigUnsigned23initFromSignedPrimitiveIsEEvT_:0000000000000000 $d
     /tmp/ccolg5ux.s:4566   .text._ZN11BigUnsignedC2Es:0000000000000000 $a
     /tmp/ccolg5ux.s:4572   .text._ZN11BigUnsignedC2Es:0000000000000000 _ZN11BigUnsignedC2Es
.ARM.extab.text._ZN11BigUnsignedC2Es:0000000000000000 $d
.ARM.exidx.text._ZN11BigUnsignedC2Es:0000000000000000 $d
     /tmp/ccolg5ux.s:4572   .text._ZN11BigUnsignedC2Es:0000000000000000 _ZN11BigUnsignedC1Es
     /tmp/ccolg5ux.s:4654   .text._ZNK11BigUnsigned18convertToPrimitiveIlEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:4660   .text._ZNK11BigUnsigned18convertToPrimitiveIlEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveIlEET_v
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveIlEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:4726   .text._ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:4732   .text._ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v:0000000000000000 _ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v
     /tmp/ccolg5ux.s:5128   .rodata._ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v.str1.4:0000000000000000 .LC7
.ARM.exidx.text._ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:4771   .text._ZNK11BigUnsigned6toLongEv:0000000000000000 $a
     /tmp/ccolg5ux.s:4777   .text._ZNK11BigUnsigned6toLongEv:0000000000000000 _ZNK11BigUnsigned6toLongEv
.ARM.exidx.text._ZNK11BigUnsigned6toLongEv:0000000000000000 $d
     /tmp/ccolg5ux.s:4799   .text._ZNK11BigUnsigned18convertToPrimitiveIiEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:4805   .text._ZNK11BigUnsigned18convertToPrimitiveIiEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveIiEET_v
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveIiEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:4871   .text._ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:4877   .text._ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v:0000000000000000 _ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v
.ARM.exidx.text._ZNK11BigUnsigned24convertToSignedPrimitiveIiEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:4916   .text._ZNK11BigUnsigned5toIntEv:0000000000000000 $a
     /tmp/ccolg5ux.s:4922   .text._ZNK11BigUnsigned5toIntEv:0000000000000000 _ZNK11BigUnsigned5toIntEv
.ARM.exidx.text._ZNK11BigUnsigned5toIntEv:0000000000000000 $d
     /tmp/ccolg5ux.s:4944   .text._ZNK11BigUnsigned18convertToPrimitiveIsEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:4950   .text._ZNK11BigUnsigned18convertToPrimitiveIsEET_v:0000000000000000 _ZNK11BigUnsigned18convertToPrimitiveIsEET_v
.ARM.exidx.text._ZNK11BigUnsigned18convertToPrimitiveIsEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:5019   .text._ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v:0000000000000000 $a
     /tmp/ccolg5ux.s:5025   .text._ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v:0000000000000000 _ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v
.ARM.exidx.text._ZNK11BigUnsigned24convertToSignedPrimitiveIsEET_v:0000000000000000 $d
     /tmp/ccolg5ux.s:5064   .text._ZNK11BigUnsigned7toShortEv:0000000000000000 $a
     /tmp/ccolg5ux.s:5070   .text._ZNK11BigUnsigned7toShortEv:0000000000000000 _ZNK11BigUnsigned7toShortEv
.ARM.exidx.text._ZNK11BigUnsigned7toShortEv:0000000000000000 $d
     /tmp/ccolg5ux.s:5092   .rodata._ZN11BigUnsigned12bitShiftLeftERKS_i.str1.4:0000000000000000 $d
     /tmp/ccolg5ux.s:5097   .rodata._ZN11BigUnsigned13bitShiftRightERKS_i.str1.4:0000000000000000 $d
     /tmp/ccolg5ux.s:5102   .rodata._ZN11BigUnsigned19divideWithRemainderERKS_RS_.str1.4:0000000000000000 $d
     /tmp/ccolg5ux.s:5107   .rodata._ZN11BigUnsigned23initFromSignedPrimitiveIlEEvT_.str1.4:0000000000000000 $d
     /tmp/ccolg5ux.s:5112   .rodata._ZN11BigUnsigned8subtractERKS_S1_.str1.4:0000000000000000 $d
     /tmp/ccolg5ux.s:5117   .rodata._ZN11BigUnsignedmmEv.str1.4:0000000000000000 $d
     /tmp/ccolg5ux.s:5122   .rodata._ZNK11BigUnsigned18convertToPrimitiveImEET_v.str1.4:0000000000000000 $d
     /tmp/ccolg5ux.s:5127   .rodata._ZNK11BigUnsigned24convertToSignedPrimitiveIlEET_v.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 _ZN15NumberlikeArrayImEC5ERKS0_
                           .group:0000000000000000 wm4.0.cd1e96de8a8c4f34e746a820772853ad
                           .group:0000000000000000 wm4.NumberlikeArray.hh.2.7b7601590c187b821715f11913579205

UNDEFINED SYMBOLS
__cxa_allocate_exception
_ZTIPKc
__cxa_throw
__aeabi_unwind_cpp_pr0
_Znaj
__cxa_throw_bad_array_new_length
__gxx_personality_v0
_ZdaPv
__cxa_end_cleanup
